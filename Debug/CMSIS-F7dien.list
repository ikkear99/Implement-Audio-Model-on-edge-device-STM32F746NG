
CMSIS-F7dien.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025e58  0800b3bc  0800b3bc  0001b3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031214  08031214  00050f34  2**0
                  CONTENTS
  4 .ARM          00000008  08031214  08031214  00041214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803121c  0803121c  00050f34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803121c  0803121c  0004121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031220  08031220  00041220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f34  20000000  08031224  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00021434  20000f34  08032158  00050f34  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20022368  08032158  00052368  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050f34  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a75  00000000  00000000  00050f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000350d  00000000  00000000  000679d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  0006aee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  0006bea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000299ef  00000000  00000000  0006cc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f244  00000000  00000000  0009662f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdcd3  00000000  00000000  000a5873  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001a3546  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004810  00000000  00000000  001a3634  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000392f  00000000  00000000  001a7e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000f34 	.word	0x20000f34
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b3a4 	.word	0x0800b3a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000f38 	.word	0x20000f38
 800020c:	0800b3a4 	.word	0x0800b3a4

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004ae:	f1a4 0401 	sub.w	r4, r4, #1
 80004b2:	d1e9      	bne.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b972 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9e08      	ldr	r6, [sp, #32]
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	4688      	mov	r8, r1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d14b      	bne.n	8000d92 <__udivmoddi4+0xa6>
 8000cfa:	428a      	cmp	r2, r1
 8000cfc:	4615      	mov	r5, r2
 8000cfe:	d967      	bls.n	8000dd0 <__udivmoddi4+0xe4>
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	b14a      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d06:	f1c2 0720 	rsb	r7, r2, #32
 8000d0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d12:	4095      	lsls	r5, r2
 8000d14:	ea47 0803 	orr.w	r8, r7, r3
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1e:	0c23      	lsrs	r3, r4, #16
 8000d20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d24:	fa1f fc85 	uxth.w	ip, r5
 8000d28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d30:	fb07 f10c 	mul.w	r1, r7, ip
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x60>
 8000d38:	18eb      	adds	r3, r5, r3
 8000d3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3e:	f080 811b 	bcs.w	8000f78 <__udivmoddi4+0x28c>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 8118 	bls.w	8000f78 <__udivmoddi4+0x28c>
 8000d48:	3f02      	subs	r7, #2
 8000d4a:	442b      	add	r3, r5
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d60:	45a4      	cmp	ip, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x8c>
 8000d64:	192c      	adds	r4, r5, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x290>
 8000d6e:	45a4      	cmp	ip, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x290>
 8000d74:	3802      	subs	r0, #2
 8000d76:	442c      	add	r4, r5
 8000d78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d7c:	eba4 040c 	sub.w	r4, r4, ip
 8000d80:	2700      	movs	r7, #0
 8000d82:	b11e      	cbz	r6, 8000d8c <__udivmoddi4+0xa0>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xbe>
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	f000 80eb 	beq.w	8000f72 <__udivmoddi4+0x286>
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000da2:	4638      	mov	r0, r7
 8000da4:	4639      	mov	r1, r7
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f783 	clz	r7, r3
 8000dae:	2f00      	cmp	r7, #0
 8000db0:	d147      	bne.n	8000e42 <__udivmoddi4+0x156>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd0>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80fa 	bhi.w	8000fb0 <__udivmoddi4+0x2c4>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	4698      	mov	r8, r3
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa0>
 8000dca:	e9c6 4800 	strd	r4, r8, [r6]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa0>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xe8>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 808f 	bne.w	8000efc <__udivmoddi4+0x210>
 8000dde:	1b49      	subs	r1, r1, r5
 8000de0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de4:	fa1f f885 	uxth.w	r8, r5
 8000de8:	2701      	movs	r7, #1
 8000dea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dee:	0c23      	lsrs	r3, r4, #16
 8000df0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df8:	fb08 f10c 	mul.w	r1, r8, ip
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x124>
 8000e00:	18eb      	adds	r3, r5, r3
 8000e02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x122>
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	f200 80cd 	bhi.w	8000fa8 <__udivmoddi4+0x2bc>
 8000e0e:	4684      	mov	ip, r0
 8000e10:	1a59      	subs	r1, r3, r1
 8000e12:	b2a3      	uxth	r3, r4
 8000e14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e20:	fb08 f800 	mul.w	r8, r8, r0
 8000e24:	45a0      	cmp	r8, r4
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0x14c>
 8000e28:	192c      	adds	r4, r5, r4
 8000e2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0x14a>
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	f200 80b6 	bhi.w	8000fa2 <__udivmoddi4+0x2b6>
 8000e36:	4618      	mov	r0, r3
 8000e38:	eba4 0408 	sub.w	r4, r4, r8
 8000e3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e40:	e79f      	b.n	8000d82 <__udivmoddi4+0x96>
 8000e42:	f1c7 0c20 	rsb	ip, r7, #32
 8000e46:	40bb      	lsls	r3, r7
 8000e48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e50:	fa01 f407 	lsl.w	r4, r1, r7
 8000e54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e60:	4325      	orrs	r5, r4
 8000e62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e66:	0c2c      	lsrs	r4, r5, #16
 8000e68:	fb08 3319 	mls	r3, r8, r9, r3
 8000e6c:	fa1f fa8e 	uxth.w	sl, lr
 8000e70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e74:	fb09 f40a 	mul.w	r4, r9, sl
 8000e78:	429c      	cmp	r4, r3
 8000e7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e82:	d90b      	bls.n	8000e9c <__udivmoddi4+0x1b0>
 8000e84:	eb1e 0303 	adds.w	r3, lr, r3
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	f080 8087 	bcs.w	8000f9e <__udivmoddi4+0x2b2>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f240 8084 	bls.w	8000f9e <__udivmoddi4+0x2b2>
 8000e96:	f1a9 0902 	sub.w	r9, r9, #2
 8000e9a:	4473      	add	r3, lr
 8000e9c:	1b1b      	subs	r3, r3, r4
 8000e9e:	b2ad      	uxth	r5, r5
 8000ea0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eb0:	45a2      	cmp	sl, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1da>
 8000eb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ebc:	d26b      	bcs.n	8000f96 <__udivmoddi4+0x2aa>
 8000ebe:	45a2      	cmp	sl, r4
 8000ec0:	d969      	bls.n	8000f96 <__udivmoddi4+0x2aa>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4474      	add	r4, lr
 8000ec6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	eba4 040a 	sub.w	r4, r4, sl
 8000ed2:	454c      	cmp	r4, r9
 8000ed4:	46c2      	mov	sl, r8
 8000ed6:	464b      	mov	r3, r9
 8000ed8:	d354      	bcc.n	8000f84 <__udivmoddi4+0x298>
 8000eda:	d051      	beq.n	8000f80 <__udivmoddi4+0x294>
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d069      	beq.n	8000fb4 <__udivmoddi4+0x2c8>
 8000ee0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eec:	40fd      	lsrs	r5, r7
 8000eee:	40fc      	lsrs	r4, r7
 8000ef0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef8:	2700      	movs	r7, #0
 8000efa:	e747      	b.n	8000d8c <__udivmoddi4+0xa0>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f703 	lsr.w	r7, r0, r3
 8000f04:	4095      	lsls	r5, r2
 8000f06:	fa01 f002 	lsl.w	r0, r1, r2
 8000f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f12:	4338      	orrs	r0, r7
 8000f14:	0c01      	lsrs	r1, r0, #16
 8000f16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f1a:	fa1f f885 	uxth.w	r8, r5
 8000f1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f26:	fb07 f308 	mul.w	r3, r7, r8
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x256>
 8000f32:	1869      	adds	r1, r5, r1
 8000f34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f38:	d22f      	bcs.n	8000f9a <__udivmoddi4+0x2ae>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d92d      	bls.n	8000f9a <__udivmoddi4+0x2ae>
 8000f3e:	3f02      	subs	r7, #2
 8000f40:	4429      	add	r1, r5
 8000f42:	1acb      	subs	r3, r1, r3
 8000f44:	b281      	uxth	r1, r0
 8000f46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb00 f308 	mul.w	r3, r0, r8
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d907      	bls.n	8000f6a <__udivmoddi4+0x27e>
 8000f5a:	1869      	adds	r1, r5, r1
 8000f5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f60:	d217      	bcs.n	8000f92 <__udivmoddi4+0x2a6>
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d915      	bls.n	8000f92 <__udivmoddi4+0x2a6>
 8000f66:	3802      	subs	r0, #2
 8000f68:	4429      	add	r1, r5
 8000f6a:	1ac9      	subs	r1, r1, r3
 8000f6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f70:	e73b      	b.n	8000dea <__udivmoddi4+0xfe>
 8000f72:	4637      	mov	r7, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e709      	b.n	8000d8c <__udivmoddi4+0xa0>
 8000f78:	4607      	mov	r7, r0
 8000f7a:	e6e7      	b.n	8000d4c <__udivmoddi4+0x60>
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x8c>
 8000f80:	4541      	cmp	r1, r8
 8000f82:	d2ab      	bcs.n	8000edc <__udivmoddi4+0x1f0>
 8000f84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f88:	eb69 020e 	sbc.w	r2, r9, lr
 8000f8c:	3801      	subs	r0, #1
 8000f8e:	4613      	mov	r3, r2
 8000f90:	e7a4      	b.n	8000edc <__udivmoddi4+0x1f0>
 8000f92:	4660      	mov	r0, ip
 8000f94:	e7e9      	b.n	8000f6a <__udivmoddi4+0x27e>
 8000f96:	4618      	mov	r0, r3
 8000f98:	e795      	b.n	8000ec6 <__udivmoddi4+0x1da>
 8000f9a:	4667      	mov	r7, ip
 8000f9c:	e7d1      	b.n	8000f42 <__udivmoddi4+0x256>
 8000f9e:	4681      	mov	r9, r0
 8000fa0:	e77c      	b.n	8000e9c <__udivmoddi4+0x1b0>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	442c      	add	r4, r5
 8000fa6:	e747      	b.n	8000e38 <__udivmoddi4+0x14c>
 8000fa8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fac:	442b      	add	r3, r5
 8000fae:	e72f      	b.n	8000e10 <__udivmoddi4+0x124>
 8000fb0:	4638      	mov	r0, r7
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xda>
 8000fb4:	4637      	mov	r7, r6
 8000fb6:	e6e9      	b.n	8000d8c <__udivmoddi4+0xa0>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fc4:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <SCB_EnableICache+0x3c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <SCB_EnableICache+0x3c>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <SCB_EnableICache+0x3c>)
 8000fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <SCB_EnableDCache+0x7c>)
 8001004:	2200      	movs	r2, #0
 8001006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800100a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <SCB_EnableDCache+0x7c>)
 8001010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001014:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0b5b      	lsrs	r3, r3, #13
 800101a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800101e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	08db      	lsrs	r3, r3, #3
 8001024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001028:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	015a      	lsls	r2, r3, #5
 800102e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001032:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001038:	490f      	ldr	r1, [pc, #60]	; (8001078 <SCB_EnableDCache+0x7c>)
 800103a:	4313      	orrs	r3, r2
 800103c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1e5a      	subs	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1ef      	bne.n	800102a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	60fa      	str	r2, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e5      	bne.n	8001020 <SCB_EnableDCache+0x24>
 8001054:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <SCB_EnableDCache+0x7c>)
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <SCB_EnableDCache+0x7c>)
 800105e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001062:	6153      	str	r3, [r2, #20]
 8001064:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001068:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001080:	f7ff ff9c 	bl	8000fbc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001084:	f7ff ffba 	bl	8000ffc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f001 f935 	bl	80022f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 f84c 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f000 f9b8 	bl	8001404 <MX_GPIO_Init>
  MX_DMA_Init();
 8001094:	f000 f998 	bl	80013c8 <MX_DMA_Init>
  MX_ADC3_Init();
 8001098:	f000 f8b2 	bl	8001200 <MX_ADC3_Init>
  MX_CRC_Init();
 800109c:	f000 f902 	bl	80012a4 <MX_CRC_Init>
  MX_TIM2_Init();
 80010a0:	f000 f922 	bl	80012e8 <MX_TIM2_Init>
  MX_X_CUBE_AI_Init();
 80010a4:	f004 f8aa 	bl	80051fc <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  Preprocessing_Init();
 80010a8:	f000 fec0 	bl	8001e2c <Preprocessing_Init>
  SpectrColIndex = 0;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <main+0x88>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc3, (uint32_t *)ADC_buffer, ADC_BUF_LEN);
 80010b2:	f44f 4284 	mov.w	r2, #16896	; 0x4200
 80010b6:	4914      	ldr	r1, [pc, #80]	; (8001108 <main+0x8c>)
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <main+0x90>)
 80010ba:	f001 f9df 	bl	800247c <HAL_ADC_Start_DMA>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 80010be:	2100      	movs	r1, #0
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <main+0x94>)
 80010c2:	f003 f9ed 	bl	80044a0 <HAL_TIM_IC_Start_IT>
  HAL_Delay(1000);
 80010c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ca:	f001 f971 	bl	80023b0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ind=hdma_adc3.Instance->NDTR;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <main+0x98>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a10      	ldr	r2, [pc, #64]	; (8001118 <main+0x9c>)
 80010d6:	6013      	str	r3, [r2, #0]
	  write=ADC_BUF_LEN-ind;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <main+0x9c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f5c3 4384 	rsb	r3, r3, #16896	; 0x4200
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <main+0xa0>)
 80010e2:	6013      	str	r3, [r2, #0]
	  Sort_ADC_buffer();
 80010e4:	f000 fa4c 	bl	8001580 <Sort_ADC_buffer>
	  Mel_array();
 80010e8:	f000 fa8a 	bl	8001600 <Mel_array>
	  PowerTodB(aSpectrogram);
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <main+0xa4>)
 80010ee:	f000 fd71 	bl	8001bd4 <PowerTodB>
	  ai_run(aSpectrogram, data_out);
 80010f2:	490c      	ldr	r1, [pc, #48]	; (8001124 <main+0xa8>)
 80010f4:	480a      	ldr	r0, [pc, #40]	; (8001120 <main+0xa4>)
 80010f6:	f004 f84d 	bl	8005194 <ai_run>
	  Find_max_output_ind();
 80010fa:	f000 faf1 	bl	80016e0 <Find_max_output_ind>
	  Wakeup();
 80010fe:	f000 fb57 	bl	80017b0 <Wakeup>
  {
 8001102:	e7e4      	b.n	80010ce <main+0x52>
 8001104:	20001ec8 	.word	0x20001ec8
 8001108:	20018f5c 	.word	0x20018f5c
 800110c:	2000fa9c 	.word	0x2000fa9c
 8001110:	20018f1c 	.word	0x20018f1c
 8001114:	2000fa3c 	.word	0x2000fa3c
 8001118:	20001f38 	.word	0x20001f38
 800111c:	20001f3c 	.word	0x20001f3c
 8001120:	20000f50 	.word	0x20000f50
 8001124:	20017ee8 	.word	0x20017ee8

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f008 fe73 	bl	8009e22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <SystemClock_Config+0xd0>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <SystemClock_Config+0xd0>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <SystemClock_Config+0xd0>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <SystemClock_Config+0xd4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a24      	ldr	r2, [pc, #144]	; (80011fc <SystemClock_Config+0xd4>)
 800116a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <SystemClock_Config+0xd4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800117c:	2302      	movs	r3, #2
 800117e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001180:	2301      	movs	r3, #1
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001184:	2310      	movs	r3, #16
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001188:	2302      	movs	r3, #2
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800118c:	2300      	movs	r3, #0
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001190:	2308      	movs	r3, #8
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001194:	23c8      	movs	r3, #200	; 0xc8
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800119c:	2302      	movs	r3, #2
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 fcd9 	bl	8003b5c <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011b0:	f000 fe82 	bl	8001eb8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011b4:	f002 fc82 	bl	8003abc <HAL_PWREx_EnableOverDrive>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011be:	f000 fe7b 	bl	8001eb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c6:	2302      	movs	r3, #2
 80011c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80011d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	2106      	movs	r1, #6
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 ff5f 	bl	80040a4 <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011ec:	f000 fe64 	bl	8001eb8 <Error_Handler>
  }
}
 80011f0:	bf00      	nop
 80011f2:	3750      	adds	r7, #80	; 0x50
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <MX_ADC3_Init+0x98>)
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <MX_ADC3_Init+0x9c>)
 8001216:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_ADC3_Init+0x98>)
 800121a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800121e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_ADC3_Init+0x98>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_ADC3_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_ADC3_Init+0x98>)
 800122e:	2201      	movs	r2, #1
 8001230:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_ADC3_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_ADC3_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_ADC3_Init+0x98>)
 8001242:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <MX_ADC3_Init+0xa0>)
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_ADC3_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_ADC3_Init+0x98>)
 800124e:	2201      	movs	r2, #1
 8001250:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_ADC3_Init+0x98>)
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_ADC3_Init+0x98>)
 800125c:	2201      	movs	r2, #1
 800125e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <MX_ADC3_Init+0x98>)
 8001262:	f001 f8c7 	bl	80023f4 <HAL_ADC_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800126c:	f000 fe24 	bl	8001eb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001270:	2308      	movs	r3, #8
 8001272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001274:	2301      	movs	r3, #1
 8001276:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001278:	2307      	movs	r3, #7
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_ADC3_Init+0x98>)
 8001282:	f001 fa07 	bl	8002694 <HAL_ADC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800128c:	f000 fe14 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000fa9c 	.word	0x2000fa9c
 800129c:	40012200 	.word	0x40012200
 80012a0:	0f000001 	.word	0x0f000001

080012a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <MX_CRC_Init+0x3c>)
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <MX_CRC_Init+0x40>)
 80012ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_CRC_Init+0x3c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_CRC_Init+0x3c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_CRC_Init+0x3c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_CRC_Init+0x3c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_CRC_Init+0x3c>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_CRC_Init+0x3c>)
 80012ce:	f001 fdb9 	bl	8002e44 <HAL_CRC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012d8:	f000 fdee 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000fa14 	.word	0x2000fa14
 80012e4:	40023000 	.word	0x40023000

080012e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <MX_TIM2_Init+0xdc>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <MX_TIM2_Init+0xdc>)
 800131e:	2264      	movs	r2, #100	; 0x64
 8001320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <MX_TIM2_Init+0xdc>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_TIM2_Init+0xdc>)
 800132a:	f04f 32ff 	mov.w	r2, #4294967295
 800132e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <MX_TIM2_Init+0xdc>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_TIM2_Init+0xdc>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133c:	4821      	ldr	r0, [pc, #132]	; (80013c4 <MX_TIM2_Init+0xdc>)
 800133e:	f003 f84f 	bl	80043e0 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001348:	f000 fdb6 	bl	8001eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4619      	mov	r1, r3
 8001358:	481a      	ldr	r0, [pc, #104]	; (80013c4 <MX_TIM2_Init+0xdc>)
 800135a:	f003 f9ab 	bl	80046b4 <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001364:	f000 fda8 	bl	8001eb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001368:	4816      	ldr	r0, [pc, #88]	; (80013c4 <MX_TIM2_Init+0xdc>)
 800136a:	f003 f864 	bl	8004436 <HAL_TIM_IC_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001374:	f000 fda0 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <MX_TIM2_Init+0xdc>)
 8001388:	f003 fcd8 	bl	8004d3c <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001392:	f000 fd91 	bl	8001eb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001396:	230a      	movs	r3, #10
 8001398:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800139a:	2301      	movs	r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80013a2:	230f      	movs	r3, #15
 80013a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_TIM2_Init+0xdc>)
 80013ae:	f003 f8e5 	bl	800457c <HAL_TIM_IC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80013b8:	f000 fd7e 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	; 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20018f1c 	.word	0x20018f1c

080013c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_DMA_Init+0x38>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <MX_DMA_Init+0x38>)
 80013d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_DMA_Init+0x38>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2038      	movs	r0, #56	; 0x38
 80013ec:	f001 fcf3 	bl	8002dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013f0:	2038      	movs	r0, #56	; 0x38
 80013f2:	f001 fd0c 	bl	8002e0e <HAL_NVIC_EnableIRQ>

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b53      	ldr	r3, [pc, #332]	; (8001568 <MX_GPIO_Init+0x164>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a52      	ldr	r2, [pc, #328]	; (8001568 <MX_GPIO_Init+0x164>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b50      	ldr	r3, [pc, #320]	; (8001568 <MX_GPIO_Init+0x164>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <MX_GPIO_Init+0x164>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <MX_GPIO_Init+0x164>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <MX_GPIO_Init+0x164>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <MX_GPIO_Init+0x164>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a46      	ldr	r2, [pc, #280]	; (8001568 <MX_GPIO_Init+0x164>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <MX_GPIO_Init+0x164>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <MX_GPIO_Init+0x164>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a40      	ldr	r2, [pc, #256]	; (8001568 <MX_GPIO_Init+0x164>)
 8001468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <MX_GPIO_Init+0x164>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800147a:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <MX_GPIO_Init+0x164>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a3a      	ldr	r2, [pc, #232]	; (8001568 <MX_GPIO_Init+0x164>)
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <MX_GPIO_Init+0x164>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <MX_GPIO_Init+0x164>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a34      	ldr	r2, [pc, #208]	; (8001568 <MX_GPIO_Init+0x164>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b32      	ldr	r3, [pc, #200]	; (8001568 <MX_GPIO_Init+0x164>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|COI_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f244 0110 	movw	r1, #16400	; 0x4010
 80014b0:	482e      	ldr	r0, [pc, #184]	; (800156c <MX_GPIO_Init+0x168>)
 80014b2:	f002 fae9 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, IR_LED_Pin|LED_USER_Pin|LED4_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2107      	movs	r1, #7
 80014ba:	482d      	ldr	r0, [pc, #180]	; (8001570 <MX_GPIO_Init+0x16c>)
 80014bc:	f002 fae4 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED1_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	21c0      	movs	r1, #192	; 0xc0
 80014c4:	482b      	ldr	r0, [pc, #172]	; (8001574 <MX_GPIO_Init+0x170>)
 80014c6:	f002 fadf 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	482a      	ldr	r0, [pc, #168]	; (8001578 <MX_GPIO_Init+0x174>)
 80014d0:	f002 fada 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin COI_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|COI_Pin;
 80014d4:	f244 0310 	movw	r3, #16400	; 0x4010
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	481f      	ldr	r0, [pc, #124]	; (800156c <MX_GPIO_Init+0x168>)
 80014ee:	f002 f909 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_LED_Pin LED_USER_Pin LED4_Pin */
  GPIO_InitStruct.Pin = IR_LED_Pin|LED_USER_Pin|LED4_Pin;
 80014f2:	2307      	movs	r3, #7
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	4819      	ldr	r0, [pc, #100]	; (8001570 <MX_GPIO_Init+0x16c>)
 800150a:	f002 f8fb 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin;
 800150e:	23c0      	movs	r3, #192	; 0xc0
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <MX_GPIO_Init+0x170>)
 8001526:	f002 f8ed 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800152a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <MX_GPIO_Init+0x178>)
 8001540:	f002 f8e0 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001544:	2340      	movs	r3, #64	; 0x40
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800154c:	2302      	movs	r3, #2
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_GPIO_Init+0x174>)
 800155c:	f002 f8d2 	bl	8003704 <HAL_GPIO_Init>

}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40020400 	.word	0x40020400
 8001570:	40022000 	.word	0x40022000
 8001574:	40021800 	.word	0x40021800
 8001578:	40021c00 	.word	0x40021c00
 800157c:	40021400 	.word	0x40021400

08001580 <Sort_ADC_buffer>:

/* USER CODE BEGIN 4 */
//-----Sắp xếp lại dữ liệu----//
void Sort_ADC_buffer()
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
	for(int i=0;i<ind;i++)
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	e00d      	b.n	80015a8 <Sort_ADC_buffer+0x28>
		   ADC_buffer_sort[i]=ADC_buffer[i+write];
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <Sort_ADC_buffer+0x6c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <Sort_ADC_buffer+0x70>)
 8001596:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800159a:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <Sort_ADC_buffer+0x74>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<ind;i++)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3301      	adds	r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <Sort_ADC_buffer+0x78>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d3ec      	bcc.n	800158c <Sort_ADC_buffer+0xc>
	for(int i=0;i<write;i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	e00d      	b.n	80015d4 <Sort_ADC_buffer+0x54>
		   ADC_buffer_sort[i+ind]=ADC_buffer[i];
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <Sort_ADC_buffer+0x78>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	490b      	ldr	r1, [pc, #44]	; (80015f0 <Sort_ADC_buffer+0x70>)
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <Sort_ADC_buffer+0x74>)
 80015ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<write;i++)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <Sort_ADC_buffer+0x6c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3ec      	bcc.n	80015b8 <Sort_ADC_buffer+0x38>
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20001f3c 	.word	0x20001f3c
 80015f0:	20018f5c 	.word	0x20018f5c
 80015f4:	2000fae4 	.word	0x2000fae4
 80015f8:	20001f38 	.word	0x20001f38
 80015fc:	00000000 	.word	0x00000000

08001600 <Mel_array>:

//-----------Mảng MelSpectrogram 30x32-----//
void Mel_array()
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
	for (ColIndex=0; ColIndex<SPECTROGRAM_COLS; ColIndex++)
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <Mel_array+0xc8>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e04f      	b.n	80016ae <Mel_array+0xae>
	{
		for(int i=0; i<1024; i++)
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	e027      	b.n	8001664 <Mel_array+0x64>
		  	pBuffer[i]=(ADC_buffer_sort[ColIndex*HOPLENGTH+i]-2047.0)/2047.0;
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <Mel_array+0xc8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	025a      	lsls	r2, r3, #9
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a2b      	ldr	r2, [pc, #172]	; (80016cc <Mel_array+0xcc>)
 8001620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe fff5 	bl	8000614 <__aeabi_i2d>
 800162a:	a325      	add	r3, pc, #148	; (adr r3, 80016c0 <Mel_array+0xc0>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7fe fea2 	bl	8000378 <__aeabi_dsub>
 8001634:	4603      	mov	r3, r0
 8001636:	460c      	mov	r4, r1
 8001638:	4618      	mov	r0, r3
 800163a:	4621      	mov	r1, r4
 800163c:	a320      	add	r3, pc, #128	; (adr r3, 80016c0 <Mel_array+0xc0>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7ff f97b 	bl	800093c <__aeabi_ddiv>
 8001646:	4603      	mov	r3, r0
 8001648:	460c      	mov	r4, r1
 800164a:	4618      	mov	r0, r3
 800164c:	4621      	mov	r1, r4
 800164e:	f7ff fae5 	bl	8000c1c <__aeabi_d2f>
 8001652:	4601      	mov	r1, r0
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <Mel_array+0xd0>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	6019      	str	r1, [r3, #0]
		for(int i=0; i<1024; i++)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3301      	adds	r3, #1
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166a:	dbd3      	blt.n	8001614 <Mel_array+0x14>
		MelSpectrogramColumn(&S_MelSpectr, pBuffer, aColBuffer);
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <Mel_array+0xd4>)
 800166e:	4918      	ldr	r1, [pc, #96]	; (80016d0 <Mel_array+0xd0>)
 8001670:	4819      	ldr	r0, [pc, #100]	; (80016d8 <Mel_array+0xd8>)
 8001672:	f003 fc78 	bl	8004f66 <MelSpectrogramColumn>
		for (uint32_t j = 0; j < NMELS; j++)
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	e010      	b.n	800169e <Mel_array+0x9e>
		{
		  	aSpectrogram[j * SPECTROGRAM_COLS + ColIndex] = aColBuffer[j];
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	015a      	lsls	r2, r3, #5
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <Mel_array+0xc8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4413      	add	r3, r2
 8001686:	4913      	ldr	r1, [pc, #76]	; (80016d4 <Mel_array+0xd4>)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	440a      	add	r2, r1
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	4912      	ldr	r1, [pc, #72]	; (80016dc <Mel_array+0xdc>)
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	601a      	str	r2, [r3, #0]
		for (uint32_t j = 0; j < NMELS; j++)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b1d      	cmp	r3, #29
 80016a2:	d9eb      	bls.n	800167c <Mel_array+0x7c>
	for (ColIndex=0; ColIndex<SPECTROGRAM_COLS; ColIndex++)
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <Mel_array+0xc8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <Mel_array+0xc8>)
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <Mel_array+0xc8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b1f      	cmp	r3, #31
 80016b4:	d9ab      	bls.n	800160e <Mel_array+0xe>
		}
	}
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	00000000 	.word	0x00000000
 80016c4:	409ffc00 	.word	0x409ffc00
 80016c8:	20001f40 	.word	0x20001f40
 80016cc:	2000fae4 	.word	0x2000fae4
 80016d0:	2002135c 	.word	0x2002135c
 80016d4:	20001e50 	.word	0x20001e50
 80016d8:	20001f30 	.word	0x20001f30
 80016dc:	20000f50 	.word	0x20000f50

080016e0 <Find_max_output_ind>:

//-----Tìm vị trí và giá trị lớn nhất của output---//
void Find_max_output_ind()
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
	confirm2=max_output_ind;
 80016e6:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <Find_max_output_ind+0xb8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a2c      	ldr	r2, [pc, #176]	; (800179c <Find_max_output_ind+0xbc>)
 80016ec:	6013      	str	r3, [r2, #0]
	max_output_ind=0;
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <Find_max_output_ind+0xb8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
	max_output=data_out[0];
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <Find_max_output_ind+0xc0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <Find_max_output_ind+0xc4>)
 80016fa:	6013      	str	r3, [r2, #0]
	for (int i=1; i<n_label;i++)
 80016fc:	2301      	movs	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	e01a      	b.n	8001738 <Find_max_output_ind+0x58>
	{
		if(data_out[i]>max_output)
 8001702:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <Find_max_output_ind+0xc0>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	ed93 7a00 	vldr	s14, [r3]
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <Find_max_output_ind+0xc4>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	dd09      	ble.n	8001732 <Find_max_output_ind+0x52>
		{
			max_output=data_out[i];
 800171e:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <Find_max_output_ind+0xc0>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <Find_max_output_ind+0xc4>)
 800172a:	6013      	str	r3, [r2, #0]
			max_output_ind=i;
 800172c:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <Find_max_output_ind+0xb8>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
	for (int i=1; i<n_label;i++)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3301      	adds	r3, #1
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b09      	cmp	r3, #9
 800173c:	dde1      	ble.n	8001702 <Find_max_output_ind+0x22>
//	if ((max_output>0.8)&(max_output_ind==1||max_output_ind==3||max_output_ind==5||max_output_ind==7))
//		{
//			confirm1 = max_output_ind*11111;
//		}
//	else
		if ((max_output>0.9)&(max_output_ind!=0))
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <Find_max_output_ind+0xc4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff78 	bl	8000638 <__aeabi_f2d>
 8001748:	2301      	movs	r3, #1
 800174a:	461c      	mov	r4, r3
 800174c:	a310      	add	r3, pc, #64	; (adr r3, 8001790 <Find_max_output_ind+0xb0>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7ff fa59 	bl	8000c08 <__aeabi_dcmpgt>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <Find_max_output_ind+0x80>
 800175c:	2300      	movs	r3, #0
 800175e:	461c      	mov	r4, r3
 8001760:	b2e2      	uxtb	r2, r4
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <Find_max_output_ind+0xb8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	bf14      	ite	ne
 800176a:	2301      	movne	r3, #1
 800176c:	2300      	moveq	r3, #0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4013      	ands	r3, r2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <Find_max_output_ind+0xa6>
		{
			confirm1 = max_output_ind*111111;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <Find_max_output_ind+0xb8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <Find_max_output_ind+0xc8>)
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <Find_max_output_ind+0xcc>)
 8001784:	6013      	str	r3, [r2, #0]
		}
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop
 8001790:	cccccccd 	.word	0xcccccccd
 8001794:	3feccccc 	.word	0x3feccccc
 8001798:	2000fa10 	.word	0x2000fa10
 800179c:	20017f14 	.word	0x20017f14
 80017a0:	20017ee8 	.word	0x20017ee8
 80017a4:	20017f10 	.word	0x20017f10
 80017a8:	0001b207 	.word	0x0001b207
 80017ac:	20001f50 	.word	0x20001f50

080017b0 <Wakeup>:

void Wakeup()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	//----wakeup bang cam bien dien dung-----//
	if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_SET)
 80017b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b8:	48bf      	ldr	r0, [pc, #764]	; (8001ab8 <Wakeup+0x308>)
 80017ba:	f002 f94d 	bl	8003a58 <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <Wakeup+0x24>
	{
		wake = 9;
 80017c4:	4bbd      	ldr	r3, [pc, #756]	; (8001abc <Wakeup+0x30c>)
 80017c6:	2209      	movs	r2, #9
 80017c8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2102      	movs	r1, #2
 80017ce:	48bc      	ldr	r0, [pc, #752]	; (8001ac0 <Wakeup+0x310>)
 80017d0:	f002 f95a 	bl	8003a88 <HAL_GPIO_WritePin>
	}

	//----wakeup bang keyword "tro ly" ------//
	if((wake == 0)&&(max_output_ind==9)&&(max_output>=0.98))  // nếu trước đó chưa tìm thấy key đánh thức và đột nhiên timf được
 80017d4:	4bb9      	ldr	r3, [pc, #740]	; (8001abc <Wakeup+0x30c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d120      	bne.n	800181e <Wakeup+0x6e>
 80017dc:	4bb9      	ldr	r3, [pc, #740]	; (8001ac4 <Wakeup+0x314>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b09      	cmp	r3, #9
 80017e2:	d11c      	bne.n	800181e <Wakeup+0x6e>
 80017e4:	4bb8      	ldr	r3, [pc, #736]	; (8001ac8 <Wakeup+0x318>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe ff25 	bl	8000638 <__aeabi_f2d>
 80017ee:	a3ae      	add	r3, pc, #696	; (adr r3, 8001aa8 <Wakeup+0x2f8>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7ff f9fe 	bl	8000bf4 <__aeabi_dcmpge>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00f      	beq.n	800181e <Wakeup+0x6e>
		  {
			  wake = 9;  // xét key wake lên 1
 80017fe:	4baf      	ldr	r3, [pc, #700]	; (8001abc <Wakeup+0x30c>)
 8001800:	2209      	movs	r2, #9
 8001802:	601a      	str	r2, [r3, #0]
			  t1 = HAL_GetTick();  // bắt đầu đếm time 5s
 8001804:	f000 fdc8 	bl	8002398 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	4bb0      	ldr	r3, [pc, #704]	; (8001acc <Wakeup+0x31c>)
 800180c:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	2102      	movs	r1, #2
 8001812:	48ab      	ldr	r0, [pc, #684]	; (8001ac0 <Wakeup+0x310>)
 8001814:	f002 f938 	bl	8003a88 <HAL_GPIO_WritePin>
			  HAL_Delay(200);
 8001818:	20c8      	movs	r0, #200	; 0xc8
 800181a:	f000 fdc9 	bl	80023b0 <HAL_Delay>
//			  if (wake == 9)
//			  	  buzzer_beep();
		  }

	//------ Neu dang duoc danh thuc-------//
	if (wake == 9)
 800181e:	4ba7      	ldr	r3, [pc, #668]	; (8001abc <Wakeup+0x30c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b09      	cmp	r3, #9
 8001824:	f040 81c5 	bne.w	8001bb2 <Wakeup+0x402>
		  {
			  Find_max_output_ind();    // tim key action
 8001828:	f7ff ff5a 	bl	80016e0 <Find_max_output_ind>
			  if((max_output_ind!=9)&&(max_output_ind!=0)&&(max_output>0.85))  // tìm xem có key action được phát ra hay không
 800182c:	4ba5      	ldr	r3, [pc, #660]	; (8001ac4 <Wakeup+0x314>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b09      	cmp	r3, #9
 8001832:	f000 819d 	beq.w	8001b70 <Wakeup+0x3c0>
 8001836:	4ba3      	ldr	r3, [pc, #652]	; (8001ac4 <Wakeup+0x314>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8198 	beq.w	8001b70 <Wakeup+0x3c0>
 8001840:	4ba1      	ldr	r3, [pc, #644]	; (8001ac8 <Wakeup+0x318>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fef7 	bl	8000638 <__aeabi_f2d>
 800184a:	a399      	add	r3, pc, #612	; (adr r3, 8001ab0 <Wakeup+0x300>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7ff f9da 	bl	8000c08 <__aeabi_dcmpgt>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 818a 	beq.w	8001b70 <Wakeup+0x3c0>
			  {
				  action = max_output_ind;  // nếu có xét keyaction lên 1 rồi thực hiện action
 800185c:	4b99      	ldr	r3, [pc, #612]	; (8001ac4 <Wakeup+0x314>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b9b      	ldr	r3, [pc, #620]	; (8001ad0 <Wakeup+0x320>)
 8001864:	601a      	str	r2, [r3, #0]
				  switch (action)
 8001866:	4b9a      	ldr	r3, [pc, #616]	; (8001ad0 <Wakeup+0x320>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3b01      	subs	r3, #1
 800186c:	2b07      	cmp	r3, #7
 800186e:	f200 817f 	bhi.w	8001b70 <Wakeup+0x3c0>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <Wakeup+0xc8>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	08001899 	.word	0x08001899
 800187c:	080018e5 	.word	0x080018e5
 8001880:	0800193b 	.word	0x0800193b
 8001884:	08001991 	.word	0x08001991
 8001888:	080019dd 	.word	0x080019dd
 800188c:	08001a29 	.word	0x08001a29
 8001890:	08001a7f 	.word	0x08001a7f
 8001894:	08001b25 	.word	0x08001b25
				  {
				  case 1:
					  if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) == GPIO_PIN_SET)
 8001898:	2140      	movs	r1, #64	; 0x40
 800189a:	488e      	ldr	r0, [pc, #568]	; (8001ad4 <Wakeup+0x324>)
 800189c:	f002 f8dc 	bl	8003a58 <HAL_GPIO_ReadPin>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10c      	bne.n	80018c0 <Wakeup+0x110>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2102      	movs	r1, #2
 80018aa:	4885      	ldr	r0, [pc, #532]	; (8001ac0 <Wakeup+0x310>)
 80018ac:	f002 f8ec 	bl	8003a88 <HAL_GPIO_WritePin>
						  	  HAL_Delay(500);
 80018b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b4:	f000 fd7c 	bl	80023b0 <HAL_Delay>
						   	   wake = 0;
 80018b8:	4b80      	ldr	r3, [pc, #512]	; (8001abc <Wakeup+0x30c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
						   	   break;
 80018be:	e157      	b.n	8001b70 <Wakeup+0x3c0>
						  }
					  else
					  {
						  //buzzer_beep2();
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2140      	movs	r1, #64	; 0x40
 80018c4:	4883      	ldr	r0, [pc, #524]	; (8001ad4 <Wakeup+0x324>)
 80018c6:	f002 f8df 	bl	8003a88 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2102      	movs	r1, #2
 80018ce:	487c      	ldr	r0, [pc, #496]	; (8001ac0 <Wakeup+0x310>)
 80018d0:	f002 f8da 	bl	8003a88 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80018d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d8:	f000 fd6a 	bl	80023b0 <HAL_Delay>
						  wake = 0;
 80018dc:	4b77      	ldr	r3, [pc, #476]	; (8001abc <Wakeup+0x30c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
						  break;
 80018e2:	e145      	b.n	8001b70 <Wakeup+0x3c0>
					  }

				  case 2:
					  if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) == GPIO_PIN_SET)
 80018e4:	2110      	movs	r1, #16
 80018e6:	487c      	ldr	r0, [pc, #496]	; (8001ad8 <Wakeup+0x328>)
 80018e8:	f002 f8b6 	bl	8003a58 <HAL_GPIO_ReadPin>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10c      	bne.n	800190c <Wakeup+0x15c>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2102      	movs	r1, #2
 80018f6:	4872      	ldr	r0, [pc, #456]	; (8001ac0 <Wakeup+0x310>)
 80018f8:	f002 f8c6 	bl	8003a88 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80018fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001900:	f000 fd56 	bl	80023b0 <HAL_Delay>
						  wake = 0;
 8001904:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <Wakeup+0x30c>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
						  break;
 800190a:	e131      	b.n	8001b70 <Wakeup+0x3c0>
						  }
					  else
					  {
						  //buzzer_beep2();
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	2110      	movs	r1, #16
 8001910:	4871      	ldr	r0, [pc, #452]	; (8001ad8 <Wakeup+0x328>)
 8001912:	f002 f8b9 	bl	8003a88 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2102      	movs	r1, #2
 800191a:	4869      	ldr	r0, [pc, #420]	; (8001ac0 <Wakeup+0x310>)
 800191c:	f002 f8b4 	bl	8003a88 <HAL_GPIO_WritePin>
						  sendRaw(dieuhoa,253,38);
 8001920:	2226      	movs	r2, #38	; 0x26
 8001922:	21fd      	movs	r1, #253	; 0xfd
 8001924:	486d      	ldr	r0, [pc, #436]	; (8001adc <Wakeup+0x32c>)
 8001926:	f000 fa51 	bl	8001dcc <sendRaw>
						  HAL_Delay(500);
 800192a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800192e:	f000 fd3f 	bl	80023b0 <HAL_Delay>
						  wake = 0;
 8001932:	4b62      	ldr	r3, [pc, #392]	; (8001abc <Wakeup+0x30c>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
						  break;
 8001938:	e11a      	b.n	8001b70 <Wakeup+0x3c0>
					  }

				  case 3:
					  if (HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin) == GPIO_PIN_SET)
 800193a:	2180      	movs	r1, #128	; 0x80
 800193c:	4865      	ldr	r0, [pc, #404]	; (8001ad4 <Wakeup+0x324>)
 800193e:	f002 f88b 	bl	8003a58 <HAL_GPIO_ReadPin>
 8001942:	4603      	mov	r3, r0
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10c      	bne.n	8001962 <Wakeup+0x1b2>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	2102      	movs	r1, #2
 800194c:	485c      	ldr	r0, [pc, #368]	; (8001ac0 <Wakeup+0x310>)
 800194e:	f002 f89b 	bl	8003a88 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 8001952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001956:	f000 fd2b 	bl	80023b0 <HAL_Delay>
						  wake = 0;
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <Wakeup+0x30c>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
						  break;
 8001960:	e106      	b.n	8001b70 <Wakeup+0x3c0>
						  }
					  else
					 	  {
						  	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	485b      	ldr	r0, [pc, #364]	; (8001ad4 <Wakeup+0x324>)
 8001968:	f002 f88e 	bl	8003a88 <HAL_GPIO_WritePin>
						  	  sendRaw(maychieu,67,38);
 800196c:	2226      	movs	r2, #38	; 0x26
 800196e:	2143      	movs	r1, #67	; 0x43
 8001970:	485b      	ldr	r0, [pc, #364]	; (8001ae0 <Wakeup+0x330>)
 8001972:	f000 fa2b 	bl	8001dcc <sendRaw>
							//  buzzer_beep2();
						  	HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2102      	movs	r1, #2
 800197a:	4851      	ldr	r0, [pc, #324]	; (8001ac0 <Wakeup+0x310>)
 800197c:	f002 f884 	bl	8003a88 <HAL_GPIO_WritePin>
							  HAL_Delay(500);
 8001980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001984:	f000 fd14 	bl	80023b0 <HAL_Delay>
							  wake = 0;
 8001988:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <Wakeup+0x30c>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
							  break;
 800198e:	e0ef      	b.n	8001b70 <Wakeup+0x3c0>
					 	  }

				  case 4:
					  if (HAL_GPIO_ReadPin(LED4_GPIO_Port, LED4_Pin) == GPIO_PIN_SET)
 8001990:	2101      	movs	r1, #1
 8001992:	484b      	ldr	r0, [pc, #300]	; (8001ac0 <Wakeup+0x310>)
 8001994:	f002 f860 	bl	8003a58 <HAL_GPIO_ReadPin>
 8001998:	4603      	mov	r3, r0
 800199a:	2b01      	cmp	r3, #1
 800199c:	d10c      	bne.n	80019b8 <Wakeup+0x208>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2102      	movs	r1, #2
 80019a2:	4847      	ldr	r0, [pc, #284]	; (8001ac0 <Wakeup+0x310>)
 80019a4:	f002 f870 	bl	8003a88 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80019a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ac:	f000 fd00 	bl	80023b0 <HAL_Delay>
						  wake = 0;
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <Wakeup+0x30c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
						  break;
 80019b6:	e0db      	b.n	8001b70 <Wakeup+0x3c0>
						  }
					  else
					  	{
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2101      	movs	r1, #1
 80019bc:	4840      	ldr	r0, [pc, #256]	; (8001ac0 <Wakeup+0x310>)
 80019be:	f002 f863 	bl	8003a88 <HAL_GPIO_WritePin>
						  //buzzer_beep2();
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2102      	movs	r1, #2
 80019c6:	483e      	ldr	r0, [pc, #248]	; (8001ac0 <Wakeup+0x310>)
 80019c8:	f002 f85e 	bl	8003a88 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80019cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019d0:	f000 fcee 	bl	80023b0 <HAL_Delay>
						  wake = 0;
 80019d4:	4b39      	ldr	r3, [pc, #228]	; (8001abc <Wakeup+0x30c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
						  break;
 80019da:	e0c9      	b.n	8001b70 <Wakeup+0x3c0>
					  	}
				  case 5:
					  if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) == GPIO_PIN_RESET)
 80019dc:	2140      	movs	r1, #64	; 0x40
 80019de:	483d      	ldr	r0, [pc, #244]	; (8001ad4 <Wakeup+0x324>)
 80019e0:	f002 f83a 	bl	8003a58 <HAL_GPIO_ReadPin>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <Wakeup+0x254>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2102      	movs	r1, #2
 80019ee:	4834      	ldr	r0, [pc, #208]	; (8001ac0 <Wakeup+0x310>)
 80019f0:	f002 f84a 	bl	8003a88 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80019f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019f8:	f000 fcda 	bl	80023b0 <HAL_Delay>
						  wake = 0;
 80019fc:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <Wakeup+0x30c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
						  break;
 8001a02:	e0b5      	b.n	8001b70 <Wakeup+0x3c0>
						  }
					  else
						  {
						  	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2140      	movs	r1, #64	; 0x40
 8001a08:	4832      	ldr	r0, [pc, #200]	; (8001ad4 <Wakeup+0x324>)
 8001a0a:	f002 f83d 	bl	8003a88 <HAL_GPIO_WritePin>
							  //buzzer_beep2();
						  	HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2102      	movs	r1, #2
 8001a12:	482b      	ldr	r0, [pc, #172]	; (8001ac0 <Wakeup+0x310>)
 8001a14:	f002 f838 	bl	8003a88 <HAL_GPIO_WritePin>
							  HAL_Delay(500);
 8001a18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a1c:	f000 fcc8 	bl	80023b0 <HAL_Delay>
							  wake = 0;
 8001a20:	4b26      	ldr	r3, [pc, #152]	; (8001abc <Wakeup+0x30c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
							  break;
 8001a26:	e0a3      	b.n	8001b70 <Wakeup+0x3c0>
						  }

				  case 6:
					  if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) == GPIO_PIN_RESET)
 8001a28:	2110      	movs	r1, #16
 8001a2a:	482b      	ldr	r0, [pc, #172]	; (8001ad8 <Wakeup+0x328>)
 8001a2c:	f002 f814 	bl	8003a58 <HAL_GPIO_ReadPin>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10c      	bne.n	8001a50 <Wakeup+0x2a0>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4821      	ldr	r0, [pc, #132]	; (8001ac0 <Wakeup+0x310>)
 8001a3c:	f002 f824 	bl	8003a88 <HAL_GPIO_WritePin>

						  HAL_Delay(500);
 8001a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a44:	f000 fcb4 	bl	80023b0 <HAL_Delay>
						  wake = 0;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <Wakeup+0x30c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
						  break;
 8001a4e:	e08f      	b.n	8001b70 <Wakeup+0x3c0>
						  }
					  else
					 	 {
						  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2110      	movs	r1, #16
 8001a54:	4820      	ldr	r0, [pc, #128]	; (8001ad8 <Wakeup+0x328>)
 8001a56:	f002 f817 	bl	8003a88 <HAL_GPIO_WritePin>
							  //buzzer_beep2();
						  	HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4818      	ldr	r0, [pc, #96]	; (8001ac0 <Wakeup+0x310>)
 8001a60:	f002 f812 	bl	8003a88 <HAL_GPIO_WritePin>
						    sendRaw(dieuhoa,253,38);
 8001a64:	2226      	movs	r2, #38	; 0x26
 8001a66:	21fd      	movs	r1, #253	; 0xfd
 8001a68:	481c      	ldr	r0, [pc, #112]	; (8001adc <Wakeup+0x32c>)
 8001a6a:	f000 f9af 	bl	8001dcc <sendRaw>
							  HAL_Delay(500);
 8001a6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a72:	f000 fc9d 	bl	80023b0 <HAL_Delay>
							  wake = 0;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <Wakeup+0x30c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
							  break;
 8001a7c:	e078      	b.n	8001b70 <Wakeup+0x3c0>
					 	 }

				  case 7:
					  if (HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin) == GPIO_PIN_RESET)
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <Wakeup+0x324>)
 8001a82:	f001 ffe9 	bl	8003a58 <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d12b      	bne.n	8001ae4 <Wakeup+0x334>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2102      	movs	r1, #2
 8001a90:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <Wakeup+0x310>)
 8001a92:	f001 fff9 	bl	8003a88 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 8001a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a9a:	f000 fc89 	bl	80023b0 <HAL_Delay>
						  wake = 0;
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <Wakeup+0x30c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
						  break;
 8001aa4:	e064      	b.n	8001b70 <Wakeup+0x3c0>
 8001aa6:	bf00      	nop
 8001aa8:	f5c28f5c 	.word	0xf5c28f5c
 8001aac:	3fef5c28 	.word	0x3fef5c28
 8001ab0:	33333333 	.word	0x33333333
 8001ab4:	3feb3333 	.word	0x3feb3333
 8001ab8:	40021400 	.word	0x40021400
 8001abc:	20001f48 	.word	0x20001f48
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	2000fa10 	.word	0x2000fa10
 8001ac8:	20017f10 	.word	0x20017f10
 8001acc:	20001f44 	.word	0x20001f44
 8001ad0:	20001f4c 	.word	0x20001f4c
 8001ad4:	40021800 	.word	0x40021800
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	2000008c 	.word	0x2000008c
 8001ae0:	20000004 	.word	0x20000004
						  }
					  else
						  {
						  	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	4833      	ldr	r0, [pc, #204]	; (8001bb8 <Wakeup+0x408>)
 8001aea:	f001 ffcd 	bl	8003a88 <HAL_GPIO_WritePin>
						  	  sendRaw(maychieu,67,38);
 8001aee:	2226      	movs	r2, #38	; 0x26
 8001af0:	2143      	movs	r1, #67	; 0x43
 8001af2:	4832      	ldr	r0, [pc, #200]	; (8001bbc <Wakeup+0x40c>)
 8001af4:	f000 f96a 	bl	8001dcc <sendRaw>
						  	  HAL_Delay(1000);
 8001af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001afc:	f000 fc58 	bl	80023b0 <HAL_Delay>
						  	  sendRaw(maychieu,67,38);
 8001b00:	2226      	movs	r2, #38	; 0x26
 8001b02:	2143      	movs	r1, #67	; 0x43
 8001b04:	482d      	ldr	r0, [pc, #180]	; (8001bbc <Wakeup+0x40c>)
 8001b06:	f000 f961 	bl	8001dcc <sendRaw>
							  //buzzer_beep2();
							  HAL_Delay(500);
 8001b0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b0e:	f000 fc4f 	bl	80023b0 <HAL_Delay>
							  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2102      	movs	r1, #2
 8001b16:	482a      	ldr	r0, [pc, #168]	; (8001bc0 <Wakeup+0x410>)
 8001b18:	f001 ffb6 	bl	8003a88 <HAL_GPIO_WritePin>
							  wake = 0;
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <Wakeup+0x414>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
							  break;
 8001b22:	e025      	b.n	8001b70 <Wakeup+0x3c0>
						  }

				  case 8:
					  if (HAL_GPIO_ReadPin(LED4_GPIO_Port, LED4_Pin) == GPIO_PIN_RESET)
 8001b24:	2101      	movs	r1, #1
 8001b26:	4826      	ldr	r0, [pc, #152]	; (8001bc0 <Wakeup+0x410>)
 8001b28:	f001 ff96 	bl	8003a58 <HAL_GPIO_ReadPin>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <Wakeup+0x39c>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2102      	movs	r1, #2
 8001b36:	4822      	ldr	r0, [pc, #136]	; (8001bc0 <Wakeup+0x410>)
 8001b38:	f001 ffa6 	bl	8003a88 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 8001b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b40:	f000 fc36 	bl	80023b0 <HAL_Delay>
						  wake = 0;
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <Wakeup+0x414>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
						  break;
 8001b4a:	e011      	b.n	8001b70 <Wakeup+0x3c0>
						  }
					  else
					 	{
						  	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2101      	movs	r1, #1
 8001b50:	481b      	ldr	r0, [pc, #108]	; (8001bc0 <Wakeup+0x410>)
 8001b52:	f001 ff99 	bl	8003a88 <HAL_GPIO_WritePin>
							  //buzzer_beep2();
						  	  wake = 0;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <Wakeup+0x414>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
						  	HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4817      	ldr	r0, [pc, #92]	; (8001bc0 <Wakeup+0x410>)
 8001b62:	f001 ff91 	bl	8003a88 <HAL_GPIO_WritePin>
						  	  HAL_Delay(500);
 8001b66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b6a:	f000 fc21 	bl	80023b0 <HAL_Delay>
							  break;
 8001b6e:	bf00      	nop
					 	}
				  }
			  }
			if ((HAL_GetTick()-t1 > 5000)&&(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_RESET))
 8001b70:	f000 fc12 	bl	8002398 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <Wakeup+0x418>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d913      	bls.n	8001bac <Wakeup+0x3fc>
 8001b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b88:	4810      	ldr	r0, [pc, #64]	; (8001bcc <Wakeup+0x41c>)
 8001b8a:	f001 ff65 	bl	8003a58 <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10b      	bne.n	8001bac <Wakeup+0x3fc>
			{
				HAL_Delay(500);
 8001b94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b98:	f000 fc0a 	bl	80023b0 <HAL_Delay>
				wake = 0;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <Wakeup+0x414>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <Wakeup+0x410>)
 8001ba8:	f001 ff6e 	bl	8003a88 <HAL_GPIO_WritePin>
				//buzzer_beep();
			}
			t = 0;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <Wakeup+0x420>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
		  }
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021800 	.word	0x40021800
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	20001f48 	.word	0x20001f48
 8001bc8:	20001f44 	.word	0x20001f44
 8001bcc:	40021400 	.word	0x40021400
 8001bd0:	2000fa0c 	.word	0x2000fa0c

08001bd4 <PowerTodB>:


//----------Power to dB----------//
static void PowerTodB(float32_t *pSpectrogram)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  float32_t max_mel_energy = 0.0f;
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Find MelEnergy Scaling factor */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	e017      	b.n	8001c18 <PowerTodB+0x44>
    max_mel_energy = (max_mel_energy > pSpectrogram[i]) ? max_mel_energy : pSpectrogram[i];
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	dd01      	ble.n	8001c06 <PowerTodB+0x32>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	e004      	b.n	8001c10 <PowerTodB+0x3c>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	3301      	adds	r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001c1e:	d3e3      	bcc.n	8001be8 <PowerTodB+0x14>
  }

  /* Scale Mel Energies */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	e012      	b.n	8001c4c <PowerTodB+0x78>
    pSpectrogram[i] /= max_mel_energy;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	edd3 6a00 	vldr	s13, [r3]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c42:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001c52:	d3e8      	bcc.n	8001c26 <PowerTodB+0x52>
  }

  /* Convert power spectrogram to decibel */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	e018      	b.n	8001c8c <PowerTodB+0xb8>
    pSpectrogram[i] = 10.0f * log10f(pSpectrogram[i]);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	f009 f8a5 	bl	800adb8 <log10f>
 8001c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c82:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001c92:	d3e2      	bcc.n	8001c5a <PowerTodB+0x86>
  }

  /* Threshold output to -80.0 dB */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	e01b      	b.n	8001cd2 <PowerTodB+0xfe>
    pSpectrogram[i] = (pSpectrogram[i] < -80.0f) ? (-80.0f) : (pSpectrogram[i]);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ce4 <PowerTodB+0x110>
 8001caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb2:	d501      	bpl.n	8001cb8 <PowerTodB+0xe4>
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <PowerTodB+0x114>)
 8001cb6:	e004      	b.n	8001cc2 <PowerTodB+0xee>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	440a      	add	r2, r1
 8001cca:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001cd8:	d3df      	bcc.n	8001c9a <PowerTodB+0xc6>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	c2a00000 	.word	0xc2a00000
 8001ce8:	c2a00000 	.word	0xc2a00000

08001cec <delay_us>:
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
}
//----------------------------IIRR--------------------//
//-----------delay us---------//
void delay_us(uint16_t us)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2,0);
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <delay_us+0x2c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8001cfe:	bf00      	nop
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <delay_us+0x2c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d3f9      	bcc.n	8001d00 <delay_us+0x14>
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	20018f1c 	.word	0x20018f1c

08001d1c <mark>:

//------------Mark Function--------/
void mark(uint16_t time)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
  //uint16_t count=(uint16_t)time/(us/38000);
  //uint16_t count=(uint16_t)((uint32_t)(time*38000))/us;
  uint16_t idx=0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	82fb      	strh	r3, [r7, #22]
  uint32_t a=time*38000;
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	f249 4270 	movw	r2, #38000	; 0x9470
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	613b      	str	r3, [r7, #16]
  uint32_t count=a/us;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <mark+0x74>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	60fb      	str	r3, [r7, #12]
  uint32_t b=us/76000;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <mark+0x74>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <mark+0x78>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	0c1b      	lsrs	r3, r3, #16
 8001d4e:	60bb      	str	r3, [r7, #8]
  while(idx < count)
 8001d50:	e016      	b.n	8001d80 <mark+0x64>
  {
    //led on
    HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin,GPIO_PIN_SET );
 8001d52:	2201      	movs	r2, #1
 8001d54:	2104      	movs	r1, #4
 8001d56:	4810      	ldr	r0, [pc, #64]	; (8001d98 <mark+0x7c>)
 8001d58:	f001 fe96 	bl	8003a88 <HAL_GPIO_WritePin>
    delay_us(b);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ffc3 	bl	8001cec <delay_us>
    HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin,GPIO_PIN_RESET );
 8001d66:	2200      	movs	r2, #0
 8001d68:	2104      	movs	r1, #4
 8001d6a:	480b      	ldr	r0, [pc, #44]	; (8001d98 <mark+0x7c>)
 8001d6c:	f001 fe8c 	bl	8003a88 <HAL_GPIO_WritePin>
    delay_us(b);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ffb9 	bl	8001cec <delay_us>
    idx=idx+1;
 8001d7a:	8afb      	ldrh	r3, [r7, #22]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	82fb      	strh	r3, [r7, #22]
  while(idx < count)
 8001d80:	8afb      	ldrh	r3, [r7, #22]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8e4      	bhi.n	8001d52 <mark+0x36>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000000 	.word	0x20000000
 8001d94:	dcc0ba43 	.word	0xdcc0ba43
 8001d98:	40022000 	.word	0x40022000

08001d9c <space>:


//--------------Space function------------//
void space(uint16_t time)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin,GPIO_PIN_RESET );
 8001da6:	2200      	movs	r2, #0
 8001da8:	2104      	movs	r1, #4
 8001daa:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <space+0x2c>)
 8001dac:	f001 fe6c 	bl	8003a88 <HAL_GPIO_WritePin>
    if(time==0) return;
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <space+0x24>
    delay_us(time);
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff97 	bl	8001cec <delay_us>
 8001dbe:	e000      	b.n	8001dc2 <space+0x26>
    if(time==0) return;
 8001dc0:	bf00      	nop
}
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40022000 	.word	0x40022000

08001dcc <sendRaw>:

//--------Send data------//
void sendRaw(uint16_t buf[], uint8_t len, uint8_t khz)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	70bb      	strb	r3, [r7, #2]
  //enableIROut(khz);

  for(uint16_t i = 0; i < len; i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	81fb      	strh	r3, [r7, #14]
 8001de0:	e018      	b.n	8001e14 <sendRaw+0x48>
  {
    if(i & 1) space(buf[i]);
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <sendRaw+0x32>
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ffd0 	bl	8001d9c <space>
 8001dfc:	e007      	b.n	8001e0e <sendRaw+0x42>
    else mark(buf[i]);
 8001dfe:	89fb      	ldrh	r3, [r7, #14]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff87 	bl	8001d1c <mark>
  for(uint16_t i = 0; i < len; i++)
 8001e0e:	89fb      	ldrh	r3, [r7, #14]
 8001e10:	3301      	adds	r3, #1
 8001e12:	81fb      	strh	r3, [r7, #14]
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	89fa      	ldrh	r2, [r7, #14]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d3e1      	bcc.n	8001de2 <sendRaw+0x16>
  }

  space(0);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff ffbc 	bl	8001d9c <space>
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <Preprocessing_Init>:
  return code;
}

//------Preprocessing Init-------//
static void Preprocessing_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, 1024);
 8001e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e34:	4817      	ldr	r0, [pc, #92]	; (8001e94 <Preprocessing_Init+0x68>)
 8001e36:	f003 fc71 	bl	800571c <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <Preprocessing_Init+0x6c>)
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <Preprocessing_Init+0x68>)
 8001e3e:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <Preprocessing_Init+0x6c>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = (float32_t *) hannWin_1024;
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <Preprocessing_Init+0x6c>)
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <Preprocessing_Init+0x70>)
 8001e4a:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = 16000;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <Preprocessing_Init+0x6c>)
 8001e4e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001e52:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = 1024;
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <Preprocessing_Init+0x6c>)
 8001e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e5a:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = 1024;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <Preprocessing_Init+0x6c>)
 8001e5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e62:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = aWorkingBuffer1;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <Preprocessing_Init+0x6c>)
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <Preprocessing_Init+0x74>)
 8001e68:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = (uint32_t *) melFiltersStartIndices_1024_30;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <Preprocessing_Init+0x78>)
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <Preprocessing_Init+0x7c>)
 8001e6e:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = (uint32_t *) melFiltersStopIndices_1024_30;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <Preprocessing_Init+0x78>)
 8001e72:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <Preprocessing_Init+0x80>)
 8001e74:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = (float32_t *) melFilterLut_1024_30;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <Preprocessing_Init+0x78>)
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <Preprocessing_Init+0x84>)
 8001e7a:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels       = 30;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <Preprocessing_Init+0x78>)
 8001e7e:	221e      	movs	r2, #30
 8001e80:	611a      	str	r2, [r3, #16]

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <Preprocessing_Init+0x88>)
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <Preprocessing_Init+0x6c>)
 8001e86:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <Preprocessing_Init+0x88>)
 8001e8a:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <Preprocessing_Init+0x78>)
 8001e8c:	605a      	str	r2, [r3, #4]
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20001ecc 	.word	0x20001ecc
 8001e98:	20001f14 	.word	0x20001f14
 8001e9c:	0800b5b0 	.word	0x0800b5b0
 8001ea0:	20017f1c 	.word	0x20017f1c
 8001ea4:	20001ee4 	.word	0x20001ee4
 8001ea8:	0800c5b0 	.word	0x0800c5b0
 8001eac:	0800c628 	.word	0x0800c628
 8001eb0:	0800c6a0 	.word	0x0800c6a0
 8001eb4:	20001f30 	.word	0x20001f30

08001eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_MspInit+0x44>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <HAL_MspInit+0x44>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_MspInit+0x44>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_MspInit+0x44>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_MspInit+0x44>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_MspInit+0x44>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2e      	ldr	r2, [pc, #184]	; (8001fe8 <HAL_ADC_MspInit+0xd8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d155      	bne.n	8001fde <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f32:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <HAL_ADC_MspInit+0xdc>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a2d      	ldr	r2, [pc, #180]	; (8001fec <HAL_ADC_MspInit+0xdc>)
 8001f38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_ADC_MspInit+0xdc>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f4a:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_ADC_MspInit+0xdc>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a27      	ldr	r2, [pc, #156]	; (8001fec <HAL_ADC_MspInit+0xdc>)
 8001f50:	f043 0320 	orr.w	r3, r3, #32
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_ADC_MspInit+0xdc>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	481e      	ldr	r0, [pc, #120]	; (8001ff0 <HAL_ADC_MspInit+0xe0>)
 8001f78:	f001 fbc4 	bl	8003704 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001f7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <HAL_ADC_MspInit+0xe8>)
 8001f80:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001f82:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001f84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f88:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f9c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fa4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001fa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fac:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001fc2:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001fc4:	f001 f828 	bl	8003018 <HAL_DMA_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001fce:	f7ff ff73 	bl	8001eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
 8001fd8:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <HAL_ADC_MspInit+0xe4>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001fde:	bf00      	nop
 8001fe0:	3728      	adds	r7, #40	; 0x28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40012200 	.word	0x40012200
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40021400 	.word	0x40021400
 8001ff4:	2000fa3c 	.word	0x2000fa3c
 8001ff8:	40026410 	.word	0x40026410

08001ffc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_CRC_MspInit+0x38>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10b      	bne.n	8002026 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_CRC_MspInit+0x3c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_CRC_MspInit+0x3c>)
 8002014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_CRC_MspInit+0x3c>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023000 	.word	0x40023000
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d128      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_TIM_Base_MspInit+0x7c>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_TIM_Base_MspInit+0x7c>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800208e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020a0:	2301      	movs	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4619      	mov	r1, r3
 80020aa:	4804      	ldr	r0, [pc, #16]	; (80020bc <HAL_TIM_Base_MspInit+0x80>)
 80020ac:	f001 fb2a 	bl	8003704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020000 	.word	0x40020000

080020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler+0x4>

080020da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002114:	f000 f92c 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <DMA2_Stream0_IRQHandler+0x10>)
 8002122:	f001 f887 	bl	8003234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000fa3c 	.word	0x2000fa3c

08002130 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e00a      	b.n	8002158 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002142:	f3af 8000 	nop.w
 8002146:	4601      	mov	r1, r0
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	60ba      	str	r2, [r7, #8]
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbf0      	blt.n	8002142 <_read+0x12>
	}

return len;
 8002160:	687b      	ldr	r3, [r7, #4]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e009      	b.n	8002190 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	60ba      	str	r2, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbf1      	blt.n	800217c <_write+0x12>
	}
	return len;
 8002198:	687b      	ldr	r3, [r7, #4]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_close>:

int _close(int file)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
	return -1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ca:	605a      	str	r2, [r3, #4]
	return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_isatty>:

int _isatty(int file)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
	return 1;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
	return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <_sbrk+0x5c>)
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <_sbrk+0x60>)
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <_sbrk+0x64>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <_sbrk+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800223c:	f007 fdbc 	bl	8009db8 <__errno>
 8002240:	4602      	mov	r2, r0
 8002242:	230c      	movs	r3, #12
 8002244:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e009      	b.n	8002260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <_sbrk+0x64>)
 800225c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20050000 	.word	0x20050000
 800226c:	00000800 	.word	0x00000800
 8002270:	20001f54 	.word	0x20001f54
 8002274:	20022368 	.word	0x20022368

08002278 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <SystemInit+0x28>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <SystemInit+0x28>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SystemInit+0x28>)
 800228e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002292:	609a      	str	r2, [r3, #8]
#endif
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022aa:	e003      	b.n	80022b4 <LoopCopyDataInit>

080022ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022b2:	3104      	adds	r1, #4

080022b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022b4:	480b      	ldr	r0, [pc, #44]	; (80022e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022bc:	d3f6      	bcc.n	80022ac <CopyDataInit>
  ldr  r2, =_sbss
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022c0:	e002      	b.n	80022c8 <LoopFillZerobss>

080022c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022c4:	f842 3b04 	str.w	r3, [r2], #4

080022c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022cc:	d3f9      	bcc.n	80022c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022ce:	f7ff ffd3 	bl	8002278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d2:	f007 fd77 	bl	8009dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d6:	f7fe fed1 	bl	800107c <main>
  bx  lr    
 80022da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022dc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80022e0:	08031224 	.word	0x08031224
  ldr  r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022e8:	20000f34 	.word	0x20000f34
  ldr  r2, =_sbss
 80022ec:	20000f34 	.word	0x20000f34
  ldr  r3, = _ebss
 80022f0:	20022368 	.word	0x20022368

080022f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC_IRQHandler>

080022f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fa:	2003      	movs	r0, #3
 80022fc:	f000 fd60 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002300:	2000      	movs	r0, #0
 8002302:	f000 f805 	bl	8002310 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002306:	f7ff fddf 	bl	8001ec8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fd7b 	bl	8002e2a <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 fd43 	bl	8002dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000288 	.word	0x20000288
 8002368:	20000290 	.word	0x20000290
 800236c:	2000028c 	.word	0x2000028c

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000290 	.word	0x20000290
 8002394:	20022360 	.word	0x20022360

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20022360 	.word	0x20022360

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_Delay+0x40>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000290 	.word	0x20000290

080023f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e031      	b.n	800246e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fd7c 	bl	8001f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_ADC_Init+0x84>)
 8002438:	4013      	ands	r3, r2
 800243a:	f043 0202 	orr.w	r2, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fa70 	bl	8002928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f023 0303 	bic.w	r3, r3, #3
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
 800245e:	e001      	b.n	8002464 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	ffffeefd 	.word	0xffffeefd

0800247c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_ADC_Start_DMA+0x1e>
 8002496:	2302      	movs	r3, #2
 8002498:	e0c7      	b.n	800262a <HAL_ADC_Start_DMA+0x1ae>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d018      	beq.n	80024e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024c0:	4b5c      	ldr	r3, [pc, #368]	; (8002634 <HAL_ADC_Start_DMA+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a5c      	ldr	r2, [pc, #368]	; (8002638 <HAL_ADC_Start_DMA+0x1bc>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	0c9a      	lsrs	r2, r3, #18
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80024d4:	e002      	b.n	80024dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3b01      	subs	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f9      	bne.n	80024d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	f040 809b 	bne.w	8002628 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f6:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_ADC_Start_DMA+0x1c0>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002518:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252c:	d106      	bne.n	800253c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f023 0206 	bic.w	r2, r3, #6
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
 800253a:	e002      	b.n	8002542 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	4a3c      	ldr	r2, [pc, #240]	; (8002640 <HAL_ADC_Start_DMA+0x1c4>)
 8002550:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	4a3b      	ldr	r2, [pc, #236]	; (8002644 <HAL_ADC_Start_DMA+0x1c8>)
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	4a3a      	ldr	r2, [pc, #232]	; (8002648 <HAL_ADC_Start_DMA+0x1cc>)
 8002560:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800256a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800257a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	334c      	adds	r3, #76	; 0x4c
 8002596:	4619      	mov	r1, r3
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f000 fdea 	bl	8003174 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <HAL_ADC_Start_DMA+0x1d0>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10f      	bne.n	80025cc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d136      	bne.n	8002628 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	e02d      	b.n	8002628 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_ADC_Start_DMA+0x1d4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10e      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x178>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025f2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_ADC_Start_DMA+0x1d0>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d113      	bne.n	8002628 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a13      	ldr	r2, [pc, #76]	; (8002654 <HAL_ADC_Start_DMA+0x1d8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10e      	bne.n	8002628 <HAL_ADC_Start_DMA+0x1ac>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002626:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000288 	.word	0x20000288
 8002638:	431bde83 	.word	0x431bde83
 800263c:	fffff8fe 	.word	0xfffff8fe
 8002640:	08002b1d 	.word	0x08002b1d
 8002644:	08002bd7 	.word	0x08002bd7
 8002648:	08002bf3 	.word	0x08002bf3
 800264c:	40012300 	.word	0x40012300
 8002650:	40012000 	.word	0x40012000
 8002654:	40012200 	.word	0x40012200

08002658 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1c>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e12a      	b.n	8002906 <HAL_ADC_ConfigChannel+0x272>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b09      	cmp	r3, #9
 80026be:	d93a      	bls.n	8002736 <HAL_ADC_ConfigChannel+0xa2>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026c8:	d035      	beq.n	8002736 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	3b1e      	subs	r3, #30
 80026e0:	2207      	movs	r2, #7
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	400a      	ands	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a87      	ldr	r2, [pc, #540]	; (8002914 <HAL_ADC_ConfigChannel+0x280>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d10a      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68d9      	ldr	r1, [r3, #12]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	061a      	lsls	r2, r3, #24
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800270e:	e035      	b.n	800277c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68d9      	ldr	r1, [r3, #12]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	4618      	mov	r0, r3
 8002722:	4603      	mov	r3, r0
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4403      	add	r3, r0
 8002728:	3b1e      	subs	r3, #30
 800272a:	409a      	lsls	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002734:	e022      	b.n	800277c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6919      	ldr	r1, [r3, #16]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	2207      	movs	r2, #7
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43da      	mvns	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	400a      	ands	r2, r1
 8002758:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6919      	ldr	r1, [r3, #16]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	4618      	mov	r0, r3
 800276c:	4603      	mov	r3, r0
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4403      	add	r3, r0
 8002772:	409a      	lsls	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b06      	cmp	r3, #6
 8002782:	d824      	bhi.n	80027ce <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	3b05      	subs	r3, #5
 8002796:	221f      	movs	r2, #31
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43da      	mvns	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	400a      	ands	r2, r1
 80027a4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	3b05      	subs	r3, #5
 80027c0:	fa00 f203 	lsl.w	r2, r0, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	635a      	str	r2, [r3, #52]	; 0x34
 80027cc:	e04c      	b.n	8002868 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d824      	bhi.n	8002820 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	3b23      	subs	r3, #35	; 0x23
 80027e8:	221f      	movs	r2, #31
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	400a      	ands	r2, r1
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	4618      	mov	r0, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	3b23      	subs	r3, #35	; 0x23
 8002812:	fa00 f203 	lsl.w	r2, r0, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
 800281e:	e023      	b.n	8002868 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	3b41      	subs	r3, #65	; 0x41
 8002832:	221f      	movs	r2, #31
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43da      	mvns	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	400a      	ands	r2, r1
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3b41      	subs	r3, #65	; 0x41
 800285c:	fa00 f203 	lsl.w	r2, r0, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <HAL_ADC_ConfigChannel+0x284>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10a      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1f4>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800287a:	d105      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_ADC_ConfigChannel+0x288>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_ADC_ConfigChannel+0x288>)
 8002882:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002886:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a22      	ldr	r2, [pc, #136]	; (8002918 <HAL_ADC_ConfigChannel+0x284>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d109      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x212>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b12      	cmp	r3, #18
 8002898:	d105      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <HAL_ADC_ConfigChannel+0x288>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a1f      	ldr	r2, [pc, #124]	; (800291c <HAL_ADC_ConfigChannel+0x288>)
 80028a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <HAL_ADC_ConfigChannel+0x284>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d125      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x268>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a17      	ldr	r2, [pc, #92]	; (8002914 <HAL_ADC_ConfigChannel+0x280>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d003      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x22e>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b11      	cmp	r3, #17
 80028c0:	d11c      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_ADC_ConfigChannel+0x288>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4a15      	ldr	r2, [pc, #84]	; (800291c <HAL_ADC_ConfigChannel+0x288>)
 80028c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028cc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_ADC_ConfigChannel+0x280>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_ADC_ConfigChannel+0x28c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a11      	ldr	r2, [pc, #68]	; (8002924 <HAL_ADC_ConfigChannel+0x290>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9a      	lsrs	r2, r3, #18
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028ee:	e002      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f9      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	10000012 	.word	0x10000012
 8002918:	40012000 	.word	0x40012000
 800291c:	40012300 	.word	0x40012300
 8002920:	20000288 	.word	0x20000288
 8002924:	431bde83 	.word	0x431bde83

08002928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002930:	4b78      	ldr	r3, [pc, #480]	; (8002b14 <ADC_Init+0x1ec>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a77      	ldr	r2, [pc, #476]	; (8002b14 <ADC_Init+0x1ec>)
 8002936:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800293a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800293c:	4b75      	ldr	r3, [pc, #468]	; (8002b14 <ADC_Init+0x1ec>)
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4973      	ldr	r1, [pc, #460]	; (8002b14 <ADC_Init+0x1ec>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	021a      	lsls	r2, r3, #8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800297c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800299e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6899      	ldr	r1, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <ADC_Init+0x1f0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6899      	ldr	r1, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	e00f      	b.n	8002a22 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0202 	bic.w	r2, r2, #2
 8002a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	005a      	lsls	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	035a      	lsls	r2, r3, #13
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	e007      	b.n	8002a98 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	051a      	lsls	r2, r3, #20
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6899      	ldr	r1, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ada:	025a      	lsls	r2, r3, #9
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6899      	ldr	r1, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	029a      	lsls	r2, r3, #10
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40012300 	.word	0x40012300
 8002b18:	0f000001 	.word	0x0f000001

08002b1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d13c      	bne.n	8002bb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d12b      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d127      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d119      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0220 	bic.w	r2, r2, #32
 8002b82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fd55 	bl	8002658 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bae:	e00e      	b.n	8002bce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fd5f 	bl	8002680 <HAL_ADC_ErrorCallback>
}
 8002bc2:	e004      	b.n	8002bce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7ff fd41 	bl	800266c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2240      	movs	r2, #64	; 0x40
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f043 0204 	orr.w	r2, r3, #4
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7ff fd34 	bl	8002680 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <__NVIC_SetPriorityGrouping>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <__NVIC_SetPriorityGrouping+0x40>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <__NVIC_SetPriorityGrouping+0x40>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00
 8002c64:	05fa0000 	.word	0x05fa0000

08002c68 <__NVIC_GetPriorityGrouping>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	; (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_SetPriority>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	db0a      	blt.n	8002cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	490c      	ldr	r1, [pc, #48]	; (8002d0c <__NVIC_SetPriority+0x4c>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ce8:	e00a      	b.n	8002d00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4908      	ldr	r1, [pc, #32]	; (8002d10 <__NVIC_SetPriority+0x50>)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	761a      	strb	r2, [r3, #24]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000e100 	.word	0xe000e100
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <NVIC_EncodePriority>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f1c3 0307 	rsb	r3, r3, #7
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	bf28      	it	cs
 8002d32:	2304      	movcs	r3, #4
 8002d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d902      	bls.n	8002d44 <NVIC_EncodePriority+0x30>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3b03      	subs	r3, #3
 8002d42:	e000      	b.n	8002d46 <NVIC_EncodePriority+0x32>
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	401a      	ands	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43d9      	mvns	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	4313      	orrs	r3, r2
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	; 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8c:	d301      	bcc.n	8002d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00f      	b.n	8002db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <SysTick_Config+0x40>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f7ff ff8e 	bl	8002cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <SysTick_Config+0x40>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <SysTick_Config+0x40>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff29 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de8:	f7ff ff3e 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f7ff ff8e 	bl	8002d14 <NVIC_EncodePriority>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff5d 	bl	8002cc0 <__NVIC_SetPriority>
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff31 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffa2 	bl	8002d7c <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e054      	b.n	8002f00 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7f5b      	ldrb	r3, [r3, #29]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff f8c8 	bl	8001ffc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	791b      	ldrb	r3, [r3, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10c      	bne.n	8002e94 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <HAL_CRC_Init+0xc4>)
 8002e80:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0218 	bic.w	r2, r2, #24
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	e00c      	b.n	8002eae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6899      	ldr	r1, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f834 	bl	8002f0c <HAL_CRCEx_Polynomial_Set>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e028      	b.n	8002f00 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	795b      	ldrb	r3, [r3, #5]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebe:	611a      	str	r2, [r3, #16]
 8002ec0:	e004      	b.n	8002ecc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6912      	ldr	r2, [r2, #16]
 8002eca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	04c11db7 	.word	0x04c11db7

08002f0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002f1c:	231f      	movs	r3, #31
 8002f1e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002f20:	bf00      	nop
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1e5a      	subs	r2, r3, #1
 8002f26:	613a      	str	r2, [r7, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_CRCEx_Polynomial_Set+0x34>
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b18      	cmp	r3, #24
 8002f44:	d846      	bhi.n	8002fd4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002f46:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002fdb 	.word	0x08002fdb
 8002f50:	08002fd5 	.word	0x08002fd5
 8002f54:	08002fd5 	.word	0x08002fd5
 8002f58:	08002fd5 	.word	0x08002fd5
 8002f5c:	08002fd5 	.word	0x08002fd5
 8002f60:	08002fd5 	.word	0x08002fd5
 8002f64:	08002fd5 	.word	0x08002fd5
 8002f68:	08002fd5 	.word	0x08002fd5
 8002f6c:	08002fc9 	.word	0x08002fc9
 8002f70:	08002fd5 	.word	0x08002fd5
 8002f74:	08002fd5 	.word	0x08002fd5
 8002f78:	08002fd5 	.word	0x08002fd5
 8002f7c:	08002fd5 	.word	0x08002fd5
 8002f80:	08002fd5 	.word	0x08002fd5
 8002f84:	08002fd5 	.word	0x08002fd5
 8002f88:	08002fd5 	.word	0x08002fd5
 8002f8c:	08002fbd 	.word	0x08002fbd
 8002f90:	08002fd5 	.word	0x08002fd5
 8002f94:	08002fd5 	.word	0x08002fd5
 8002f98:	08002fd5 	.word	0x08002fd5
 8002f9c:	08002fd5 	.word	0x08002fd5
 8002fa0:	08002fd5 	.word	0x08002fd5
 8002fa4:	08002fd5 	.word	0x08002fd5
 8002fa8:	08002fd5 	.word	0x08002fd5
 8002fac:	08002fb1 	.word	0x08002fb1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d913      	bls.n	8002fde <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fba:	e010      	b.n	8002fde <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b07      	cmp	r3, #7
 8002fc0:	d90f      	bls.n	8002fe2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fc6:	e00c      	b.n	8002fe2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	d90b      	bls.n	8002fe6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fd2:	e008      	b.n	8002fe6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd8:	e006      	b.n	8002fe8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e004      	b.n	8002fe8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e002      	b.n	8002fe8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fe6:	bf00      	nop
  }
  if (status == HAL_OK)
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10d      	bne.n	800300a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f023 0118 	bic.w	r1, r3, #24
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800300a:	7dfb      	ldrb	r3, [r7, #23]
}
 800300c:	4618      	mov	r0, r3
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff f9b8 	bl	8002398 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e099      	b.n	8003168 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003054:	e00f      	b.n	8003076 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003056:	f7ff f99f 	bl	8002398 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b05      	cmp	r3, #5
 8003062:	d908      	bls.n	8003076 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e078      	b.n	8003168 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e8      	bne.n	8003056 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4b38      	ldr	r3, [pc, #224]	; (8003170 <HAL_DMA_Init+0x158>)
 8003090:	4013      	ands	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d107      	bne.n	80030e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4313      	orrs	r3, r2
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b04      	cmp	r3, #4
 8003108:	d117      	bne.n	800313a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00e      	beq.n	800313a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fa77 	bl	8003610 <DMA_CheckFifoParam>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003136:	2301      	movs	r3, #1
 8003138:	e016      	b.n	8003168 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fa2e 	bl	80035a4 <DMA_CalcBaseAndBitshift>
 8003148:	4603      	mov	r3, r0
 800314a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	223f      	movs	r2, #63	; 0x3f
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	f010803f 	.word	0xf010803f

08003174 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_DMA_Start_IT+0x26>
 8003196:	2302      	movs	r3, #2
 8003198:	e048      	b.n	800322c <HAL_DMA_Start_IT+0xb8>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d137      	bne.n	800321e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f9c0 	bl	8003548 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	223f      	movs	r2, #63	; 0x3f
 80031ce:	409a      	lsls	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0216 	orr.w	r2, r2, #22
 80031e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0208 	orr.w	r2, r2, #8
 800320a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e005      	b.n	800322a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003240:	4b92      	ldr	r3, [pc, #584]	; (800348c <HAL_DMA_IRQHandler+0x258>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a92      	ldr	r2, [pc, #584]	; (8003490 <HAL_DMA_IRQHandler+0x25c>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0a9b      	lsrs	r3, r3, #10
 800324c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	2208      	movs	r2, #8
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01a      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0204 	bic.w	r2, r2, #4
 8003286:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	2208      	movs	r2, #8
 800328e:	409a      	lsls	r2, r3
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	2201      	movs	r2, #1
 80032c4:	409a      	lsls	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2204      	movs	r2, #4
 80032dc:	409a      	lsls	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d012      	beq.n	800330c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	2204      	movs	r2, #4
 80032fa:	409a      	lsls	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	2210      	movs	r2, #16
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d043      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d03c      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	2210      	movs	r2, #16
 8003330:	409a      	lsls	r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d018      	beq.n	8003376 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d108      	bne.n	8003364 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d024      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
 8003362:	e01f      	b.n	80033a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
 8003374:	e016      	b.n	80033a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0208 	bic.w	r2, r2, #8
 8003392:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	2220      	movs	r2, #32
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 808e 	beq.w	80034d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8086 	beq.w	80034d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	2220      	movs	r2, #32
 80033cc:	409a      	lsls	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d136      	bne.n	800344c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0216 	bic.w	r2, r2, #22
 80033ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <HAL_DMA_IRQHandler+0x1da>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0208 	bic.w	r2, r2, #8
 800341c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	223f      	movs	r2, #63	; 0x3f
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	2b00      	cmp	r3, #0
 8003440:	d07d      	beq.n	800353e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
        }
        return;
 800344a:	e078      	b.n	800353e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01c      	beq.n	8003494 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d108      	bne.n	800347a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	2b00      	cmp	r3, #0
 800346e:	d030      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
 8003478:	e02b      	b.n	80034d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d027      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
 800348a:	e022      	b.n	80034d2 <HAL_DMA_IRQHandler+0x29e>
 800348c:	20000288 	.word	0x20000288
 8003490:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0210 	bic.w	r2, r2, #16
 80034b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d032      	beq.n	8003540 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d022      	beq.n	800352c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2205      	movs	r2, #5
 80034ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	3301      	adds	r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	429a      	cmp	r2, r3
 8003508:	d307      	bcc.n	800351a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f2      	bne.n	80034fe <HAL_DMA_IRQHandler+0x2ca>
 8003518:	e000      	b.n	800351c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800351a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
 800353c:	e000      	b.n	8003540 <HAL_DMA_IRQHandler+0x30c>
        return;
 800353e:	bf00      	nop
    }
  }
}
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop

08003548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003564:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d108      	bne.n	8003588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003586:	e007      	b.n	8003598 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	60da      	str	r2, [r3, #12]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	3b10      	subs	r3, #16
 80035b4:	4a13      	ldr	r2, [pc, #76]	; (8003604 <DMA_CalcBaseAndBitshift+0x60>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <DMA_CalcBaseAndBitshift+0x64>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d908      	bls.n	80035e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <DMA_CalcBaseAndBitshift+0x68>)
 80035da:	4013      	ands	r3, r2
 80035dc:	1d1a      	adds	r2, r3, #4
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	659a      	str	r2, [r3, #88]	; 0x58
 80035e2:	e006      	b.n	80035f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <DMA_CalcBaseAndBitshift+0x68>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	aaaaaaab 	.word	0xaaaaaaab
 8003608:	0800b5a8 	.word	0x0800b5a8
 800360c:	fffffc00 	.word	0xfffffc00

08003610 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d11f      	bne.n	800366a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d855      	bhi.n	80036dc <DMA_CheckFifoParam+0xcc>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <DMA_CheckFifoParam+0x28>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	08003649 	.word	0x08003649
 800363c:	0800365b 	.word	0x0800365b
 8003640:	08003649 	.word	0x08003649
 8003644:	080036dd 	.word	0x080036dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d045      	beq.n	80036e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003658:	e042      	b.n	80036e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003662:	d13f      	bne.n	80036e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003668:	e03c      	b.n	80036e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003672:	d121      	bne.n	80036b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d836      	bhi.n	80036e8 <DMA_CheckFifoParam+0xd8>
 800367a:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <DMA_CheckFifoParam+0x70>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	08003691 	.word	0x08003691
 8003684:	08003697 	.word	0x08003697
 8003688:	08003691 	.word	0x08003691
 800368c:	080036a9 	.word	0x080036a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      break;
 8003694:	e02f      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d024      	beq.n	80036ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a6:	e021      	b.n	80036ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b0:	d11e      	bne.n	80036f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036b6:	e01b      	b.n	80036f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d902      	bls.n	80036c4 <DMA_CheckFifoParam+0xb4>
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d003      	beq.n	80036ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036c2:	e018      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      break;
 80036c8:	e015      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00e      	beq.n	80036f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
      break;
 80036da:	e00b      	b.n	80036f4 <DMA_CheckFifoParam+0xe4>
      break;
 80036dc:	bf00      	nop
 80036de:	e00a      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036e0:	bf00      	nop
 80036e2:	e008      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036e4:	bf00      	nop
 80036e6:	e006      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036e8:	bf00      	nop
 80036ea:	e004      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036ec:	bf00      	nop
 80036ee:	e002      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80036f0:	bf00      	nop
 80036f2:	e000      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036f4:	bf00      	nop
    }
  } 
  
  return status; 
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	e175      	b.n	8003a10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003724:	2201      	movs	r2, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	f040 8164 	bne.w	8003a0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d00b      	beq.n	8003762 <HAL_GPIO_Init+0x5e>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d007      	beq.n	8003762 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003756:	2b11      	cmp	r3, #17
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b12      	cmp	r3, #18
 8003760:	d130      	bne.n	80037c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003798:	2201      	movs	r2, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 0201 	and.w	r2, r3, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x100>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b12      	cmp	r3, #18
 8003802:	d123      	bne.n	800384c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	08da      	lsrs	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3208      	adds	r2, #8
 800380c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	220f      	movs	r2, #15
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	08da      	lsrs	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3208      	adds	r2, #8
 8003846:	69b9      	ldr	r1, [r7, #24]
 8003848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0203 	and.w	r2, r3, #3
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80be 	beq.w	8003a0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <HAL_GPIO_Init+0x320>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4a64      	ldr	r2, [pc, #400]	; (8003a24 <HAL_GPIO_Init+0x320>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003898:	6453      	str	r3, [r2, #68]	; 0x44
 800389a:	4b62      	ldr	r3, [pc, #392]	; (8003a24 <HAL_GPIO_Init+0x320>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038a6:	4a60      	ldr	r2, [pc, #384]	; (8003a28 <HAL_GPIO_Init+0x324>)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	220f      	movs	r2, #15
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a57      	ldr	r2, [pc, #348]	; (8003a2c <HAL_GPIO_Init+0x328>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d037      	beq.n	8003942 <HAL_GPIO_Init+0x23e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a56      	ldr	r2, [pc, #344]	; (8003a30 <HAL_GPIO_Init+0x32c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d031      	beq.n	800393e <HAL_GPIO_Init+0x23a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a55      	ldr	r2, [pc, #340]	; (8003a34 <HAL_GPIO_Init+0x330>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02b      	beq.n	800393a <HAL_GPIO_Init+0x236>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a54      	ldr	r2, [pc, #336]	; (8003a38 <HAL_GPIO_Init+0x334>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d025      	beq.n	8003936 <HAL_GPIO_Init+0x232>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a53      	ldr	r2, [pc, #332]	; (8003a3c <HAL_GPIO_Init+0x338>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01f      	beq.n	8003932 <HAL_GPIO_Init+0x22e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_GPIO_Init+0x33c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d019      	beq.n	800392e <HAL_GPIO_Init+0x22a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a51      	ldr	r2, [pc, #324]	; (8003a44 <HAL_GPIO_Init+0x340>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_GPIO_Init+0x226>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a50      	ldr	r2, [pc, #320]	; (8003a48 <HAL_GPIO_Init+0x344>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00d      	beq.n	8003926 <HAL_GPIO_Init+0x222>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4f      	ldr	r2, [pc, #316]	; (8003a4c <HAL_GPIO_Init+0x348>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x21e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4e      	ldr	r2, [pc, #312]	; (8003a50 <HAL_GPIO_Init+0x34c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <HAL_GPIO_Init+0x21a>
 800391a:	2309      	movs	r3, #9
 800391c:	e012      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800391e:	230a      	movs	r3, #10
 8003920:	e010      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003922:	2308      	movs	r3, #8
 8003924:	e00e      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003926:	2307      	movs	r3, #7
 8003928:	e00c      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800392a:	2306      	movs	r3, #6
 800392c:	e00a      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800392e:	2305      	movs	r3, #5
 8003930:	e008      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003932:	2304      	movs	r3, #4
 8003934:	e006      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003936:	2303      	movs	r3, #3
 8003938:	e004      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800393a:	2302      	movs	r3, #2
 800393c:	e002      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003942:	2300      	movs	r3, #0
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	f002 0203 	and.w	r2, r2, #3
 800394a:	0092      	lsls	r2, r2, #2
 800394c:	4093      	lsls	r3, r2
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003954:	4934      	ldr	r1, [pc, #208]	; (8003a28 <HAL_GPIO_Init+0x324>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003962:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <HAL_GPIO_Init+0x350>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003986:	4a33      	ldr	r2, [pc, #204]	; (8003a54 <HAL_GPIO_Init+0x350>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800398c:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <HAL_GPIO_Init+0x350>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b0:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039b6:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039da:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e0:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a04:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <HAL_GPIO_Init+0x350>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b0f      	cmp	r3, #15
 8003a14:	f67f ae86 	bls.w	8003724 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3724      	adds	r7, #36	; 0x24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	40020400 	.word	0x40020400
 8003a34:	40020800 	.word	0x40020800
 8003a38:	40020c00 	.word	0x40020c00
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40021400 	.word	0x40021400
 8003a44:	40021800 	.word	0x40021800
 8003a48:	40021c00 	.word	0x40021c00
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40022400 	.word	0x40022400
 8003a54:	40013c00 	.word	0x40013c00

08003a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
 8003a74:	e001      	b.n	8003a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	807b      	strh	r3, [r7, #2]
 8003a94:	4613      	mov	r3, r2
 8003a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a98:	787b      	ldrb	r3, [r7, #1]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003aa4:	e003      	b.n	8003aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003aa6:	887b      	ldrh	r3, [r7, #2]
 8003aa8:	041a      	lsls	r2, r3, #16
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	619a      	str	r2, [r3, #24]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ade:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aea:	f7fe fc55 	bl	8002398 <HAL_GetTick>
 8003aee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003af0:	e009      	b.n	8003b06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003af2:	f7fe fc51 	bl	8002398 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b00:	d901      	bls.n	8003b06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e022      	b.n	8003b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b06:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b12:	d1ee      	bne.n	8003af2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b14:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0f      	ldr	r2, [pc, #60]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b20:	f7fe fc3a 	bl	8002398 <HAL_GetTick>
 8003b24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b26:	e009      	b.n	8003b3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b28:	f7fe fc36 	bl	8002398 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b36:	d901      	bls.n	8003b3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e007      	b.n	8003b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b48:	d1ee      	bne.n	8003b28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40007000 	.word	0x40007000

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b64:	2300      	movs	r3, #0
 8003b66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e291      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8087 	beq.w	8003c8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b80:	4b96      	ldr	r3, [pc, #600]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8c:	4b93      	ldr	r3, [pc, #588]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d112      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62>
 8003b98:	4b90      	ldr	r3, [pc, #576]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba4:	d10b      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba6:	4b8d      	ldr	r3, [pc, #564]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d06c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x130>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d168      	bne.n	8003c8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e26b      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x7a>
 8003bc8:	4b84      	ldr	r3, [pc, #528]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a83      	ldr	r2, [pc, #524]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e02e      	b.n	8003c34 <HAL_RCC_OscConfig+0xd8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x9c>
 8003bde:	4b7f      	ldr	r3, [pc, #508]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7e      	ldr	r2, [pc, #504]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b7c      	ldr	r3, [pc, #496]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a7b      	ldr	r2, [pc, #492]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xd8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0xc0>
 8003c02:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a75      	ldr	r2, [pc, #468]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b73      	ldr	r3, [pc, #460]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a72      	ldr	r2, [pc, #456]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xd8>
 8003c1c:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6e      	ldr	r2, [pc, #440]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b6c      	ldr	r3, [pc, #432]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a6b      	ldr	r2, [pc, #428]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fbac 	bl	8002398 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fe fba8 	bl	8002398 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e21f      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b61      	ldr	r3, [pc, #388]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xe8>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fe fb98 	bl	8002398 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fb94 	bl	8002398 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e20b      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b57      	ldr	r3, [pc, #348]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x110>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d069      	beq.n	8003d6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c9a:	4b50      	ldr	r3, [pc, #320]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d11c      	bne.n	8003cec <HAL_RCC_OscConfig+0x190>
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x17a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1df      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	493d      	ldr	r1, [pc, #244]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	e040      	b.n	8003d6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d023      	beq.n	8003d3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf4:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a38      	ldr	r2, [pc, #224]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fe fb4a 	bl	8002398 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fe fb46 	bl	8002398 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e1bd      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1a:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4929      	ldr	r1, [pc, #164]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
 8003d3a:	e018      	b.n	8003d6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe fb26 	bl	8002398 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d50:	f7fe fb22 	bl	8002398 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e199      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d038      	beq.n	8003dec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d019      	beq.n	8003db6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d86:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8e:	f7fe fb03 	bl	8002398 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d96:	f7fe faff 	bl	8002398 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e176      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x23a>
 8003db4:	e01a      	b.n	8003dec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fe fae9 	bl	8002398 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fe fae5 	bl	8002398 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d903      	bls.n	8003de0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e15c      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
 8003ddc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	4b91      	ldr	r3, [pc, #580]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ee      	bne.n	8003dca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80a4 	beq.w	8003f42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b8b      	ldr	r3, [pc, #556]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	4b88      	ldr	r3, [pc, #544]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a87      	ldr	r2, [pc, #540]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
 8003e12:	4b85      	ldr	r3, [pc, #532]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e22:	4b82      	ldr	r3, [pc, #520]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e2e:	4b7f      	ldr	r3, [pc, #508]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7e      	ldr	r2, [pc, #504]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe faad 	bl	8002398 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fe faa9 	bl	8002398 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	; 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e120      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e54:	4b75      	ldr	r3, [pc, #468]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x31a>
 8003e68:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	; 0x70
 8003e74:	e02d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x33c>
 8003e7e:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a69      	ldr	r2, [pc, #420]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8a:	4b67      	ldr	r3, [pc, #412]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	4a66      	ldr	r2, [pc, #408]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	6713      	str	r3, [r2, #112]	; 0x70
 8003e96:	e01c      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCC_OscConfig+0x35e>
 8003ea0:	4b61      	ldr	r3, [pc, #388]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a60      	ldr	r2, [pc, #384]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a5d      	ldr	r2, [pc, #372]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
 8003eba:	4b5b      	ldr	r3, [pc, #364]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a5a      	ldr	r2, [pc, #360]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec6:	4b58      	ldr	r3, [pc, #352]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a57      	ldr	r2, [pc, #348]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d015      	beq.n	8003f06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fe fa5d 	bl	8002398 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fe fa59 	bl	8002398 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0ce      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ee      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x386>
 8003f04:	e014      	b.n	8003f30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f06:	f7fe fa47 	bl	8002398 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fe fa43 	bl	8002398 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0b8      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f24:	4b40      	ldr	r3, [pc, #256]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ee      	bne.n	8003f0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	4a3b      	ldr	r2, [pc, #236]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80a4 	beq.w	8004094 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4c:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d06b      	beq.n	8004030 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d149      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b31      	ldr	r3, [pc, #196]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a30      	ldr	r2, [pc, #192]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe fa14 	bl	8002398 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fe fa10 	bl	8002398 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e087      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	019b      	lsls	r3, r3, #6
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	3b01      	subs	r3, #1
 8003fac:	041b      	lsls	r3, r3, #16
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	4a1b      	ldr	r2, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003fba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fbe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fe f9e4 	bl	8002398 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fe f9e0 	bl	8002398 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e057      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x478>
 8003ff2:	e04f      	b.n	8004094 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a0b      	ldr	r2, [pc, #44]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fe f9ca 	bl	8002398 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004008:	f7fe f9c6 	bl	8002398 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e03d      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x4ac>
 8004026:	e035      	b.n	8004094 <HAL_RCC_OscConfig+0x538>
 8004028:	40023800 	.word	0x40023800
 800402c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x544>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d028      	beq.n	8004090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d121      	bne.n	8004090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d11a      	bne.n	8004090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004060:	4013      	ands	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004066:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004068:	4293      	cmp	r3, r2
 800406a:	d111      	bne.n	8004090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	3b01      	subs	r3, #1
 800407a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d107      	bne.n	8004090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800

080040a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0d0      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d910      	bls.n	80040ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b67      	ldr	r3, [pc, #412]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 020f 	bic.w	r2, r3, #15
 80040d2:	4965      	ldr	r1, [pc, #404]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b63      	ldr	r3, [pc, #396]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0b8      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d020      	beq.n	800413a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004104:	4b59      	ldr	r3, [pc, #356]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4a58      	ldr	r2, [pc, #352]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 800410a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800410e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800411c:	4b53      	ldr	r3, [pc, #332]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a52      	ldr	r2, [pc, #328]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004126:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b50      	ldr	r3, [pc, #320]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	494d      	ldr	r1, [pc, #308]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d040      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d115      	bne.n	8004186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e07f      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e073      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004176:	4b3d      	ldr	r3, [pc, #244]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06b      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004186:	4b39      	ldr	r3, [pc, #228]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4936      	ldr	r1, [pc, #216]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	4313      	orrs	r3, r2
 8004196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004198:	f7fe f8fe 	bl	8002398 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a0:	f7fe f8fa 	bl	8002398 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e053      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	4b2d      	ldr	r3, [pc, #180]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 020c 	and.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d1eb      	bne.n	80041a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d210      	bcs.n	80041f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 020f 	bic.w	r2, r3, #15
 80041de:	4922      	ldr	r1, [pc, #136]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e032      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004204:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4916      	ldr	r1, [pc, #88]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	490e      	ldr	r1, [pc, #56]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004236:	f000 f821 	bl	800427c <HAL_RCC_GetSysClockFreq>
 800423a:	4601      	mov	r1, r0
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <HAL_RCC_ClockConfig+0x1cc>)
 8004248:	5cd3      	ldrb	r3, [r2, r3]
 800424a:	fa21 f303 	lsr.w	r3, r1, r3
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1d0>)
 8004250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_ClockConfig+0x1d4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe f85a 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023c00 	.word	0x40023c00
 800426c:	40023800 	.word	0x40023800
 8004270:	0800b598 	.word	0x0800b598
 8004274:	20000288 	.word	0x20000288
 8004278:	2000028c 	.word	0x2000028c

0800427c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	2300      	movs	r3, #0
 800428c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004292:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b04      	cmp	r3, #4
 800429c:	d007      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x32>
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d008      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x38>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 808d 	bne.w	80043c2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b4b      	ldr	r3, [pc, #300]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80042aa:	60bb      	str	r3, [r7, #8]
      break;
 80042ac:	e08c      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ae:	4b4b      	ldr	r3, [pc, #300]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 80042b0:	60bb      	str	r3, [r7, #8]
      break;
 80042b2:	e089      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b4:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042be:	4b45      	ldr	r3, [pc, #276]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d023      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b42      	ldr	r3, [pc, #264]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	f04f 0400 	mov.w	r4, #0
 80042d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	ea03 0501 	and.w	r5, r3, r1
 80042e0:	ea04 0602 	and.w	r6, r4, r2
 80042e4:	4a3d      	ldr	r2, [pc, #244]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 80042e6:	fb02 f106 	mul.w	r1, r2, r6
 80042ea:	2200      	movs	r2, #0
 80042ec:	fb02 f205 	mul.w	r2, r2, r5
 80042f0:	440a      	add	r2, r1
 80042f2:	493a      	ldr	r1, [pc, #232]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 80042f4:	fba5 0101 	umull	r0, r1, r5, r1
 80042f8:	1853      	adds	r3, r2, r1
 80042fa:	4619      	mov	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f04f 0400 	mov.w	r4, #0
 8004302:	461a      	mov	r2, r3
 8004304:	4623      	mov	r3, r4
 8004306:	f7fc fcd9 	bl	8000cbc <__aeabi_uldivmod>
 800430a:	4603      	mov	r3, r0
 800430c:	460c      	mov	r4, r1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e049      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004312:	4b30      	ldr	r3, [pc, #192]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	f04f 0400 	mov.w	r4, #0
 800431c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	ea03 0501 	and.w	r5, r3, r1
 8004328:	ea04 0602 	and.w	r6, r4, r2
 800432c:	4629      	mov	r1, r5
 800432e:	4632      	mov	r2, r6
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	f04f 0400 	mov.w	r4, #0
 8004338:	0154      	lsls	r4, r2, #5
 800433a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800433e:	014b      	lsls	r3, r1, #5
 8004340:	4619      	mov	r1, r3
 8004342:	4622      	mov	r2, r4
 8004344:	1b49      	subs	r1, r1, r5
 8004346:	eb62 0206 	sbc.w	r2, r2, r6
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	f04f 0400 	mov.w	r4, #0
 8004352:	0194      	lsls	r4, r2, #6
 8004354:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004358:	018b      	lsls	r3, r1, #6
 800435a:	1a5b      	subs	r3, r3, r1
 800435c:	eb64 0402 	sbc.w	r4, r4, r2
 8004360:	f04f 0100 	mov.w	r1, #0
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	00e2      	lsls	r2, r4, #3
 800436a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800436e:	00d9      	lsls	r1, r3, #3
 8004370:	460b      	mov	r3, r1
 8004372:	4614      	mov	r4, r2
 8004374:	195b      	adds	r3, r3, r5
 8004376:	eb44 0406 	adc.w	r4, r4, r6
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	02a2      	lsls	r2, r4, #10
 8004384:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004388:	0299      	lsls	r1, r3, #10
 800438a:	460b      	mov	r3, r1
 800438c:	4614      	mov	r4, r2
 800438e:	4618      	mov	r0, r3
 8004390:	4621      	mov	r1, r4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f04f 0400 	mov.w	r4, #0
 8004398:	461a      	mov	r2, r3
 800439a:	4623      	mov	r3, r4
 800439c:	f7fc fc8e 	bl	8000cbc <__aeabi_uldivmod>
 80043a0:	4603      	mov	r3, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	0c1b      	lsrs	r3, r3, #16
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	3301      	adds	r3, #1
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	60bb      	str	r3, [r7, #8]
      break;
 80043c0:	e002      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80043c4:	60bb      	str	r3, [r7, #8]
      break;
 80043c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c8:	68bb      	ldr	r3, [r7, #8]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800
 80043d8:	00f42400 	.word	0x00f42400
 80043dc:	017d7840 	.word	0x017d7840

080043e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e01d      	b.n	800442e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd fe18 	bl	800203c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f000 fa02 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e01d      	b.n	8004484 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f815 	bl	800448c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3304      	adds	r3, #4
 8004472:	4619      	mov	r1, r3
 8004474:	4610      	mov	r0, r2
 8004476:	f000 f9d7 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	d841      	bhi.n	8004534 <HAL_TIM_IC_Start_IT+0x94>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <HAL_TIM_IC_Start_IT+0x18>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044ed 	.word	0x080044ed
 80044bc:	08004535 	.word	0x08004535
 80044c0:	08004535 	.word	0x08004535
 80044c4:	08004535 	.word	0x08004535
 80044c8:	080044ff 	.word	0x080044ff
 80044cc:	08004535 	.word	0x08004535
 80044d0:	08004535 	.word	0x08004535
 80044d4:	08004535 	.word	0x08004535
 80044d8:	08004511 	.word	0x08004511
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004535 	.word	0x08004535
 80044e4:	08004535 	.word	0x08004535
 80044e8:	08004523 	.word	0x08004523
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0202 	orr.w	r2, r2, #2
 80044fa:	60da      	str	r2, [r3, #12]
      break;
 80044fc:	e01b      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0204 	orr.w	r2, r2, #4
 800450c:	60da      	str	r2, [r3, #12]
      break;
 800450e:	e012      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0208 	orr.w	r2, r2, #8
 800451e:	60da      	str	r2, [r3, #12]
      break;
 8004520:	e009      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0210 	orr.w	r2, r2, #16
 8004530:	60da      	str	r2, [r3, #12]
      break;
 8004532:	e000      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004534:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2201      	movs	r2, #1
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fbd6 	bl	8004cf0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_TIM_IC_Start_IT+0xd8>)
 800454c:	4013      	ands	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b06      	cmp	r3, #6
 8004554:	d00b      	beq.n	800456e <HAL_TIM_IC_Start_IT+0xce>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d007      	beq.n	800456e <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	00010007 	.word	0x00010007

0800457c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004592:	2302      	movs	r3, #2
 8004594:	e08a      	b.n	80046ac <HAL_TIM_IC_ConfigChannel+0x130>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6819      	ldr	r1, [r3, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f000 f9d4 	bl	8004968 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 020c 	bic.w	r2, r2, #12
 80045ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6999      	ldr	r1, [r3, #24]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	619a      	str	r2, [r3, #24]
 80045e2:	e05a      	b.n	800469a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d11c      	bne.n	8004624 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6819      	ldr	r1, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f000 fa58 	bl	8004aae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800460c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6999      	ldr	r1, [r3, #24]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	021a      	lsls	r2, r3, #8
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	619a      	str	r2, [r3, #24]
 8004622:	e03a      	b.n	800469a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b08      	cmp	r3, #8
 8004628:	d11b      	bne.n	8004662 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	6819      	ldr	r1, [r3, #0]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f000 faa5 	bl	8004b88 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 020c 	bic.w	r2, r2, #12
 800464c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69d9      	ldr	r1, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	61da      	str	r2, [r3, #28]
 8004660:	e01b      	b.n	800469a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f000 fac5 	bl	8004c00 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004684:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69d9      	ldr	r1, [r3, #28]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	021a      	lsls	r2, r3, #8
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_TIM_ConfigClockSource+0x18>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e0a6      	b.n	800481a <HAL_TIM_ConfigClockSource+0x166>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4b4f      	ldr	r3, [pc, #316]	; (8004824 <HAL_TIM_ConfigClockSource+0x170>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d067      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0x120>
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d80b      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x6c>
 8004708:	2b10      	cmp	r3, #16
 800470a:	d073      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x140>
 800470c:	2b10      	cmp	r3, #16
 800470e:	d802      	bhi.n	8004716 <HAL_TIM_ConfigClockSource+0x62>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d06f      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004714:	e078      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004716:	2b20      	cmp	r3, #32
 8004718:	d06c      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x140>
 800471a:	2b30      	cmp	r3, #48	; 0x30
 800471c:	d06a      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800471e:	e073      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004720:	2b70      	cmp	r3, #112	; 0x70
 8004722:	d00d      	beq.n	8004740 <HAL_TIM_ConfigClockSource+0x8c>
 8004724:	2b70      	cmp	r3, #112	; 0x70
 8004726:	d804      	bhi.n	8004732 <HAL_TIM_ConfigClockSource+0x7e>
 8004728:	2b50      	cmp	r3, #80	; 0x50
 800472a:	d033      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0xe0>
 800472c:	2b60      	cmp	r3, #96	; 0x60
 800472e:	d041      	beq.n	80047b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004730:	e06a      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	d066      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x152>
 8004738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473c:	d017      	beq.n	800476e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800473e:	e063      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f000 faae 	bl	8004cb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004762:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	609a      	str	r2, [r3, #8]
      break;
 800476c:	e04c      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6899      	ldr	r1, [r3, #8]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f000 fa97 	bl	8004cb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004790:	609a      	str	r2, [r3, #8]
      break;
 8004792:	e039      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	461a      	mov	r2, r3
 80047a2:	f000 f955 	bl	8004a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2150      	movs	r1, #80	; 0x50
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fa64 	bl	8004c7a <TIM_ITRx_SetConfig>
      break;
 80047b2:	e029      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	461a      	mov	r2, r3
 80047c2:	f000 f9b1 	bl	8004b28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2160      	movs	r1, #96	; 0x60
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fa54 	bl	8004c7a <TIM_ITRx_SetConfig>
      break;
 80047d2:	e019      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6859      	ldr	r1, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	461a      	mov	r2, r3
 80047e2:	f000 f935 	bl	8004a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2140      	movs	r1, #64	; 0x40
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fa44 	bl	8004c7a <TIM_ITRx_SetConfig>
      break;
 80047f2:	e009      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f000 fa3b 	bl	8004c7a <TIM_ITRx_SetConfig>
      break;
 8004804:	e000      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	fffeff88 	.word	0xfffeff88

08004828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a40      	ldr	r2, [pc, #256]	; (800493c <TIM_Base_SetConfig+0x114>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004846:	d00f      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a3d      	ldr	r2, [pc, #244]	; (8004940 <TIM_Base_SetConfig+0x118>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00b      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a3c      	ldr	r2, [pc, #240]	; (8004944 <TIM_Base_SetConfig+0x11c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d007      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3b      	ldr	r2, [pc, #236]	; (8004948 <TIM_Base_SetConfig+0x120>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3a      	ldr	r2, [pc, #232]	; (800494c <TIM_Base_SetConfig+0x124>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d108      	bne.n	800487a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2f      	ldr	r2, [pc, #188]	; (800493c <TIM_Base_SetConfig+0x114>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d02b      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d027      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2c      	ldr	r2, [pc, #176]	; (8004940 <TIM_Base_SetConfig+0x118>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d023      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2b      	ldr	r2, [pc, #172]	; (8004944 <TIM_Base_SetConfig+0x11c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01f      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2a      	ldr	r2, [pc, #168]	; (8004948 <TIM_Base_SetConfig+0x120>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d01b      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a29      	ldr	r2, [pc, #164]	; (800494c <TIM_Base_SetConfig+0x124>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d017      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a28      	ldr	r2, [pc, #160]	; (8004950 <TIM_Base_SetConfig+0x128>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a27      	ldr	r2, [pc, #156]	; (8004954 <TIM_Base_SetConfig+0x12c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00f      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a26      	ldr	r2, [pc, #152]	; (8004958 <TIM_Base_SetConfig+0x130>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00b      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a25      	ldr	r2, [pc, #148]	; (800495c <TIM_Base_SetConfig+0x134>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d007      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a24      	ldr	r2, [pc, #144]	; (8004960 <TIM_Base_SetConfig+0x138>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a23      	ldr	r2, [pc, #140]	; (8004964 <TIM_Base_SetConfig+0x13c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d108      	bne.n	80048ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a0a      	ldr	r2, [pc, #40]	; (800493c <TIM_Base_SetConfig+0x114>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_Base_SetConfig+0xf8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a0c      	ldr	r2, [pc, #48]	; (800494c <TIM_Base_SetConfig+0x124>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40010400 	.word	0x40010400
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400
 8004958:	40014800 	.word	0x40014800
 800495c:	40001800 	.word	0x40001800
 8004960:	40001c00 	.word	0x40001c00
 8004964:	40002000 	.word	0x40002000

08004968 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f023 0201 	bic.w	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a28      	ldr	r2, [pc, #160]	; (8004a34 <TIM_TI1_SetConfig+0xcc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01b      	beq.n	80049ce <TIM_TI1_SetConfig+0x66>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499c:	d017      	beq.n	80049ce <TIM_TI1_SetConfig+0x66>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <TIM_TI1_SetConfig+0xd0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <TIM_TI1_SetConfig+0x66>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a24      	ldr	r2, [pc, #144]	; (8004a3c <TIM_TI1_SetConfig+0xd4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00f      	beq.n	80049ce <TIM_TI1_SetConfig+0x66>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a23      	ldr	r2, [pc, #140]	; (8004a40 <TIM_TI1_SetConfig+0xd8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00b      	beq.n	80049ce <TIM_TI1_SetConfig+0x66>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <TIM_TI1_SetConfig+0xdc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <TIM_TI1_SetConfig+0x66>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <TIM_TI1_SetConfig+0xe0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <TIM_TI1_SetConfig+0x66>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a20      	ldr	r2, [pc, #128]	; (8004a4c <TIM_TI1_SetConfig+0xe4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <TIM_TI1_SetConfig+0x6a>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <TIM_TI1_SetConfig+0x6c>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e003      	b.n	80049f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f023 030a 	bic.w	r3, r3, #10
 8004a0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f003 030a 	and.w	r3, r3, #10
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40000c00 	.word	0x40000c00
 8004a44:	40010400 	.word	0x40010400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40001800 	.word	0x40001800

08004a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f023 0201 	bic.w	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f023 030a 	bic.w	r3, r3, #10
 8004a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b087      	sub	sp, #28
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f023 0210 	bic.w	r2, r3, #16
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ada:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	031b      	lsls	r3, r3, #12
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	621a      	str	r2, [r3, #32]
}
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	f023 0210 	bic.w	r2, r3, #16
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	031b      	lsls	r3, r3, #12
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 0303 	bic.w	r3, r3, #3
 8004bb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004bd8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	031b      	lsls	r3, r3, #12
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	031b      	lsls	r3, r3, #12
 8004c58:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f043 0307 	orr.w	r3, r3, #7
 8004c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	609a      	str	r2, [r3, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	021a      	lsls	r2, r3, #8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	609a      	str	r2, [r3, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	371c      	adds	r7, #28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	2201      	movs	r2, #1
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	401a      	ands	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a1a      	ldr	r2, [r3, #32]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	fa01 f303 	lsl.w	r3, r1, r3
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e06d      	b.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a30      	ldr	r2, [pc, #192]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a2f      	ldr	r2, [pc, #188]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d108      	bne.n	8004d9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d022      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc6:	d01d      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d018      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1c      	ldr	r2, [pc, #112]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1a      	ldr	r2, [pc, #104]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00e      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d009      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10c      	bne.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40010400 	.word	0x40010400
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40014000 	.word	0x40014000
 8004e54:	40001800 	.word	0x40001800

08004e58 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	; 0x30
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6899      	ldr	r1, [r3, #8]
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	68b8      	ldr	r0, [r7, #8]
 8004e80:	f001 f9bc 	bl	80061fc <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	18d0      	adds	r0, r2, r3
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	2100      	movs	r1, #0
 8004e96:	f004 ffc4 	bl	8009e22 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	f000 fcec 	bl	8005880 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	ed93 7a00 	vldr	s14, [r3]
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	edd3 7a00 	vldr	s15, [r3]
 8004eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb8:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	ed93 7a00 	vldr	s14, [r3]
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	edd3 7a00 	vldr	s15, [r3]
 8004ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed0:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	f103 0008 	add.w	r0, r3, #8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	1d19      	adds	r1, r3, #4
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	461a      	mov	r2, r3
 8004eec:	f001 f92e 	bl	800614c <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	4413      	add	r3, r2
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	791b      	ldrb	r3, [r3, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d12b      	bne.n	8004f5e <SpectrogramColumn+0x106>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0a:	e022      	b.n	8004f52 <SpectrogramColumn+0xfa>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	4413      	add	r3, r2
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	440b      	add	r3, r1
 8004f1e:	617a      	str	r2, [r7, #20]
 8004f20:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8004f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2e:	db09      	blt.n	8004f44 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8004f30:	ed97 0a05 	vldr	s0, [r7, #20]
 8004f34:	f005 ffb6 	bl	800aea4 <sqrtf>
 8004f38:	eef0 7a40 	vmov.f32	s15, s0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	edc3 7a00 	vstr	s15, [r3]
 8004f42:	e003      	b.n	8004f4c <SpectrogramColumn+0xf4>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	3301      	adds	r3, #1
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	3301      	adds	r3, #1
 8004f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3d6      	bcc.n	8004f0c <SpectrogramColumn+0xb4>
    }
  }
}
 8004f5e:	bf00      	nop
 8004f60:	3730      	adds	r7, #48	; 0x30
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <MelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Mel Spectrogram column.
 * @return     None
 */
void MelSpectrogramColumn(MelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
  float32_t *tmp_buffer = S->SpectrogramConf->pScratch;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	617b      	str	r3, [r7, #20]

  /* Power Spectrogram */
  SpectrogramColumn(S->SpectrogramConf, pInSignal, tmp_buffer);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff ff68 	bl	8004e58 <SpectrogramColumn>

  /* Mel Filter Banks Application */
  MelFilterbank(S->MelFilter, tmp_buffer, pOutCol);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6979      	ldr	r1, [r7, #20]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f804 	bl	8004f9e <MelFilterbank>
}
 8004f96:	bf00      	nop
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b08d      	sub	sp, #52	; 0x34
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc6:	e034      	b.n	8005032 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4413      	add	r3, r2
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8004fe6:	8a7b      	ldrh	r3, [r7, #18]
 8004fe8:	623b      	str	r3, [r7, #32]
 8004fea:	e015      	b.n	8005018 <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	ed93 7a00 	vldr	s14, [r3]
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ffe:	edd3 7a00 	vldr	s15, [r3]
 8005002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005006:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800500a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800500e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	3301      	adds	r3, #1
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	8a3b      	ldrh	r3, [r7, #16]
 800501a:	6a3a      	ldr	r2, [r7, #32]
 800501c:	429a      	cmp	r2, r3
 800501e:	d9e5      	bls.n	8004fec <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4413      	add	r3, r2
 8005028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502a:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	3301      	adds	r3, #1
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
 8005032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	429a      	cmp	r2, r3
 8005038:	d3c6      	bcc.n	8004fc8 <MelFilterbank+0x2a>
  }
}
 800503a:	bf00      	nop
 800503c:	3734      	adds	r7, #52	; 0x34
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 0 */
  if (fct)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8005058:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800505a:	461a      	mov	r2, r3
        err.type, err.code);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	4806      	ldr	r0, [pc, #24]	; (8005080 <ai_log_err+0x38>)
 8005066:	f004 ff8d 	bl	8009f84 <iprintf>
 800506a:	e008      	b.n	800507e <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800506c:	793b      	ldrb	r3, [r7, #4]
 800506e:	4619      	mov	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005076:	461a      	mov	r2, r3
 8005078:	4802      	ldr	r0, [pc, #8]	; (8005084 <ai_log_err+0x3c>)
 800507a:	f004 ff83 	bl	8009f84 <iprintf>

  do {} while (1);
 800507e:	e7fe      	b.n	800507e <ai_log_err+0x36>
 8005080:	0800b3bc 	.word	0x0800b3bc
 8005084:	0800b3f0 	.word	0x0800b3f0

08005088 <ai_boostrap>:
  /* USER CODE END 0 */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b090      	sub	sp, #64	; 0x40
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8005092:	2100      	movs	r1, #0
 8005094:	4837      	ldr	r0, [pc, #220]	; (8005174 <ai_boostrap+0xec>)
 8005096:	f000 fac5 	bl	8005624 <ai_network_create>
 800509a:	4603      	mov	r3, r0
 800509c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 800509e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 80050a6:	4934      	ldr	r1, [pc, #208]	; (8005178 <ai_boostrap+0xf0>)
 80050a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80050aa:	f7ff ffcd 	bl	8005048 <ai_log_err>
    return -1;
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295
 80050b2:	e05b      	b.n	800516c <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 80050b4:	4b31      	ldr	r3, [pc, #196]	; (800517c <ai_boostrap+0xf4>)
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	2301      	movs	r3, #1
 80050ba:	823b      	strh	r3, [r7, #16]
 80050bc:	2301      	movs	r3, #1
 80050be:	827b      	strh	r3, [r7, #18]
 80050c0:	2301      	movs	r3, #1
 80050c2:	82bb      	strh	r3, [r7, #20]
 80050c4:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <ai_boostrap+0xf8>)
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	2300      	movs	r3, #0
 80050ce:	623b      	str	r3, [r7, #32]
 80050d0:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <ai_boostrap+0xfc>)
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
 80050d4:	2301      	movs	r3, #1
 80050d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80050d8:	2301      	movs	r3, #1
 80050da:	857b      	strh	r3, [r7, #42]	; 0x2a
 80050dc:	2301      	movs	r3, #1
 80050de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80050e0:	f64d 1340 	movw	r3, #55616	; 0xd940
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ea:	2300      	movs	r3, #0
 80050ec:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 80050ee:	4b21      	ldr	r3, [pc, #132]	; (8005174 <ai_boostrap+0xec>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f107 020c 	add.w	r2, r7, #12
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fab5 	bl	8005668 <ai_network_init>
 80050fe:	4603      	mov	r3, r0
 8005100:	f083 0301 	eor.w	r3, r3, #1
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00d      	beq.n	8005126 <ai_boostrap+0x9e>
      err = ai_network_get_error(network);
 800510a:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <ai_boostrap+0xec>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fa7c 	bl	800560c <ai_network_get_error>
 8005114:	4603      	mov	r3, r0
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 8005118:	491b      	ldr	r1, [pc, #108]	; (8005188 <ai_boostrap+0x100>)
 800511a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800511c:	f7ff ff94 	bl	8005048 <ai_log_err>
      return -1;
 8005120:	f04f 33ff 	mov.w	r3, #4294967295
 8005124:	e022      	b.n	800516c <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8005126:	4b13      	ldr	r3, [pc, #76]	; (8005174 <ai_boostrap+0xec>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4918      	ldr	r1, [pc, #96]	; (800518c <ai_boostrap+0x104>)
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fa05 	bl	800553c <ai_network_get_info>
 8005132:	4603      	mov	r3, r0
 8005134:	f083 0301 	eor.w	r3, r3, #1
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d015      	beq.n	800516a <ai_boostrap+0xe2>
    err = ai_network_get_error(network);
 800513e:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <ai_boostrap+0xec>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fa62 	bl	800560c <ai_network_get_error>
 8005148:	4603      	mov	r3, r0
 800514a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 800514c:	4910      	ldr	r1, [pc, #64]	; (8005190 <ai_boostrap+0x108>)
 800514e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005150:	f7ff ff7a 	bl	8005048 <ai_log_err>
    ai_network_destroy(network);
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <ai_boostrap+0xec>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fa79 	bl	8005650 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <ai_boostrap+0xec>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
    return -3;
 8005164:	f06f 0302 	mvn.w	r3, #2
 8005168:	e000      	b.n	800516c <ai_boostrap+0xe4>
  }

  return 0;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3740      	adds	r7, #64	; 0x40
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20001f58 	.word	0x20001f58
 8005178:	0800b420 	.word	0x0800b420
 800517c:	40040440 	.word	0x40040440
 8005180:	00010668 	.word	0x00010668
 8005184:	00040440 	.word	0x00040440
 8005188:	0800b434 	.word	0x0800b434
 800518c:	20001f5c 	.word	0x20001f5c
 8005190:	0800b444 	.word	0x0800b444

08005194 <ai_run>:

int ai_run(void *data_in, void *data_out)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  ai_i32 batch;

  ai_buffer *ai_input = network_info.inputs;
 800519e:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <ai_run+0x5c>)
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	617b      	str	r3, [r7, #20]
  ai_buffer *ai_output = network_info.outputs;
 80051a4:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <ai_run+0x5c>)
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	613b      	str	r3, [r7, #16]

  ai_input[0].data = AI_HANDLE_PTR(data_in);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	611a      	str	r2, [r3, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	611a      	str	r2, [r3, #16]

  batch = ai_network_run(network, ai_input, ai_output);
 80051b6:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <ai_run+0x60>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	6979      	ldr	r1, [r7, #20]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fa91 	bl	80056e6 <ai_network_run>
 80051c4:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d00c      	beq.n	80051e6 <ai_run+0x52>
    ai_log_err(ai_network_get_error(network),
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <ai_run+0x60>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fa1b 	bl	800560c <ai_network_get_error>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4907      	ldr	r1, [pc, #28]	; (80051f8 <ai_run+0x64>)
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff ff34 	bl	8005048 <ai_log_err>
        "ai_network_run");
    return -1;
 80051e0:	f04f 33ff 	mov.w	r3, #4294967295
 80051e4:	e000      	b.n	80051e8 <ai_run+0x54>
  }

  return 0;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20001f5c 	.word	0x20001f5c
 80051f4:	20001f58 	.word	0x20001f58
 80051f8:	0800b45c 	.word	0x0800b45c

080051fc <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005200:	4805      	ldr	r0, [pc, #20]	; (8005218 <MX_X_CUBE_AI_Init+0x1c>)
 8005202:	f004 ff33 	bl	800a06c <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 8005206:	f000 fa7f 	bl	8005708 <ai_network_data_weights_get>
 800520a:	4603      	mov	r3, r0
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <MX_X_CUBE_AI_Init+0x20>)
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff ff3a 	bl	8005088 <ai_boostrap>
    /* USER CODE END 3 */
}
 8005214:	bf00      	nop
 8005216:	bd80      	pop	{r7, pc}
 8005218:	0800b46c 	.word	0x0800b46c
 800521c:	20001fd0 	.word	0x20001fd0

08005220 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_NETWORK_ACTIVATIONS_ALIGNMENT));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	3303      	adds	r3, #3
 8005230:	f023 0303 	bic.w	r3, r3, #3
 8005234:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8005236:	4b2b      	ldr	r3, [pc, #172]	; (80052e4 <network_configure_activations+0xc4>)
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800523c:	4b29      	ldr	r3, [pc, #164]	; (80052e4 <network_configure_activations+0xc4>)
 800523e:	2200      	movs	r2, #0
 8005240:	60da      	str	r2, [r3, #12]
    conv2d_1_output_array.data = AI_PTR(activations + 1856);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8005248:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <network_configure_activations+0xc8>)
 800524a:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations + 1856);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8005252:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <network_configure_activations+0xc8>)
 8005254:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations + 0);
 8005256:	4a25      	ldr	r2, [pc, #148]	; (80052ec <network_configure_activations+0xcc>)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 0);
 800525c:	4a23      	ldr	r2, [pc, #140]	; (80052ec <network_configure_activations+0xcc>)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_output_array.data = AI_PTR(activations + 0);
 8005262:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <network_configure_activations+0xd0>)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6093      	str	r3, [r2, #8]
    batch_normalization_2_output_array.data_start = AI_PTR(activations + 0);
 8005268:	4a21      	ldr	r2, [pc, #132]	; (80052f0 <network_configure_activations+0xd0>)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	60d3      	str	r3, [r2, #12]
    max_pooling2d_1_output_array.data = AI_PTR(activations + 0);
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <network_configure_activations+0xd4>)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6093      	str	r3, [r2, #8]
    max_pooling2d_1_output_array.data_start = AI_PTR(activations + 0);
 8005274:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <network_configure_activations+0xd4>)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	60d3      	str	r3, [r2, #12]
    conv2d_3_output_array.data = AI_PTR(activations + 11648);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 8005280:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <network_configure_activations+0xd8>)
 8005282:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(activations + 11648);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 800528a:	4a1b      	ldr	r2, [pc, #108]	; (80052f8 <network_configure_activations+0xd8>)
 800528c:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(activations + 0);
 800528e:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <network_configure_activations+0xdc>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations + 0);
 8005294:	4a19      	ldr	r2, [pc, #100]	; (80052fc <network_configure_activations+0xdc>)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	60d3      	str	r3, [r2, #12]
    batch_normalization_4_output_array.data = AI_PTR(activations + 11520);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <network_configure_activations+0xe0>)
 80052a2:	6093      	str	r3, [r2, #8]
    batch_normalization_4_output_array.data_start = AI_PTR(activations + 11520);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 80052aa:	4a15      	ldr	r2, [pc, #84]	; (8005300 <network_configure_activations+0xe0>)
 80052ac:	60d3      	str	r3, [r2, #12]
    global_max_pooling2d_1_output_array.data = AI_PTR(activations + 0);
 80052ae:	4a15      	ldr	r2, [pc, #84]	; (8005304 <network_configure_activations+0xe4>)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6093      	str	r3, [r2, #8]
    global_max_pooling2d_1_output_array.data_start = AI_PTR(activations + 0);
 80052b4:	4a13      	ldr	r2, [pc, #76]	; (8005304 <network_configure_activations+0xe4>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 128);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3380      	adds	r3, #128	; 0x80
 80052be:	4a12      	ldr	r2, [pc, #72]	; (8005308 <network_configure_activations+0xe8>)
 80052c0:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 128);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3380      	adds	r3, #128	; 0x80
 80052c6:	4a10      	ldr	r2, [pc, #64]	; (8005308 <network_configure_activations+0xe8>)
 80052c8:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 80052ca:	4b10      	ldr	r3, [pc, #64]	; (800530c <network_configure_activations+0xec>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	609a      	str	r2, [r3, #8]
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 80052d0:	4b0e      	ldr	r3, [pc, #56]	; (800530c <network_configure_activations+0xec>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80052d6:	2301      	movs	r3, #1
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	200003d4 	.word	0x200003d4
 80052e8:	200003e4 	.word	0x200003e4
 80052ec:	200003f4 	.word	0x200003f4
 80052f0:	20000404 	.word	0x20000404
 80052f4:	20000414 	.word	0x20000414
 80052f8:	20000424 	.word	0x20000424
 80052fc:	20000434 	.word	0x20000434
 8005300:	20000444 	.word	0x20000444
 8005304:	20000454 	.word	0x20000454
 8005308:	20000464 	.word	0x20000464
 800530c:	20000474 	.word	0x20000474

08005310 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005320:	4b74      	ldr	r3, [pc, #464]	; (80054f4 <network_configure_weights+0x1e4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005328:	4a72      	ldr	r2, [pc, #456]	; (80054f4 <network_configure_weights+0x1e4>)
 800532a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 67136);
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4b72      	ldr	r3, [pc, #456]	; (80054f8 <network_configure_weights+0x1e8>)
 8005330:	4413      	add	r3, r2
 8005332:	4a70      	ldr	r2, [pc, #448]	; (80054f4 <network_configure_weights+0x1e4>)
 8005334:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 67136);
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4b6f      	ldr	r3, [pc, #444]	; (80054f8 <network_configure_weights+0x1e8>)
 800533a:	4413      	add	r3, r2
 800533c:	4a6d      	ldr	r2, [pc, #436]	; (80054f4 <network_configure_weights+0x1e4>)
 800533e:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005340:	4b6e      	ldr	r3, [pc, #440]	; (80054fc <network_configure_weights+0x1ec>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005348:	4a6c      	ldr	r2, [pc, #432]	; (80054fc <network_configure_weights+0x1ec>)
 800534a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 65856);
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4b6c      	ldr	r3, [pc, #432]	; (8005500 <network_configure_weights+0x1f0>)
 8005350:	4413      	add	r3, r2
 8005352:	4a6a      	ldr	r2, [pc, #424]	; (80054fc <network_configure_weights+0x1ec>)
 8005354:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 65856);
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4b69      	ldr	r3, [pc, #420]	; (8005500 <network_configure_weights+0x1f0>)
 800535a:	4413      	add	r3, r2
 800535c:	4a67      	ldr	r2, [pc, #412]	; (80054fc <network_configure_weights+0x1ec>)
 800535e:	60d3      	str	r3, [r2, #12]
    batch_normalization_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005360:	4b68      	ldr	r3, [pc, #416]	; (8005504 <network_configure_weights+0x1f4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005368:	4a66      	ldr	r2, [pc, #408]	; (8005504 <network_configure_weights+0x1f4>)
 800536a:	6013      	str	r3, [r2, #0]
    batch_normalization_4_bias_array.data = AI_PTR(weights + 65728);
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4b66      	ldr	r3, [pc, #408]	; (8005508 <network_configure_weights+0x1f8>)
 8005370:	4413      	add	r3, r2
 8005372:	4a64      	ldr	r2, [pc, #400]	; (8005504 <network_configure_weights+0x1f4>)
 8005374:	6093      	str	r3, [r2, #8]
    batch_normalization_4_bias_array.data_start = AI_PTR(weights + 65728);
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4b63      	ldr	r3, [pc, #396]	; (8005508 <network_configure_weights+0x1f8>)
 800537a:	4413      	add	r3, r2
 800537c:	4a61      	ldr	r2, [pc, #388]	; (8005504 <network_configure_weights+0x1f4>)
 800537e:	60d3      	str	r3, [r2, #12]
    batch_normalization_4_scale_array.format |= AI_FMT_FLAG_CONST;
 8005380:	4b62      	ldr	r3, [pc, #392]	; (800550c <network_configure_weights+0x1fc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005388:	4a60      	ldr	r2, [pc, #384]	; (800550c <network_configure_weights+0x1fc>)
 800538a:	6013      	str	r3, [r2, #0]
    batch_normalization_4_scale_array.data = AI_PTR(weights + 65600);
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4b60      	ldr	r3, [pc, #384]	; (8005510 <network_configure_weights+0x200>)
 8005390:	4413      	add	r3, r2
 8005392:	4a5e      	ldr	r2, [pc, #376]	; (800550c <network_configure_weights+0x1fc>)
 8005394:	6093      	str	r3, [r2, #8]
    batch_normalization_4_scale_array.data_start = AI_PTR(weights + 65600);
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4b5d      	ldr	r3, [pc, #372]	; (8005510 <network_configure_weights+0x200>)
 800539a:	4413      	add	r3, r2
 800539c:	4a5b      	ldr	r2, [pc, #364]	; (800550c <network_configure_weights+0x1fc>)
 800539e:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80053a0:	4b5c      	ldr	r3, [pc, #368]	; (8005514 <network_configure_weights+0x204>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a8:	4a5a      	ldr	r2, [pc, #360]	; (8005514 <network_configure_weights+0x204>)
 80053aa:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights + 65472);
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80053b2:	4413      	add	r3, r2
 80053b4:	4a57      	ldr	r2, [pc, #348]	; (8005514 <network_configure_weights+0x204>)
 80053b6:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights + 65472);
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80053be:	4413      	add	r3, r2
 80053c0:	4a54      	ldr	r2, [pc, #336]	; (8005514 <network_configure_weights+0x204>)
 80053c2:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80053c4:	4b54      	ldr	r3, [pc, #336]	; (8005518 <network_configure_weights+0x208>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053cc:	4a52      	ldr	r2, [pc, #328]	; (8005518 <network_configure_weights+0x208>)
 80053ce:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights + 28608);
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	f646 73c0 	movw	r3, #28608	; 0x6fc0
 80053d6:	4413      	add	r3, r2
 80053d8:	4a4f      	ldr	r2, [pc, #316]	; (8005518 <network_configure_weights+0x208>)
 80053da:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights + 28608);
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	f646 73c0 	movw	r3, #28608	; 0x6fc0
 80053e2:	4413      	add	r3, r2
 80053e4:	4a4c      	ldr	r2, [pc, #304]	; (8005518 <network_configure_weights+0x208>)
 80053e6:	60d3      	str	r3, [r2, #12]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80053e8:	4b4c      	ldr	r3, [pc, #304]	; (800551c <network_configure_weights+0x20c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053f0:	4a4a      	ldr	r2, [pc, #296]	; (800551c <network_configure_weights+0x20c>)
 80053f2:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(weights + 28480);
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	f646 7340 	movw	r3, #28480	; 0x6f40
 80053fa:	4413      	add	r3, r2
 80053fc:	4a47      	ldr	r2, [pc, #284]	; (800551c <network_configure_weights+0x20c>)
 80053fe:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(weights + 28480);
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	f646 7340 	movw	r3, #28480	; 0x6f40
 8005406:	4413      	add	r3, r2
 8005408:	4a44      	ldr	r2, [pc, #272]	; (800551c <network_configure_weights+0x20c>)
 800540a:	60d3      	str	r3, [r2, #12]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800540c:	4b44      	ldr	r3, [pc, #272]	; (8005520 <network_configure_weights+0x210>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005414:	4a42      	ldr	r2, [pc, #264]	; (8005520 <network_configure_weights+0x210>)
 8005416:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(weights + 10048);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 800541e:	4a40      	ldr	r2, [pc, #256]	; (8005520 <network_configure_weights+0x210>)
 8005420:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(weights + 10048);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8005428:	4a3d      	ldr	r2, [pc, #244]	; (8005520 <network_configure_weights+0x210>)
 800542a:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800542c:	4b3d      	ldr	r3, [pc, #244]	; (8005524 <network_configure_weights+0x214>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005434:	4a3b      	ldr	r2, [pc, #236]	; (8005524 <network_configure_weights+0x214>)
 8005436:	6013      	str	r3, [r2, #0]
    batch_normalization_2_bias_array.data = AI_PTR(weights + 9984);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800543e:	4a39      	ldr	r2, [pc, #228]	; (8005524 <network_configure_weights+0x214>)
 8005440:	6093      	str	r3, [r2, #8]
    batch_normalization_2_bias_array.data_start = AI_PTR(weights + 9984);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8005448:	4a36      	ldr	r2, [pc, #216]	; (8005524 <network_configure_weights+0x214>)
 800544a:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_scale_array.format |= AI_FMT_FLAG_CONST;
 800544c:	4b36      	ldr	r3, [pc, #216]	; (8005528 <network_configure_weights+0x218>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005454:	4a34      	ldr	r2, [pc, #208]	; (8005528 <network_configure_weights+0x218>)
 8005456:	6013      	str	r3, [r2, #0]
    batch_normalization_2_scale_array.data = AI_PTR(weights + 9920);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 800545e:	4a32      	ldr	r2, [pc, #200]	; (8005528 <network_configure_weights+0x218>)
 8005460:	6093      	str	r3, [r2, #8]
    batch_normalization_2_scale_array.data_start = AI_PTR(weights + 9920);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 8005468:	4a2f      	ldr	r2, [pc, #188]	; (8005528 <network_configure_weights+0x218>)
 800546a:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800546c:	4b2f      	ldr	r3, [pc, #188]	; (800552c <network_configure_weights+0x21c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005474:	4a2d      	ldr	r2, [pc, #180]	; (800552c <network_configure_weights+0x21c>)
 8005476:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights + 9856);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 800547e:	4a2b      	ldr	r2, [pc, #172]	; (800552c <network_configure_weights+0x21c>)
 8005480:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights + 9856);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8005488:	4a28      	ldr	r2, [pc, #160]	; (800552c <network_configure_weights+0x21c>)
 800548a:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800548c:	4b28      	ldr	r3, [pc, #160]	; (8005530 <network_configure_weights+0x220>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005494:	4a26      	ldr	r2, [pc, #152]	; (8005530 <network_configure_weights+0x220>)
 8005496:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights + 640);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800549e:	4a24      	ldr	r2, [pc, #144]	; (8005530 <network_configure_weights+0x220>)
 80054a0:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 640);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80054a8:	4a21      	ldr	r2, [pc, #132]	; (8005530 <network_configure_weights+0x220>)
 80054aa:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ac:	4b21      	ldr	r3, [pc, #132]	; (8005534 <network_configure_weights+0x224>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054b4:	4a1f      	ldr	r2, [pc, #124]	; (8005534 <network_configure_weights+0x224>)
 80054b6:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights + 576);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80054be:	4a1d      	ldr	r2, [pc, #116]	; (8005534 <network_configure_weights+0x224>)
 80054c0:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights + 576);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80054c8:	4a1a      	ldr	r2, [pc, #104]	; (8005534 <network_configure_weights+0x224>)
 80054ca:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80054cc:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <network_configure_weights+0x228>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d4:	4a18      	ldr	r2, [pc, #96]	; (8005538 <network_configure_weights+0x228>)
 80054d6:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights + 0);
 80054d8:	4a17      	ldr	r2, [pc, #92]	; (8005538 <network_configure_weights+0x228>)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights + 0);
 80054de:	4a16      	ldr	r2, [pc, #88]	; (8005538 <network_configure_weights+0x228>)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80054e4:	2301      	movs	r3, #1
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	200002f4 	.word	0x200002f4
 80054f8:	00010640 	.word	0x00010640
 80054fc:	20000304 	.word	0x20000304
 8005500:	00010140 	.word	0x00010140
 8005504:	20000314 	.word	0x20000314
 8005508:	000100c0 	.word	0x000100c0
 800550c:	20000324 	.word	0x20000324
 8005510:	00010040 	.word	0x00010040
 8005514:	20000334 	.word	0x20000334
 8005518:	20000344 	.word	0x20000344
 800551c:	20000354 	.word	0x20000354
 8005520:	20000364 	.word	0x20000364
 8005524:	20000374 	.word	0x20000374
 8005528:	20000384 	.word	0x20000384
 800552c:	20000394 	.word	0x20000394
 8005530:	200003a4 	.word	0x200003a4
 8005534:	200003b4 	.word	0x200003b4
 8005538:	200003c4 	.word	0x200003c4

0800553c <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b0a0      	sub	sp, #128	; 0x80
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 faf2 	bl	8006b30 <ai_platform_context_acquire>
 800554c:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d049      	beq.n	80055e8 <ai_network_get_info+0xac>
 8005554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d046      	beq.n	80055e8 <ai_network_get_info+0xac>
  {
    ai_network_report r = {
 800555a:	f107 0308 	add.w	r3, r7, #8
 800555e:	2274      	movs	r2, #116	; 0x74
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f004 fc5d 	bl	8009e22 <memset>
 8005568:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <ai_network_get_info+0xb8>)
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <ai_network_get_info+0xbc>)
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	4b22      	ldr	r3, [pc, #136]	; (80055fc <ai_network_get_info+0xc0>)
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	4b22      	ldr	r3, [pc, #136]	; (8005600 <ai_network_get_info+0xc4>)
 8005576:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005578:	f001 f966 	bl	8006848 <ai_platform_runtime_get_revision>
 800557c:	4603      	mov	r3, r0
    ai_network_report r = {
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	f001 f9b0 	bl	80068e4 <ai_platform_runtime_get_version>
 8005584:	4603      	mov	r3, r0
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <ai_network_get_info+0xc8>)
 800558a:	623b      	str	r3, [r7, #32]
 800558c:	2305      	movs	r3, #5
 800558e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005592:	2302      	movs	r3, #2
 8005594:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005598:	2301      	movs	r3, #1
 800559a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800559e:	2303      	movs	r3, #3
 80055a0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80055a4:	f001 fa00 	bl	80069a8 <ai_platform_api_get_version>
 80055a8:	4603      	mov	r3, r0
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ac:	f001 fa5e 	bl	8006a6c <ai_platform_interface_api_get_version>
 80055b0:	4603      	mov	r3, r0
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30
 80055b4:	4b14      	ldr	r3, [pc, #80]	; (8005608 <ai_network_get_info+0xcc>)
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 80055b8:	f107 0308 	add.w	r3, r7, #8
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 fb96 	bl	8006cf0 <ai_platform_api_get_network_report>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f083 0301 	eor.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <ai_network_get_info+0x98>
 80055d0:	2300      	movs	r3, #0
 80055d2:	e00a      	b.n	80055ea <ai_network_get_info+0xae>

    *report = r;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f107 0308 	add.w	r3, r7, #8
 80055dc:	2274      	movs	r2, #116	; 0x74
 80055de:	4619      	mov	r1, r3
 80055e0:	f004 fc14 	bl	8009e0c <memcpy>
    return true;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <ai_network_get_info+0xae>
  }

  return false;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3780      	adds	r7, #128	; 0x80
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	0800b528 	.word	0x0800b528
 80055f8:	0800b530 	.word	0x0800b530
 80055fc:	0800b554 	.word	0x0800b554
 8005600:	0800b570 	.word	0x0800b570
 8005604:	0800b588 	.word	0x0800b588
 8005608:	00338636 	.word	0x00338636

0800560c <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f001 fadd 	bl	8006bd4 <ai_platform_network_get_error>
 800561a:	4603      	mov	r3, r0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af02      	add	r7, sp, #8
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800562e:	2300      	movs	r3, #0
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	2303      	movs	r3, #3
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	2301      	movs	r3, #1
 8005638:	4a04      	ldr	r2, [pc, #16]	; (800564c <ai_network_create+0x28>)
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 fde5 	bl	800720c <ai_platform_network_create>
 8005642:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000294 	.word	0x20000294

08005650 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 fe5b 	bl	8007314 <ai_platform_network_destroy>
 800565e:	4603      	mov	r3, r0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f001 fed7 	bl	8007428 <ai_platform_network_init>
 800567a:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <ai_network_init+0x1e>
 8005682:	2300      	movs	r3, #0
 8005684:	e02b      	b.n	80056de <ai_network_init+0x76>

  ai_bool ok = true;
 8005686:	2301      	movs	r3, #1
 8005688:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	4619      	mov	r1, r3
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7ff fe3e 	bl	8005310 <network_configure_weights>
 8005694:	4603      	mov	r3, r0
 8005696:	461a      	mov	r2, r3
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	3318      	adds	r3, #24
 80056aa:	4619      	mov	r1, r3
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff fdb7 	bl	8005220 <network_configure_activations>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	7afb      	ldrb	r3, [r7, #11]
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bf14      	ite	ne
 80056be:	2301      	movne	r3, #1
 80056c0:	2300      	moveq	r3, #0
 80056c2:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 ff97 	bl	80075f8 <ai_platform_network_post_init>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	72fb      	strb	r3, [r7, #11]

  return ok;
 80056dc:	7afb      	ldrb	r3, [r7, #11]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f002 f82a 	bl	8007750 <ai_platform_network_process>
 80056fc:	4603      	mov	r3, r0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
    0x95, 0xa1, 0x3b, 0x8c, 0xc7, 0x09, 0xbd, 0xc8, 0x83,
    0x26, 0x3d, 0x83, 0xb1, 0x3d, 0xbd, 0xd1, 0x00, 0xff,
    0xbc, 0xcc, 0x80, 0x11, 0xbd, 0x8b, 0xb8, 0xa0, 0xbb
  };

  return AI_HANDLE_PTR(s_network_weights);
 800570c:	4b02      	ldr	r3, [pc, #8]	; (8005718 <ai_network_data_weights_get+0x10>)

}
 800570e:	4618      	mov	r0, r3
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	0800d680 	.word	0x0800d680

0800571c <arm_rfft_fast_init_f32>:
 800571c:	084b      	lsrs	r3, r1, #1
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	b430      	push	{r4, r5}
 8005722:	8201      	strh	r1, [r0, #16]
 8005724:	8003      	strh	r3, [r0, #0]
 8005726:	d06f      	beq.n	8005808 <arm_rfft_fast_init_f32+0xec>
 8005728:	d916      	bls.n	8005758 <arm_rfft_fast_init_f32+0x3c>
 800572a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572e:	d05e      	beq.n	80057ee <arm_rfft_fast_init_f32+0xd2>
 8005730:	d935      	bls.n	800579e <arm_rfft_fast_init_f32+0x82>
 8005732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005736:	d025      	beq.n	8005784 <arm_rfft_fast_init_f32+0x68>
 8005738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800573c:	d112      	bne.n	8005764 <arm_rfft_fast_init_f32+0x48>
 800573e:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8005742:	4c37      	ldr	r4, [pc, #220]	; (8005820 <arm_rfft_fast_init_f32+0x104>)
 8005744:	4937      	ldr	r1, [pc, #220]	; (8005824 <arm_rfft_fast_init_f32+0x108>)
 8005746:	2300      	movs	r3, #0
 8005748:	4a37      	ldr	r2, [pc, #220]	; (8005828 <arm_rfft_fast_init_f32+0x10c>)
 800574a:	8185      	strh	r5, [r0, #12]
 800574c:	6084      	str	r4, [r0, #8]
 800574e:	6041      	str	r1, [r0, #4]
 8005750:	6142      	str	r2, [r0, #20]
 8005752:	b258      	sxtb	r0, r3
 8005754:	bc30      	pop	{r4, r5}
 8005756:	4770      	bx	lr
 8005758:	2b20      	cmp	r3, #32
 800575a:	d030      	beq.n	80057be <arm_rfft_fast_init_f32+0xa2>
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d005      	beq.n	800576c <arm_rfft_fast_init_f32+0x50>
 8005760:	2b10      	cmp	r3, #16
 8005762:	d038      	beq.n	80057d6 <arm_rfft_fast_init_f32+0xba>
 8005764:	23ff      	movs	r3, #255	; 0xff
 8005766:	bc30      	pop	{r4, r5}
 8005768:	b258      	sxtb	r0, r3
 800576a:	4770      	bx	lr
 800576c:	2538      	movs	r5, #56	; 0x38
 800576e:	4c2f      	ldr	r4, [pc, #188]	; (800582c <arm_rfft_fast_init_f32+0x110>)
 8005770:	492f      	ldr	r1, [pc, #188]	; (8005830 <arm_rfft_fast_init_f32+0x114>)
 8005772:	2300      	movs	r3, #0
 8005774:	4a2f      	ldr	r2, [pc, #188]	; (8005834 <arm_rfft_fast_init_f32+0x118>)
 8005776:	8185      	strh	r5, [r0, #12]
 8005778:	6084      	str	r4, [r0, #8]
 800577a:	6041      	str	r1, [r0, #4]
 800577c:	6142      	str	r2, [r0, #20]
 800577e:	b258      	sxtb	r0, r3
 8005780:	bc30      	pop	{r4, r5}
 8005782:	4770      	bx	lr
 8005784:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8005788:	4c2b      	ldr	r4, [pc, #172]	; (8005838 <arm_rfft_fast_init_f32+0x11c>)
 800578a:	492c      	ldr	r1, [pc, #176]	; (800583c <arm_rfft_fast_init_f32+0x120>)
 800578c:	2300      	movs	r3, #0
 800578e:	4a2c      	ldr	r2, [pc, #176]	; (8005840 <arm_rfft_fast_init_f32+0x124>)
 8005790:	8185      	strh	r5, [r0, #12]
 8005792:	6084      	str	r4, [r0, #8]
 8005794:	6041      	str	r1, [r0, #4]
 8005796:	6142      	str	r2, [r0, #20]
 8005798:	b258      	sxtb	r0, r3
 800579a:	bc30      	pop	{r4, r5}
 800579c:	4770      	bx	lr
 800579e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a2:	d1df      	bne.n	8005764 <arm_rfft_fast_init_f32+0x48>
 80057a4:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80057a8:	4c26      	ldr	r4, [pc, #152]	; (8005844 <arm_rfft_fast_init_f32+0x128>)
 80057aa:	4927      	ldr	r1, [pc, #156]	; (8005848 <arm_rfft_fast_init_f32+0x12c>)
 80057ac:	2300      	movs	r3, #0
 80057ae:	4a27      	ldr	r2, [pc, #156]	; (800584c <arm_rfft_fast_init_f32+0x130>)
 80057b0:	8185      	strh	r5, [r0, #12]
 80057b2:	6084      	str	r4, [r0, #8]
 80057b4:	6041      	str	r1, [r0, #4]
 80057b6:	6142      	str	r2, [r0, #20]
 80057b8:	b258      	sxtb	r0, r3
 80057ba:	bc30      	pop	{r4, r5}
 80057bc:	4770      	bx	lr
 80057be:	2530      	movs	r5, #48	; 0x30
 80057c0:	4c23      	ldr	r4, [pc, #140]	; (8005850 <arm_rfft_fast_init_f32+0x134>)
 80057c2:	4924      	ldr	r1, [pc, #144]	; (8005854 <arm_rfft_fast_init_f32+0x138>)
 80057c4:	2300      	movs	r3, #0
 80057c6:	4a24      	ldr	r2, [pc, #144]	; (8005858 <arm_rfft_fast_init_f32+0x13c>)
 80057c8:	8185      	strh	r5, [r0, #12]
 80057ca:	6084      	str	r4, [r0, #8]
 80057cc:	6041      	str	r1, [r0, #4]
 80057ce:	6142      	str	r2, [r0, #20]
 80057d0:	b258      	sxtb	r0, r3
 80057d2:	bc30      	pop	{r4, r5}
 80057d4:	4770      	bx	lr
 80057d6:	2514      	movs	r5, #20
 80057d8:	4c20      	ldr	r4, [pc, #128]	; (800585c <arm_rfft_fast_init_f32+0x140>)
 80057da:	4921      	ldr	r1, [pc, #132]	; (8005860 <arm_rfft_fast_init_f32+0x144>)
 80057dc:	2300      	movs	r3, #0
 80057de:	4a21      	ldr	r2, [pc, #132]	; (8005864 <arm_rfft_fast_init_f32+0x148>)
 80057e0:	8185      	strh	r5, [r0, #12]
 80057e2:	6084      	str	r4, [r0, #8]
 80057e4:	6041      	str	r1, [r0, #4]
 80057e6:	6142      	str	r2, [r0, #20]
 80057e8:	b258      	sxtb	r0, r3
 80057ea:	bc30      	pop	{r4, r5}
 80057ec:	4770      	bx	lr
 80057ee:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80057f2:	4c1d      	ldr	r4, [pc, #116]	; (8005868 <arm_rfft_fast_init_f32+0x14c>)
 80057f4:	491d      	ldr	r1, [pc, #116]	; (800586c <arm_rfft_fast_init_f32+0x150>)
 80057f6:	2300      	movs	r3, #0
 80057f8:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <arm_rfft_fast_init_f32+0x154>)
 80057fa:	8185      	strh	r5, [r0, #12]
 80057fc:	6084      	str	r4, [r0, #8]
 80057fe:	6041      	str	r1, [r0, #4]
 8005800:	6142      	str	r2, [r0, #20]
 8005802:	b258      	sxtb	r0, r3
 8005804:	bc30      	pop	{r4, r5}
 8005806:	4770      	bx	lr
 8005808:	25d0      	movs	r5, #208	; 0xd0
 800580a:	4c1a      	ldr	r4, [pc, #104]	; (8005874 <arm_rfft_fast_init_f32+0x158>)
 800580c:	491a      	ldr	r1, [pc, #104]	; (8005878 <arm_rfft_fast_init_f32+0x15c>)
 800580e:	2300      	movs	r3, #0
 8005810:	4a1a      	ldr	r2, [pc, #104]	; (800587c <arm_rfft_fast_init_f32+0x160>)
 8005812:	8185      	strh	r5, [r0, #12]
 8005814:	6084      	str	r4, [r0, #8]
 8005816:	6041      	str	r1, [r0, #4]
 8005818:	6142      	str	r2, [r0, #20]
 800581a:	b258      	sxtb	r0, r3
 800581c:	bc30      	pop	{r4, r5}
 800581e:	4770      	bx	lr
 8005820:	0802caf0 	.word	0x0802caf0
 8005824:	0801dce8 	.word	0x0801dce8
 8005828:	08023e58 	.word	0x08023e58
 800582c:	08021de8 	.word	0x08021de8
 8005830:	0802e8b0 	.word	0x0802e8b0
 8005834:	08030da0 	.word	0x08030da0
 8005838:	0802a7d8 	.word	0x0802a7d8
 800583c:	080286d8 	.word	0x080286d8
 8005840:	08021e58 	.word	0x08021e58
 8005844:	08030a30 	.word	0x08030a30
 8005848:	08027e58 	.word	0x08027e58
 800584c:	0802eab0 	.word	0x0802eab0
 8005850:	0802b690 	.word	0x0802b690
 8005854:	0802a6d8 	.word	0x0802a6d8
 8005858:	08021ce8 	.word	0x08021ce8
 800585c:	0802b5e8 	.word	0x0802b5e8
 8005860:	08028658 	.word	0x08028658
 8005864:	0802b610 	.word	0x0802b610
 8005868:	0802f2b0 	.word	0x0802f2b0
 800586c:	0802baf0 	.word	0x0802baf0
 8005870:	0802f630 	.word	0x0802f630
 8005874:	08030fa0 	.word	0x08030fa0
 8005878:	0802b6f0 	.word	0x0802b6f0
 800587c:	08030630 	.word	0x08030630

08005880 <arm_rfft_fast_f32>:
 8005880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005884:	8a05      	ldrh	r5, [r0, #16]
 8005886:	4606      	mov	r6, r0
 8005888:	4690      	mov	r8, r2
 800588a:	460c      	mov	r4, r1
 800588c:	086d      	lsrs	r5, r5, #1
 800588e:	8005      	strh	r5, [r0, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d15e      	bne.n	8005952 <arm_rfft_fast_f32+0xd2>
 8005894:	461a      	mov	r2, r3
 8005896:	2301      	movs	r3, #1
 8005898:	f000 fbe0 	bl	800605c <arm_cfft_f32>
 800589c:	edd4 7a00 	vldr	s15, [r4]
 80058a0:	ed94 7a01 	vldr	s14, [r4, #4]
 80058a4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80058a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80058ac:	8837      	ldrh	r7, [r6, #0]
 80058ae:	ee37 7a07 	vadd.f32	s14, s14, s14
 80058b2:	6975      	ldr	r5, [r6, #20]
 80058b4:	3f01      	subs	r7, #1
 80058b6:	eef0 3a46 	vmov.f32	s7, s12
 80058ba:	3510      	adds	r5, #16
 80058bc:	f108 0610 	add.w	r6, r8, #16
 80058c0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80058c4:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 80058c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058cc:	f104 0310 	add.w	r3, r4, #16
 80058d0:	3808      	subs	r0, #8
 80058d2:	ee26 7a86 	vmul.f32	s14, s13, s12
 80058d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80058da:	ed88 7a00 	vstr	s14, [r8]
 80058de:	edc8 7a01 	vstr	s15, [r8, #4]
 80058e2:	edd0 6a02 	vldr	s13, [r0, #8]
 80058e6:	3f01      	subs	r7, #1
 80058e8:	ed13 5a02 	vldr	s10, [r3, #-8]
 80058ec:	f1a0 0008 	sub.w	r0, r0, #8
 80058f0:	ed13 7a01 	vldr	s14, [r3, #-4]
 80058f4:	f105 0508 	add.w	r5, r5, #8
 80058f8:	ee76 7ac5 	vsub.f32	s15, s13, s10
 80058fc:	ed15 6a04 	vldr	s12, [r5, #-16]
 8005900:	edd0 5a05 	vldr	s11, [r0, #20]
 8005904:	ee36 5a85 	vadd.f32	s10, s13, s10
 8005908:	ed55 6a03 	vldr	s13, [r5, #-12]
 800590c:	f103 0308 	add.w	r3, r3, #8
 8005910:	ee35 4a87 	vadd.f32	s8, s11, s14
 8005914:	f106 0608 	add.w	r6, r6, #8
 8005918:	ee66 4a27 	vmul.f32	s9, s12, s15
 800591c:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005920:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8005924:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005928:	ee26 6a04 	vmul.f32	s12, s12, s8
 800592c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005930:	ee77 7a25 	vadd.f32	s15, s14, s11
 8005934:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005938:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800593c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005940:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005944:	ed46 6a04 	vstr	s13, [r6, #-16]
 8005948:	ed46 7a03 	vstr	s15, [r6, #-12]
 800594c:	d1c9      	bne.n	80058e2 <arm_rfft_fast_f32+0x62>
 800594e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005952:	edd1 7a00 	vldr	s15, [r1]
 8005956:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800595a:	edd1 6a01 	vldr	s13, [r1, #4]
 800595e:	1e68      	subs	r0, r5, #1
 8005960:	6975      	ldr	r5, [r6, #20]
 8005962:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005966:	00c1      	lsls	r1, r0, #3
 8005968:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800596c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005970:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005974:	ed82 7a00 	vstr	s14, [r2]
 8005978:	edc2 7a01 	vstr	s15, [r2, #4]
 800597c:	b3e0      	cbz	r0, 80059f8 <arm_rfft_fast_f32+0x178>
 800597e:	3908      	subs	r1, #8
 8005980:	f104 0210 	add.w	r2, r4, #16
 8005984:	3510      	adds	r5, #16
 8005986:	440c      	add	r4, r1
 8005988:	f108 0110 	add.w	r1, r8, #16
 800598c:	ed94 7a02 	vldr	s14, [r4, #8]
 8005990:	3801      	subs	r0, #1
 8005992:	ed52 6a02 	vldr	s13, [r2, #-8]
 8005996:	f1a4 0408 	sub.w	r4, r4, #8
 800599a:	ed15 6a02 	vldr	s12, [r5, #-8]
 800599e:	f102 0208 	add.w	r2, r2, #8
 80059a2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80059a6:	ed94 4a05 	vldr	s8, [r4, #20]
 80059aa:	ed12 5a03 	vldr	s10, [r2, #-12]
 80059ae:	ee77 6a26 	vadd.f32	s13, s14, s13
 80059b2:	ed55 5a01 	vldr	s11, [r5, #-4]
 80059b6:	f101 0108 	add.w	r1, r1, #8
 80059ba:	ee26 3a27 	vmul.f32	s6, s12, s15
 80059be:	f105 0508 	add.w	r5, r5, #8
 80059c2:	ee74 4a05 	vadd.f32	s9, s8, s10
 80059c6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80059ca:	ee35 5a44 	vsub.f32	s10, s10, s8
 80059ce:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80059d2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80059d6:	ee77 7a05 	vadd.f32	s15, s14, s10
 80059da:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80059de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80059e2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80059e6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80059ea:	ee27 7a23 	vmul.f32	s14, s14, s7
 80059ee:	ed41 7a03 	vstr	s15, [r1, #-12]
 80059f2:	ed01 7a04 	vstr	s14, [r1, #-16]
 80059f6:	d1c9      	bne.n	800598c <arm_rfft_fast_f32+0x10c>
 80059f8:	4630      	mov	r0, r6
 80059fa:	4641      	mov	r1, r8
 80059fc:	461a      	mov	r2, r3
 80059fe:	2301      	movs	r3, #1
 8005a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a04:	f000 bb2a 	b.w	800605c <arm_cfft_f32>

08005a08 <arm_cfft_radix8by2_f32>:
 8005a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0c:	ed2d 8b06 	vpush	{d8-d10}
 8005a10:	f8b0 e000 	ldrh.w	lr, [r0]
 8005a14:	4607      	mov	r7, r0
 8005a16:	6842      	ldr	r2, [r0, #4]
 8005a18:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8005a1c:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8005a20:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005a24:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8005a28:	f000 80af 	beq.w	8005b8a <arm_cfft_radix8by2_f32+0x182>
 8005a2c:	3310      	adds	r3, #16
 8005a2e:	3210      	adds	r2, #16
 8005a30:	f101 0610 	add.w	r6, r1, #16
 8005a34:	f108 0510 	add.w	r5, r8, #16
 8005a38:	18cc      	adds	r4, r1, r3
 8005a3a:	4443      	add	r3, r8
 8005a3c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8005a40:	f1be 0e01 	subs.w	lr, lr, #1
 8005a44:	ed56 4a04 	vldr	s9, [r6, #-16]
 8005a48:	f104 0410 	add.w	r4, r4, #16
 8005a4c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8005a50:	f106 0610 	add.w	r6, r6, #16
 8005a54:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8005a58:	ed53 0a04 	vldr	s1, [r3, #-16]
 8005a5c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8005a60:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8005a64:	ed13 3a02 	vldr	s6, [r3, #-8]
 8005a68:	f102 0210 	add.w	r2, r2, #16
 8005a6c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8005a70:	f103 0310 	add.w	r3, r3, #16
 8005a74:	ed55 2a01 	vldr	s5, [r5, #-4]
 8005a78:	f105 0510 	add.w	r5, r5, #16
 8005a7c:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8005a80:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8005a84:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8005a88:	ee33 8a83 	vadd.f32	s16, s7, s6
 8005a8c:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8005a90:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8005a94:	ee34 0a06 	vadd.f32	s0, s8, s12
 8005a98:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8005a9c:	ee76 aa87 	vadd.f32	s21, s13, s14
 8005aa0:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8005aa4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005aa8:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8005aac:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8005ab0:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8005ab4:	ee71 8a05 	vadd.f32	s17, s2, s10
 8005ab8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8005abc:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8005ac0:	ee72 9a22 	vadd.f32	s19, s4, s5
 8005ac4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005ac8:	ee35 5a41 	vsub.f32	s10, s10, s2
 8005acc:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8005ad0:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8005ad4:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005ad8:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8005adc:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8005ae0:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8005ae4:	ee72 7a62 	vsub.f32	s15, s4, s5
 8005ae8:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8005aec:	ee73 2a63 	vsub.f32	s5, s6, s7
 8005af0:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8005af4:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8005af8:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8005afc:	ee24 3a84 	vmul.f32	s6, s9, s8
 8005b00:	ee27 2a26 	vmul.f32	s4, s14, s13
 8005b04:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8005b08:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8005b0c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005b10:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005b14:	ee65 6a26 	vmul.f32	s13, s10, s13
 8005b18:	ee25 5a04 	vmul.f32	s10, s10, s8
 8005b1c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005b20:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005b24:	ee33 4a02 	vadd.f32	s8, s6, s4
 8005b28:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005b2c:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8005b30:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8005b34:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8005b38:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8005b3c:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8005b40:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8005b44:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8005b48:	ee27 4a87 	vmul.f32	s8, s15, s14
 8005b4c:	ee61 5a87 	vmul.f32	s11, s3, s14
 8005b50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b54:	ee22 5a87 	vmul.f32	s10, s5, s14
 8005b58:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005b5c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005b60:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8005b64:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005b68:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005b6c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005b70:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b74:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8005b78:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8005b7c:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8005b80:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8005b84:	f47f af5a 	bne.w	8005a3c <arm_cfft_radix8by2_f32+0x34>
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	fa1f f48c 	uxth.w	r4, ip
 8005b8e:	4608      	mov	r0, r1
 8005b90:	2302      	movs	r3, #2
 8005b92:	4621      	mov	r1, r4
 8005b94:	f000 fb78 	bl	8006288 <arm_radix8_butterfly_f32>
 8005b98:	4640      	mov	r0, r8
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	ecbd 8b06 	vpop	{d8-d10}
 8005ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba8:	f000 bb6e 	b.w	8006288 <arm_radix8_butterfly_f32>

08005bac <arm_cfft_radix8by4_f32>:
 8005bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb0:	ed2d 8b06 	vpush	{d8-d10}
 8005bb4:	8804      	ldrh	r4, [r0, #0]
 8005bb6:	b08f      	sub	sp, #60	; 0x3c
 8005bb8:	ed91 6a00 	vldr	s12, [r1]
 8005bbc:	460a      	mov	r2, r1
 8005bbe:	0864      	lsrs	r4, r4, #1
 8005bc0:	ed91 7a01 	vldr	s14, [r1, #4]
 8005bc4:	9101      	str	r1, [sp, #4]
 8005bc6:	00a3      	lsls	r3, r4, #2
 8005bc8:	9104      	str	r1, [sp, #16]
 8005bca:	0864      	lsrs	r4, r4, #1
 8005bcc:	6841      	ldr	r1, [r0, #4]
 8005bce:	900c      	str	r0, [sp, #48]	; 0x30
 8005bd0:	4625      	mov	r5, r4
 8005bd2:	940b      	str	r4, [sp, #44]	; 0x2c
 8005bd4:	f101 0408 	add.w	r4, r1, #8
 8005bd8:	f101 0610 	add.w	r6, r1, #16
 8005bdc:	9406      	str	r4, [sp, #24]
 8005bde:	18d4      	adds	r4, r2, r3
 8005be0:	1eaa      	subs	r2, r5, #2
 8005be2:	f101 0518 	add.w	r5, r1, #24
 8005be6:	18e0      	adds	r0, r4, r3
 8005be8:	ed94 4a00 	vldr	s8, [r4]
 8005bec:	edd4 3a01 	vldr	s7, [r4, #4]
 8005bf0:	46a6      	mov	lr, r4
 8005bf2:	edd0 6a00 	vldr	s13, [r0]
 8005bf6:	18c7      	adds	r7, r0, r3
 8005bf8:	edd0 7a01 	vldr	s15, [r0, #4]
 8005bfc:	46a0      	mov	r8, r4
 8005bfe:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005c02:	edd7 4a00 	vldr	s9, [r7]
 8005c06:	9402      	str	r4, [sp, #8]
 8005c08:	4604      	mov	r4, r0
 8005c0a:	9507      	str	r5, [sp, #28]
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	ee75 2a84 	vadd.f32	s5, s11, s8
 8005c12:	900a      	str	r0, [sp, #40]	; 0x28
 8005c14:	9801      	ldr	r0, [sp, #4]
 8005c16:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005c1a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005c1e:	ed97 5a01 	vldr	s10, [r7, #4]
 8005c22:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005c26:	46bc      	mov	ip, r7
 8005c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c2c:	9605      	str	r6, [sp, #20]
 8005c2e:	ee36 7a63 	vsub.f32	s14, s12, s7
 8005c32:	9703      	str	r7, [sp, #12]
 8005c34:	ee12 9a90 	vmov	r9, s5
 8005c38:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8005c3c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005c40:	1f3e      	subs	r6, r7, #4
 8005c42:	f840 9b08 	str.w	r9, [r0], #8
 8005c46:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8005c4a:	edde 2a01 	vldr	s5, [lr, #4]
 8005c4e:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8005c52:	ee77 7a84 	vadd.f32	s15, s15, s8
 8005c56:	ed9c 4a01 	vldr	s8, [ip, #4]
 8005c5a:	ee36 6a22 	vadd.f32	s12, s12, s5
 8005c5e:	9001      	str	r0, [sp, #4]
 8005c60:	ee37 7a45 	vsub.f32	s14, s14, s10
 8005c64:	9804      	ldr	r0, [sp, #16]
 8005c66:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005c6a:	f1ae 0704 	sub.w	r7, lr, #4
 8005c6e:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005c72:	ee33 4a45 	vsub.f32	s8, s6, s10
 8005c76:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005c7a:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8005c7e:	ed80 6a01 	vstr	s12, [r0, #4]
 8005c82:	ee14 9a10 	vmov	r9, s8
 8005c86:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005c8a:	f848 9b08 	str.w	r9, [r8], #8
 8005c8e:	ed8e 5a01 	vstr	s10, [lr, #4]
 8005c92:	ee15 ea90 	vmov	lr, s11
 8005c96:	f844 eb08 	str.w	lr, [r4], #8
 8005c9a:	ee16 ea90 	vmov	lr, s13
 8005c9e:	9408      	str	r4, [sp, #32]
 8005ca0:	462c      	mov	r4, r5
 8005ca2:	ed85 7a01 	vstr	s14, [r5, #4]
 8005ca6:	9d03      	ldr	r5, [sp, #12]
 8005ca8:	f84c eb08 	str.w	lr, [ip], #8
 8005cac:	edc5 7a01 	vstr	s15, [r5, #4]
 8005cb0:	0855      	lsrs	r5, r2, #1
 8005cb2:	9509      	str	r5, [sp, #36]	; 0x24
 8005cb4:	f000 8130 	beq.w	8005f18 <arm_cfft_radix8by4_f32+0x36c>
 8005cb8:	9804      	ldr	r0, [sp, #16]
 8005cba:	3b08      	subs	r3, #8
 8005cbc:	46ab      	mov	fp, r5
 8005cbe:	f1a4 020c 	sub.w	r2, r4, #12
 8005cc2:	f100 0510 	add.w	r5, r0, #16
 8005cc6:	f101 0920 	add.w	r9, r1, #32
 8005cca:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8005cce:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005cd2:	4433      	add	r3, r6
 8005cd4:	3410      	adds	r4, #16
 8005cd6:	4660      	mov	r0, ip
 8005cd8:	4641      	mov	r1, r8
 8005cda:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8005cde:	ed54 6a02 	vldr	s13, [r4, #-8]
 8005ce2:	f1bb 0b01 	subs.w	fp, fp, #1
 8005ce6:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005cea:	f10a 0a08 	add.w	sl, sl, #8
 8005cee:	edd1 7a00 	vldr	s15, [r1]
 8005cf2:	f105 0508 	add.w	r5, r5, #8
 8005cf6:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8005cfa:	edd0 2a00 	vldr	s5, [r0]
 8005cfe:	ed14 7a01 	vldr	s14, [r4, #-4]
 8005d02:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8005d06:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005d0a:	f1a2 0208 	sub.w	r2, r2, #8
 8005d0e:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8005d12:	ed90 2a01 	vldr	s4, [r0, #4]
 8005d16:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005d1a:	ed91 6a01 	vldr	s12, [r1, #4]
 8005d1e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005d22:	f109 0910 	add.w	r9, r9, #16
 8005d26:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8005d2a:	f104 0408 	add.w	r4, r4, #8
 8005d2e:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8005d32:	f10e 0e18 	add.w	lr, lr, #24
 8005d36:	ee37 3a67 	vsub.f32	s6, s14, s15
 8005d3a:	f1a3 0308 	sub.w	r3, r3, #8
 8005d3e:	ed45 6a04 	vstr	s13, [r5, #-16]
 8005d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d46:	edd1 6a01 	vldr	s13, [r1, #4]
 8005d4a:	ee76 1a25 	vadd.f32	s3, s12, s11
 8005d4e:	edd0 4a01 	vldr	s9, [r0, #4]
 8005d52:	ee33 3a22 	vadd.f32	s6, s6, s5
 8005d56:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005d5a:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005d5e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005d62:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005d66:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8005d6a:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005d6e:	ed45 6a03 	vstr	s13, [r5, #-12]
 8005d72:	ee32 2a06 	vadd.f32	s4, s4, s12
 8005d76:	edd6 7a00 	vldr	s15, [r6]
 8005d7a:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005d7e:	ed97 1a00 	vldr	s2, [r7]
 8005d82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8005d86:	ed92 8a04 	vldr	s16, [r2, #16]
 8005d8a:	ee71 8a27 	vadd.f32	s17, s2, s15
 8005d8e:	ed93 aa04 	vldr	s20, [r3, #16]
 8005d92:	ed16 7a01 	vldr	s14, [r6, #-4]
 8005d96:	ee71 7a67 	vsub.f32	s15, s2, s15
 8005d9a:	ed57 0a01 	vldr	s1, [r7, #-4]
 8005d9e:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8005da2:	ee38 6a88 	vadd.f32	s12, s17, s16
 8005da6:	edd3 9a03 	vldr	s19, [r3, #12]
 8005daa:	ee30 0a87 	vadd.f32	s0, s1, s14
 8005dae:	ed92 9a03 	vldr	s18, [r2, #12]
 8005db2:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8005db6:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8005dba:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8005dbe:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8005dc2:	ee16 ca10 	vmov	ip, s12
 8005dc6:	ee30 6a49 	vsub.f32	s12, s0, s18
 8005dca:	ee71 4a07 	vadd.f32	s9, s2, s14
 8005dce:	f847 c908 	str.w	ip, [r7], #-8
 8005dd2:	ee34 4a29 	vadd.f32	s8, s8, s19
 8005dd6:	edd2 8a03 	vldr	s17, [r2, #12]
 8005dda:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8005dde:	ed93 8a03 	vldr	s16, [r3, #12]
 8005de2:	ee71 0a47 	vsub.f32	s1, s2, s14
 8005de6:	ee30 0a28 	vadd.f32	s0, s0, s17
 8005dea:	ee39 1a67 	vsub.f32	s2, s18, s15
 8005dee:	ee36 6a69 	vsub.f32	s12, s12, s19
 8005df2:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005df6:	ee75 5aca 	vsub.f32	s11, s11, s20
 8005dfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8005dfe:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8005e02:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8005e06:	ee21 8a80 	vmul.f32	s16, s3, s0
 8005e0a:	ee23 7a26 	vmul.f32	s14, s6, s13
 8005e0e:	ee64 7a26 	vmul.f32	s15, s8, s13
 8005e12:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8005e16:	ee24 4a00 	vmul.f32	s8, s8, s0
 8005e1a:	ee23 3a00 	vmul.f32	s6, s6, s0
 8005e1e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005e22:	ee24 0a80 	vmul.f32	s0, s9, s0
 8005e26:	ee38 7a07 	vadd.f32	s14, s16, s14
 8005e2a:	ee76 6a84 	vadd.f32	s13, s13, s8
 8005e2e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005e32:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005e36:	ee17 ca10 	vmov	ip, s14
 8005e3a:	f841 cb08 	str.w	ip, [r1], #8
 8005e3e:	ed01 3a01 	vstr	s6, [r1, #-4]
 8005e42:	ed82 0a04 	vstr	s0, [r2, #16]
 8005e46:	edc2 6a03 	vstr	s13, [r2, #12]
 8005e4a:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8005e4e:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8005e52:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8005e56:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8005e5a:	ee65 4a27 	vmul.f32	s9, s10, s15
 8005e5e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005e62:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8005e66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e6a:	ee25 5a26 	vmul.f32	s10, s10, s13
 8005e6e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e76:	ee34 6a24 	vadd.f32	s12, s8, s9
 8005e7a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8005e7e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005e82:	ee17 ca90 	vmov	ip, s15
 8005e86:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005e8a:	ed04 5a03 	vstr	s10, [r4, #-12]
 8005e8e:	f846 c908 	str.w	ip, [r6], #-8
 8005e92:	edc6 6a01 	vstr	s13, [r6, #4]
 8005e96:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8005e9a:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8005e9e:	ee62 5a27 	vmul.f32	s11, s4, s15
 8005ea2:	ee22 6a87 	vmul.f32	s12, s5, s14
 8005ea6:	ee22 2a07 	vmul.f32	s4, s4, s14
 8005eaa:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8005eae:	ee61 6a07 	vmul.f32	s13, s2, s14
 8005eb2:	ee20 7a87 	vmul.f32	s14, s1, s14
 8005eb6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005eba:	ee61 7a27 	vmul.f32	s15, s2, s15
 8005ebe:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005ec2:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8005ec6:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8005eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ece:	ee16 ca10 	vmov	ip, s12
 8005ed2:	f840 cb08 	str.w	ip, [r0], #8
 8005ed6:	ed40 2a01 	vstr	s5, [r0, #-4]
 8005eda:	edc3 0a04 	vstr	s1, [r3, #16]
 8005ede:	edc3 7a03 	vstr	s15, [r3, #12]
 8005ee2:	f47f aefc 	bne.w	8005cde <arm_cfft_radix8by4_f32+0x132>
 8005ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ee8:	9805      	ldr	r0, [sp, #20]
 8005eea:	00cb      	lsls	r3, r1, #3
 8005eec:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8005ef0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005ef4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005ef8:	4498      	add	r8, r3
 8005efa:	449c      	add	ip, r3
 8005efc:	9105      	str	r1, [sp, #20]
 8005efe:	9901      	ldr	r1, [sp, #4]
 8005f00:	4419      	add	r1, r3
 8005f02:	9101      	str	r1, [sp, #4]
 8005f04:	9906      	ldr	r1, [sp, #24]
 8005f06:	4419      	add	r1, r3
 8005f08:	9106      	str	r1, [sp, #24]
 8005f0a:	9908      	ldr	r1, [sp, #32]
 8005f0c:	4419      	add	r1, r3
 8005f0e:	9b07      	ldr	r3, [sp, #28]
 8005f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f14:	9108      	str	r1, [sp, #32]
 8005f16:	9307      	str	r3, [sp, #28]
 8005f18:	9a01      	ldr	r2, [sp, #4]
 8005f1a:	2304      	movs	r3, #4
 8005f1c:	9e08      	ldr	r6, [sp, #32]
 8005f1e:	edd2 6a00 	vldr	s13, [r2]
 8005f22:	ed96 4a00 	vldr	s8, [r6]
 8005f26:	edd8 7a00 	vldr	s15, [r8]
 8005f2a:	ee36 6a84 	vadd.f32	s12, s13, s8
 8005f2e:	eddc 2a00 	vldr	s5, [ip]
 8005f32:	ed96 7a01 	vldr	s14, [r6, #4]
 8005f36:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8005f3a:	edd2 6a01 	vldr	s13, [r2, #4]
 8005f3e:	ee76 4a27 	vadd.f32	s9, s12, s15
 8005f42:	ed98 2a01 	vldr	s4, [r8, #4]
 8005f46:	ee76 5a87 	vadd.f32	s11, s13, s14
 8005f4a:	ed9c 5a01 	vldr	s10, [ip, #4]
 8005f4e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005f52:	9d05      	ldr	r5, [sp, #20]
 8005f54:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8005f58:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8005f5c:	ee72 3a04 	vadd.f32	s7, s4, s8
 8005f60:	9804      	ldr	r0, [sp, #16]
 8005f62:	ee77 4a67 	vsub.f32	s9, s14, s15
 8005f66:	4621      	mov	r1, r4
 8005f68:	edc2 6a00 	vstr	s13, [r2]
 8005f6c:	ee76 6a67 	vsub.f32	s13, s12, s15
 8005f70:	ed98 3a01 	vldr	s6, [r8, #4]
 8005f74:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8005f78:	eddc 1a01 	vldr	s3, [ip, #4]
 8005f7c:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8005f80:	ee35 3a83 	vadd.f32	s6, s11, s6
 8005f84:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005f88:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005f8c:	ee73 5a21 	vadd.f32	s11, s6, s3
 8005f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f94:	ee36 6a45 	vsub.f32	s12, s12, s10
 8005f98:	edc2 5a01 	vstr	s11, [r2, #4]
 8005f9c:	ee35 5a04 	vadd.f32	s10, s10, s8
 8005fa0:	9a06      	ldr	r2, [sp, #24]
 8005fa2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005fa6:	edd2 7a00 	vldr	s15, [r2]
 8005faa:	edd2 5a01 	vldr	s11, [r2, #4]
 8005fae:	ee23 4aa7 	vmul.f32	s8, s7, s15
 8005fb2:	ee63 3aa5 	vmul.f32	s7, s7, s11
 8005fb6:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8005fba:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8005fbe:	ee77 7a62 	vsub.f32	s15, s14, s5
 8005fc2:	ee74 5a25 	vadd.f32	s11, s8, s11
 8005fc6:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8005fca:	edc8 5a00 	vstr	s11, [r8]
 8005fce:	edc8 4a01 	vstr	s9, [r8, #4]
 8005fd2:	edd5 4a01 	vldr	s9, [r5, #4]
 8005fd6:	ed95 7a00 	vldr	s14, [r5]
 8005fda:	9d07      	ldr	r5, [sp, #28]
 8005fdc:	ee66 5a87 	vmul.f32	s11, s13, s14
 8005fe0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8005fe4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005fe8:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005fec:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005ff0:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005ff4:	edc6 6a01 	vstr	s13, [r6, #4]
 8005ff8:	ed86 6a00 	vstr	s12, [r6]
 8005ffc:	ed95 6a01 	vldr	s12, [r5, #4]
 8006000:	ed95 7a00 	vldr	s14, [r5]
 8006004:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006006:	ee65 6a07 	vmul.f32	s13, s10, s14
 800600a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800600e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8006012:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006016:	ee37 5a45 	vsub.f32	s10, s14, s10
 800601a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8006022:	edcc 7a00 	vstr	s15, [ip]
 8006026:	6872      	ldr	r2, [r6, #4]
 8006028:	f000 f92e 	bl	8006288 <arm_radix8_butterfly_f32>
 800602c:	9802      	ldr	r0, [sp, #8]
 800602e:	4621      	mov	r1, r4
 8006030:	6872      	ldr	r2, [r6, #4]
 8006032:	2304      	movs	r3, #4
 8006034:	f000 f928 	bl	8006288 <arm_radix8_butterfly_f32>
 8006038:	980a      	ldr	r0, [sp, #40]	; 0x28
 800603a:	4621      	mov	r1, r4
 800603c:	6872      	ldr	r2, [r6, #4]
 800603e:	2304      	movs	r3, #4
 8006040:	f000 f922 	bl	8006288 <arm_radix8_butterfly_f32>
 8006044:	9803      	ldr	r0, [sp, #12]
 8006046:	4621      	mov	r1, r4
 8006048:	6872      	ldr	r2, [r6, #4]
 800604a:	2304      	movs	r3, #4
 800604c:	b00f      	add	sp, #60	; 0x3c
 800604e:	ecbd 8b06 	vpop	{d8-d10}
 8006052:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006056:	f000 b917 	b.w	8006288 <arm_radix8_butterfly_f32>
 800605a:	bf00      	nop

0800605c <arm_cfft_f32>:
 800605c:	2a01      	cmp	r2, #1
 800605e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006062:	4606      	mov	r6, r0
 8006064:	4617      	mov	r7, r2
 8006066:	460c      	mov	r4, r1
 8006068:	4698      	mov	r8, r3
 800606a:	8805      	ldrh	r5, [r0, #0]
 800606c:	d053      	beq.n	8006116 <arm_cfft_f32+0xba>
 800606e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006072:	d04b      	beq.n	800610c <arm_cfft_f32+0xb0>
 8006074:	d916      	bls.n	80060a4 <arm_cfft_f32+0x48>
 8006076:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800607a:	d01a      	beq.n	80060b2 <arm_cfft_f32+0x56>
 800607c:	d95a      	bls.n	8006134 <arm_cfft_f32+0xd8>
 800607e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006082:	d043      	beq.n	800610c <arm_cfft_f32+0xb0>
 8006084:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8006088:	d105      	bne.n	8006096 <arm_cfft_f32+0x3a>
 800608a:	4620      	mov	r0, r4
 800608c:	4629      	mov	r1, r5
 800608e:	6872      	ldr	r2, [r6, #4]
 8006090:	2301      	movs	r3, #1
 8006092:	f000 f8f9 	bl	8006288 <arm_radix8_butterfly_f32>
 8006096:	f1b8 0f00 	cmp.w	r8, #0
 800609a:	d111      	bne.n	80060c0 <arm_cfft_f32+0x64>
 800609c:	2f01      	cmp	r7, #1
 800609e:	d016      	beq.n	80060ce <arm_cfft_f32+0x72>
 80060a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a4:	2d20      	cmp	r5, #32
 80060a6:	d031      	beq.n	800610c <arm_cfft_f32+0xb0>
 80060a8:	d948      	bls.n	800613c <arm_cfft_f32+0xe0>
 80060aa:	2d40      	cmp	r5, #64	; 0x40
 80060ac:	d0ed      	beq.n	800608a <arm_cfft_f32+0x2e>
 80060ae:	2d80      	cmp	r5, #128	; 0x80
 80060b0:	d1f1      	bne.n	8006096 <arm_cfft_f32+0x3a>
 80060b2:	4630      	mov	r0, r6
 80060b4:	4621      	mov	r1, r4
 80060b6:	f7ff fca7 	bl	8005a08 <arm_cfft_radix8by2_f32>
 80060ba:	f1b8 0f00 	cmp.w	r8, #0
 80060be:	d0ed      	beq.n	800609c <arm_cfft_f32+0x40>
 80060c0:	4620      	mov	r0, r4
 80060c2:	89b1      	ldrh	r1, [r6, #12]
 80060c4:	68b2      	ldr	r2, [r6, #8]
 80060c6:	f7fa f8a3 	bl	8000210 <arm_bitreversal_32>
 80060ca:	2f01      	cmp	r7, #1
 80060cc:	d1e8      	bne.n	80060a0 <arm_cfft_f32+0x44>
 80060ce:	ee07 5a90 	vmov	s15, r5
 80060d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80060da:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80060de:	2d00      	cmp	r5, #0
 80060e0:	d0de      	beq.n	80060a0 <arm_cfft_f32+0x44>
 80060e2:	f104 0108 	add.w	r1, r4, #8
 80060e6:	2300      	movs	r3, #0
 80060e8:	ed11 7a02 	vldr	s14, [r1, #-8]
 80060ec:	3301      	adds	r3, #1
 80060ee:	ed51 7a01 	vldr	s15, [r1, #-4]
 80060f2:	3108      	adds	r1, #8
 80060f4:	429d      	cmp	r5, r3
 80060f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80060fa:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80060fe:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006102:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006106:	d1ef      	bne.n	80060e8 <arm_cfft_f32+0x8c>
 8006108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800610c:	4630      	mov	r0, r6
 800610e:	4621      	mov	r1, r4
 8006110:	f7ff fd4c 	bl	8005bac <arm_cfft_radix8by4_f32>
 8006114:	e7bf      	b.n	8006096 <arm_cfft_f32+0x3a>
 8006116:	b1a5      	cbz	r5, 8006142 <arm_cfft_f32+0xe6>
 8006118:	f101 030c 	add.w	r3, r1, #12
 800611c:	2200      	movs	r2, #0
 800611e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006122:	3201      	adds	r2, #1
 8006124:	3308      	adds	r3, #8
 8006126:	eef1 7a67 	vneg.f32	s15, s15
 800612a:	4295      	cmp	r5, r2
 800612c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006130:	d1f5      	bne.n	800611e <arm_cfft_f32+0xc2>
 8006132:	e79c      	b.n	800606e <arm_cfft_f32+0x12>
 8006134:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006138:	d0a7      	beq.n	800608a <arm_cfft_f32+0x2e>
 800613a:	e7ac      	b.n	8006096 <arm_cfft_f32+0x3a>
 800613c:	2d10      	cmp	r5, #16
 800613e:	d0b8      	beq.n	80060b2 <arm_cfft_f32+0x56>
 8006140:	e7a9      	b.n	8006096 <arm_cfft_f32+0x3a>
 8006142:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006146:	d896      	bhi.n	8006076 <arm_cfft_f32+0x1a>
 8006148:	e7ac      	b.n	80060a4 <arm_cfft_f32+0x48>
 800614a:	bf00      	nop

0800614c <arm_cmplx_mag_squared_f32>:
 800614c:	b470      	push	{r4, r5, r6}
 800614e:	0896      	lsrs	r6, r2, #2
 8006150:	d03e      	beq.n	80061d0 <arm_cmplx_mag_squared_f32+0x84>
 8006152:	f100 0320 	add.w	r3, r0, #32
 8006156:	f101 0410 	add.w	r4, r1, #16
 800615a:	4635      	mov	r5, r6
 800615c:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8006160:	3d01      	subs	r5, #1
 8006162:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8006166:	f104 0410 	add.w	r4, r4, #16
 800616a:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 800616e:	ee27 5a07 	vmul.f32	s10, s14, s14
 8006172:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8006176:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800617a:	ed13 7a04 	vldr	s14, [r3, #-16]
 800617e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8006182:	ed13 4a03 	vldr	s8, [r3, #-12]
 8006186:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800618a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800618e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8006192:	ed53 4a01 	vldr	s9, [r3, #-4]
 8006196:	ee24 4a04 	vmul.f32	s8, s8, s8
 800619a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800619e:	f103 0320 	add.w	r3, r3, #32
 80061a2:	ee64 4aa4 	vmul.f32	s9, s9, s9
 80061a6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80061aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80061ae:	ee37 7a04 	vadd.f32	s14, s14, s8
 80061b2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80061b6:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 80061ba:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 80061be:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 80061c2:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80061c6:	d1c9      	bne.n	800615c <arm_cmplx_mag_squared_f32+0x10>
 80061c8:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 80061cc:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80061d0:	f012 0203 	ands.w	r2, r2, #3
 80061d4:	d010      	beq.n	80061f8 <arm_cmplx_mag_squared_f32+0xac>
 80061d6:	3008      	adds	r0, #8
 80061d8:	ed50 7a02 	vldr	s15, [r0, #-8]
 80061dc:	3a01      	subs	r2, #1
 80061de:	ed10 7a01 	vldr	s14, [r0, #-4]
 80061e2:	f100 0008 	add.w	r0, r0, #8
 80061e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061ea:	ee27 7a07 	vmul.f32	s14, s14, s14
 80061ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061f2:	ece1 7a01 	vstmia	r1!, {s15}
 80061f6:	d1ef      	bne.n	80061d8 <arm_cmplx_mag_squared_f32+0x8c>
 80061f8:	bc70      	pop	{r4, r5, r6}
 80061fa:	4770      	bx	lr

080061fc <arm_mult_f32>:
 80061fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061fe:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8006202:	d033      	beq.n	800626c <arm_mult_f32+0x70>
 8006204:	f100 0610 	add.w	r6, r0, #16
 8006208:	f101 0510 	add.w	r5, r1, #16
 800620c:	f102 0410 	add.w	r4, r2, #16
 8006210:	4677      	mov	r7, lr
 8006212:	ed16 7a04 	vldr	s14, [r6, #-16]
 8006216:	3f01      	subs	r7, #1
 8006218:	ed15 6a04 	vldr	s12, [r5, #-16]
 800621c:	f106 0610 	add.w	r6, r6, #16
 8006220:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8006224:	f105 0510 	add.w	r5, r5, #16
 8006228:	ee27 6a06 	vmul.f32	s12, s14, s12
 800622c:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8006230:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 8006234:	f104 0410 	add.w	r4, r4, #16
 8006238:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800623c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006240:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8006244:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8006248:	ee27 7a25 	vmul.f32	s14, s14, s11
 800624c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8006250:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8006254:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006258:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800625c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8006260:	d1d7      	bne.n	8006212 <arm_mult_f32+0x16>
 8006262:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006266:	4420      	add	r0, r4
 8006268:	4421      	add	r1, r4
 800626a:	4422      	add	r2, r4
 800626c:	f013 0303 	ands.w	r3, r3, #3
 8006270:	d009      	beq.n	8006286 <arm_mult_f32+0x8a>
 8006272:	ecf0 7a01 	vldmia	r0!, {s15}
 8006276:	3b01      	subs	r3, #1
 8006278:	ecb1 7a01 	vldmia	r1!, {s14}
 800627c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006280:	ece2 7a01 	vstmia	r2!, {s15}
 8006284:	d1f5      	bne.n	8006272 <arm_mult_f32+0x76>
 8006286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006288 <arm_radix8_butterfly_f32>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	469e      	mov	lr, r3
 800628e:	1d03      	adds	r3, r0, #4
 8006290:	4683      	mov	fp, r0
 8006292:	468a      	mov	sl, r1
 8006294:	4688      	mov	r8, r1
 8006296:	469c      	mov	ip, r3
 8006298:	ed2d 8b10 	vpush	{d8-d15}
 800629c:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 80065b0 <arm_radix8_butterfly_f32+0x328>
 80062a0:	b09f      	sub	sp, #124	; 0x7c
 80062a2:	921c      	str	r2, [sp, #112]	; 0x70
 80062a4:	931d      	str	r3, [sp, #116]	; 0x74
 80062a6:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 80062aa:	f04f 0900 	mov.w	r9, #0
 80062ae:	461a      	mov	r2, r3
 80062b0:	930e      	str	r3, [sp, #56]	; 0x38
 80062b2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80062b6:	0051      	lsls	r1, r2, #1
 80062b8:	4608      	mov	r0, r1
 80062ba:	9103      	str	r1, [sp, #12]
 80062bc:	00d1      	lsls	r1, r2, #3
 80062be:	1885      	adds	r5, r0, r2
 80062c0:	0110      	lsls	r0, r2, #4
 80062c2:	eb0b 0601 	add.w	r6, fp, r1
 80062c6:	9101      	str	r1, [sp, #4]
 80062c8:	18ac      	adds	r4, r5, r2
 80062ca:	9002      	str	r0, [sp, #8]
 80062cc:	1877      	adds	r7, r6, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	4422      	add	r2, r4
 80062d2:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 80062d6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80062da:	1850      	adds	r0, r2, r1
 80062dc:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80062e0:	4401      	add	r1, r0
 80062e2:	3204      	adds	r2, #4
 80062e4:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 80062e8:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 80062ec:	3104      	adds	r1, #4
 80062ee:	ed1c 7a01 	vldr	s14, [ip, #-4]
 80062f2:	44c1      	add	r9, r8
 80062f4:	edd4 6a00 	vldr	s13, [r4]
 80062f8:	ed97 6a00 	vldr	s12, [r7]
 80062fc:	45ca      	cmp	sl, r9
 80062fe:	edd0 7a00 	vldr	s15, [r0]
 8006302:	ee37 5a66 	vsub.f32	s10, s14, s13
 8006306:	edd6 5a00 	vldr	s11, [r6]
 800630a:	ee37 2a26 	vadd.f32	s4, s14, s13
 800630e:	ee76 2a67 	vsub.f32	s5, s12, s15
 8006312:	edd5 6a00 	vldr	s13, [r5]
 8006316:	ed12 7a01 	vldr	s14, [r2, #-4]
 800631a:	ee76 4a27 	vadd.f32	s9, s12, s15
 800631e:	ed11 6a01 	vldr	s12, [r1, #-4]
 8006322:	ee75 1a87 	vadd.f32	s3, s11, s14
 8006326:	ee36 4a86 	vadd.f32	s8, s13, s12
 800632a:	ee72 7a24 	vadd.f32	s15, s4, s9
 800632e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006332:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8006336:	ee31 6a84 	vadd.f32	s12, s3, s8
 800633a:	ee32 2a64 	vsub.f32	s4, s4, s9
 800633e:	ee77 6a65 	vsub.f32	s13, s14, s11
 8006342:	ee77 4a86 	vadd.f32	s9, s15, s12
 8006346:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800634a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800634e:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8006352:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8006356:	edc4 7a00 	vstr	s15, [r4]
 800635a:	ee66 6a89 	vmul.f32	s13, s13, s18
 800635e:	edd6 5a01 	vldr	s11, [r6, #4]
 8006362:	ee27 6a09 	vmul.f32	s12, s14, s18
 8006366:	edd5 3a01 	vldr	s7, [r5, #4]
 800636a:	ed92 4a00 	vldr	s8, [r2]
 800636e:	ee35 1a26 	vadd.f32	s2, s10, s13
 8006372:	edd1 4a00 	vldr	s9, [r1]
 8006376:	ee75 6a66 	vsub.f32	s13, s10, s13
 800637a:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800637e:	ed94 0a01 	vldr	s0, [r4, #4]
 8006382:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8006386:	ed9c 7a00 	vldr	s14, [ip]
 800638a:	edd0 0a01 	vldr	s1, [r0, #4]
 800638e:	ee35 4a84 	vadd.f32	s8, s11, s8
 8006392:	ed97 5a01 	vldr	s10, [r7, #4]
 8006396:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800639a:	ee73 5a27 	vadd.f32	s11, s6, s15
 800639e:	ee77 3a00 	vadd.f32	s7, s14, s0
 80063a2:	ee33 3a67 	vsub.f32	s6, s6, s15
 80063a6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80063aa:	ee35 0a20 	vadd.f32	s0, s10, s1
 80063ae:	ee63 7a09 	vmul.f32	s15, s6, s18
 80063b2:	ee35 5a60 	vsub.f32	s10, s10, s1
 80063b6:	ee33 3a80 	vadd.f32	s6, s7, s0
 80063ba:	ee74 0a24 	vadd.f32	s1, s8, s9
 80063be:	ee65 5a89 	vmul.f32	s11, s11, s18
 80063c2:	ee74 4a64 	vsub.f32	s9, s8, s9
 80063c6:	ee33 4ac0 	vsub.f32	s8, s7, s0
 80063ca:	ee75 3a25 	vadd.f32	s7, s10, s11
 80063ce:	ee75 5a65 	vsub.f32	s11, s10, s11
 80063d2:	ee37 5a27 	vadd.f32	s10, s14, s15
 80063d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063da:	ee32 7a86 	vadd.f32	s14, s5, s12
 80063de:	ee32 6ac6 	vsub.f32	s12, s5, s12
 80063e2:	ee73 2a20 	vadd.f32	s5, s6, s1
 80063e6:	ee33 3a60 	vsub.f32	s6, s6, s1
 80063ea:	ee72 0a24 	vadd.f32	s1, s4, s9
 80063ee:	edcc 2a00 	vstr	s5, [ip]
 80063f2:	ee72 4a64 	vsub.f32	s9, s4, s9
 80063f6:	ed84 3a01 	vstr	s6, [r4, #4]
 80063fa:	ee74 2a61 	vsub.f32	s5, s8, s3
 80063fe:	ee31 3a23 	vadd.f32	s6, s2, s7
 8006402:	edc7 0a00 	vstr	s1, [r7]
 8006406:	ee31 1a63 	vsub.f32	s2, s2, s7
 800640a:	edc0 4a00 	vstr	s9, [r0]
 800640e:	ee76 3aa5 	vadd.f32	s7, s13, s11
 8006412:	edc7 2a01 	vstr	s5, [r7, #4]
 8006416:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800641a:	441c      	add	r4, r3
 800641c:	ee75 5a47 	vsub.f32	s11, s10, s14
 8006420:	449c      	add	ip, r3
 8006422:	ee35 5a07 	vadd.f32	s10, s10, s14
 8006426:	441f      	add	r7, r3
 8006428:	ee37 7ac6 	vsub.f32	s14, s15, s12
 800642c:	ee34 4a21 	vadd.f32	s8, s8, s3
 8006430:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006434:	ed80 4a01 	vstr	s8, [r0, #4]
 8006438:	4418      	add	r0, r3
 800643a:	ed86 3a00 	vstr	s6, [r6]
 800643e:	ed01 1a01 	vstr	s2, [r1, #-4]
 8006442:	ed42 3a01 	vstr	s7, [r2, #-4]
 8006446:	edc5 6a00 	vstr	s13, [r5]
 800644a:	edc6 5a01 	vstr	s11, [r6, #4]
 800644e:	441e      	add	r6, r3
 8006450:	ed81 5a00 	vstr	s10, [r1]
 8006454:	4419      	add	r1, r3
 8006456:	ed82 7a00 	vstr	s14, [r2]
 800645a:	441a      	add	r2, r3
 800645c:	edc5 7a01 	vstr	s15, [r5, #4]
 8006460:	441d      	add	r5, r3
 8006462:	f63f af44 	bhi.w	80062ee <arm_radix8_butterfly_f32+0x66>
 8006466:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006468:	2f07      	cmp	r7, #7
 800646a:	f240 81e8 	bls.w	800683e <arm_radix8_butterfly_f32+0x5b6>
 800646e:	9903      	ldr	r1, [sp, #12]
 8006470:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8006474:	9e01      	ldr	r6, [sp, #4]
 8006476:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 800647a:	19ca      	adds	r2, r1, r7
 800647c:	1c4c      	adds	r4, r1, #1
 800647e:	eb05 010e 	add.w	r1, r5, lr
 8006482:	00ed      	lsls	r5, r5, #3
 8006484:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8006488:	3608      	adds	r6, #8
 800648a:	950f      	str	r5, [sp, #60]	; 0x3c
 800648c:	eb01 050e 	add.w	r5, r1, lr
 8006490:	00c9      	lsls	r1, r1, #3
 8006492:	443c      	add	r4, r7
 8006494:	9618      	str	r6, [sp, #96]	; 0x60
 8006496:	00ee      	lsls	r6, r5, #3
 8006498:	460f      	mov	r7, r1
 800649a:	9114      	str	r1, [sp, #80]	; 0x50
 800649c:	9902      	ldr	r1, [sp, #8]
 800649e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80064a2:	9611      	str	r6, [sp, #68]	; 0x44
 80064a4:	00c0      	lsls	r0, r0, #3
 80064a6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80064a8:	3108      	adds	r1, #8
 80064aa:	3404      	adds	r4, #4
 80064ac:	f04f 0901 	mov.w	r9, #1
 80064b0:	9119      	str	r1, [sp, #100]	; 0x64
 80064b2:	eb05 010e 	add.w	r1, r5, lr
 80064b6:	4635      	mov	r5, r6
 80064b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	443d      	add	r5, r7
 80064be:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80064c0:	9507      	str	r5, [sp, #28]
 80064c2:	eb01 050e 	add.w	r5, r1, lr
 80064c6:	00c9      	lsls	r1, r1, #3
 80064c8:	19f7      	adds	r7, r6, r7
 80064ca:	00ed      	lsls	r5, r5, #3
 80064cc:	9110      	str	r1, [sp, #64]	; 0x40
 80064ce:	00d1      	lsls	r1, r2, #3
 80064d0:	970a      	str	r7, [sp, #40]	; 0x28
 80064d2:	462f      	mov	r7, r5
 80064d4:	9515      	str	r5, [sp, #84]	; 0x54
 80064d6:	0112      	lsls	r2, r2, #4
 80064d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80064da:	19f4      	adds	r4, r6, r7
 80064dc:	320c      	adds	r2, #12
 80064de:	3108      	adds	r1, #8
 80064e0:	1975      	adds	r5, r6, r5
 80064e2:	9408      	str	r4, [sp, #32]
 80064e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80064e6:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80064ea:	9509      	str	r5, [sp, #36]	; 0x24
 80064ec:	f100 020c 	add.w	r2, r0, #12
 80064f0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80064f2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80064f4:	1975      	adds	r5, r6, r5
 80064f6:	9216      	str	r2, [sp, #88]	; 0x58
 80064f8:	1932      	adds	r2, r6, r4
 80064fa:	911b      	str	r1, [sp, #108]	; 0x6c
 80064fc:	9505      	str	r5, [sp, #20]
 80064fe:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8006502:	0179      	lsls	r1, r7, #5
 8006504:	9204      	str	r2, [sp, #16]
 8006506:	1972      	adds	r2, r6, r5
 8006508:	9412      	str	r4, [sp, #72]	; 0x48
 800650a:	9513      	str	r5, [sp, #76]	; 0x4c
 800650c:	9206      	str	r2, [sp, #24]
 800650e:	f101 0208 	add.w	r2, r1, #8
 8006512:	921a      	str	r2, [sp, #104]	; 0x68
 8006514:	2200      	movs	r2, #0
 8006516:	f102 0108 	add.w	r1, r2, #8
 800651a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800651c:	46cc      	mov	ip, r9
 800651e:	460f      	mov	r7, r1
 8006520:	910c      	str	r1, [sp, #48]	; 0x30
 8006522:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006524:	eb0b 0e07 	add.w	lr, fp, r7
 8006528:	9f04      	ldr	r7, [sp, #16]
 800652a:	188e      	adds	r6, r1, r2
 800652c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800652e:	edd7 fa00 	vldr	s31, [r7]
 8006532:	9f06      	ldr	r7, [sp, #24]
 8006534:	188d      	adds	r5, r1, r2
 8006536:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006538:	445e      	add	r6, fp
 800653a:	ed97 fa00 	vldr	s30, [r7]
 800653e:	445d      	add	r5, fp
 8006540:	9f05      	ldr	r7, [sp, #20]
 8006542:	188c      	adds	r4, r1, r2
 8006544:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006546:	edd7 ea00 	vldr	s29, [r7]
 800654a:	445c      	add	r4, fp
 800654c:	9f07      	ldr	r7, [sp, #28]
 800654e:	1888      	adds	r0, r1, r2
 8006550:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006552:	ed97 ea00 	vldr	s28, [r7]
 8006556:	4458      	add	r0, fp
 8006558:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800655a:	4411      	add	r1, r2
 800655c:	441a      	add	r2, r3
 800655e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006560:	edd7 da00 	vldr	s27, [r7]
 8006564:	4459      	add	r1, fp
 8006566:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006568:	445a      	add	r2, fp
 800656a:	930d      	str	r3, [sp, #52]	; 0x34
 800656c:	ed97 da00 	vldr	s26, [r7]
 8006570:	9f08      	ldr	r7, [sp, #32]
 8006572:	edd7 ca00 	vldr	s25, [r7]
 8006576:	9f04      	ldr	r7, [sp, #16]
 8006578:	ed97 ca01 	vldr	s24, [r7, #4]
 800657c:	9f06      	ldr	r7, [sp, #24]
 800657e:	edd7 ba01 	vldr	s23, [r7, #4]
 8006582:	9f05      	ldr	r7, [sp, #20]
 8006584:	ed97 ba01 	vldr	s22, [r7, #4]
 8006588:	9f07      	ldr	r7, [sp, #28]
 800658a:	edd7 aa01 	vldr	s21, [r7, #4]
 800658e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006590:	ed97 aa01 	vldr	s20, [r7, #4]
 8006594:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006596:	9b01      	ldr	r3, [sp, #4]
 8006598:	edd7 7a01 	vldr	s15, [r7, #4]
 800659c:	9f08      	ldr	r7, [sp, #32]
 800659e:	edcd 7a02 	vstr	s15, [sp, #8]
 80065a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80065a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80065a8:	edcd 7a03 	vstr	s15, [sp, #12]
 80065ac:	e002      	b.n	80065b4 <arm_radix8_butterfly_f32+0x32c>
 80065ae:	bf00      	nop
 80065b0:	3f3504f3 	.word	0x3f3504f3
 80065b4:	ed90 2a00 	vldr	s4, [r0]
 80065b8:	44c4      	add	ip, r8
 80065ba:	ed96 7a00 	vldr	s14, [r6]
 80065be:	ed94 8a00 	vldr	s16, [r4]
 80065c2:	45e2      	cmp	sl, ip
 80065c4:	ed52 7a01 	vldr	s15, [r2, #-4]
 80065c8:	ed95 5a00 	vldr	s10, [r5]
 80065cc:	ed51 5a01 	vldr	s11, [r1, #-4]
 80065d0:	ee38 6a27 	vadd.f32	s12, s16, s15
 80065d4:	ed9e 1a00 	vldr	s2, [lr]
 80065d8:	ee78 2a67 	vsub.f32	s5, s16, s15
 80065dc:	ed17 4a01 	vldr	s8, [r7, #-4]
 80065e0:	ee75 3a25 	vadd.f32	s7, s10, s11
 80065e4:	ee31 3a07 	vadd.f32	s6, s2, s14
 80065e8:	edde 4a01 	vldr	s9, [lr, #4]
 80065ec:	ee72 6a04 	vadd.f32	s13, s4, s8
 80065f0:	ee75 5a65 	vsub.f32	s11, s10, s11
 80065f4:	ee73 1a06 	vadd.f32	s3, s6, s12
 80065f8:	ee33 5aa6 	vadd.f32	s10, s7, s13
 80065fc:	ee32 4a44 	vsub.f32	s8, s4, s8
 8006600:	ee31 1a47 	vsub.f32	s2, s2, s14
 8006604:	ee31 7a85 	vadd.f32	s14, s3, s10
 8006608:	ee75 7a84 	vadd.f32	s15, s11, s8
 800660c:	ee33 3a46 	vsub.f32	s6, s6, s12
 8006610:	ed8e 7a00 	vstr	s14, [lr]
 8006614:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8006618:	ee67 7a89 	vmul.f32	s15, s15, s18
 800661c:	ed90 2a01 	vldr	s4, [r0, #4]
 8006620:	ed95 7a01 	vldr	s14, [r5, #4]
 8006624:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8006628:	ed91 6a00 	vldr	s12, [r1]
 800662c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8006630:	edd7 8a00 	vldr	s17, [r7]
 8006634:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8006638:	ee72 5aa7 	vadd.f32	s11, s5, s15
 800663c:	edd2 0a00 	vldr	s1, [r2]
 8006640:	ee72 6a68 	vsub.f32	s13, s4, s17
 8006644:	edd6 7a01 	vldr	s15, [r6, #4]
 8006648:	ee77 2a46 	vsub.f32	s5, s14, s12
 800664c:	ee37 0a06 	vadd.f32	s0, s14, s12
 8006650:	ed94 7a01 	vldr	s14, [r4, #4]
 8006654:	ee32 6a28 	vadd.f32	s12, s4, s17
 8006658:	ee72 9ae6 	vsub.f32	s19, s5, s13
 800665c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8006660:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8006664:	ee77 6a20 	vadd.f32	s13, s14, s1
 8006668:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800666c:	ee37 7a60 	vsub.f32	s14, s14, s1
 8006670:	ee24 4a09 	vmul.f32	s8, s8, s18
 8006674:	ee70 0a06 	vadd.f32	s1, s0, s12
 8006678:	ee69 7a89 	vmul.f32	s15, s19, s18
 800667c:	ee62 2a89 	vmul.f32	s5, s5, s18
 8006680:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006684:	ee32 0a26 	vadd.f32	s0, s4, s13
 8006688:	ee72 6a66 	vsub.f32	s13, s4, s13
 800668c:	ee77 8a62 	vsub.f32	s17, s14, s5
 8006690:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8006694:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8006698:	ee77 4a22 	vadd.f32	s9, s14, s5
 800669c:	ee71 2a04 	vadd.f32	s5, s2, s8
 80066a0:	ee31 7a44 	vsub.f32	s14, s2, s8
 80066a4:	ee30 1a60 	vsub.f32	s2, s0, s1
 80066a8:	ee73 1a06 	vadd.f32	s3, s6, s12
 80066ac:	ee33 6a46 	vsub.f32	s12, s6, s12
 80066b0:	ee36 3ae3 	vsub.f32	s6, s13, s7
 80066b4:	ee37 4ac8 	vsub.f32	s8, s15, s16
 80066b8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80066bc:	ee77 7a88 	vadd.f32	s15, s15, s16
 80066c0:	ee72 3a65 	vsub.f32	s7, s4, s11
 80066c4:	ee2a 8a81 	vmul.f32	s16, s21, s2
 80066c8:	ee72 5a25 	vadd.f32	s11, s4, s11
 80066cc:	ee2e 1a01 	vmul.f32	s2, s28, s2
 80066d0:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80066d4:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80066d8:	ee77 2a28 	vadd.f32	s5, s14, s17
 80066dc:	ee37 7a68 	vsub.f32	s14, s14, s17
 80066e0:	ee6e 8a05 	vmul.f32	s17, s28, s10
 80066e4:	ee2a 5a85 	vmul.f32	s10, s21, s10
 80066e8:	ee6f 9a21 	vmul.f32	s19, s30, s3
 80066ec:	ee70 0a20 	vadd.f32	s1, s0, s1
 80066f0:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 80066f4:	ee2b 0a83 	vmul.f32	s0, s23, s6
 80066f8:	ee2f 3a03 	vmul.f32	s6, s30, s6
 80066fc:	edce 0a01 	vstr	s1, [lr, #4]
 8006700:	ee38 8a88 	vadd.f32	s16, s17, s16
 8006704:	449e      	add	lr, r3
 8006706:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800670a:	ee31 5a45 	vsub.f32	s10, s2, s10
 800670e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8006712:	ed86 8a00 	vstr	s16, [r6]
 8006716:	ee39 0a80 	vadd.f32	s0, s19, s0
 800671a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800671e:	ed86 5a01 	vstr	s10, [r6, #4]
 8006722:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8006726:	edcd 3a01 	vstr	s7, [sp, #4]
 800672a:	ed9d 5a03 	vldr	s10, [sp, #12]
 800672e:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8006732:	eddd 3a02 	vldr	s7, [sp, #8]
 8006736:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800673a:	ed84 0a00 	vstr	s0, [r4]
 800673e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8006742:	ed84 3a01 	vstr	s6, [r4, #4]
 8006746:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800674a:	ee23 6a86 	vmul.f32	s12, s7, s12
 800674e:	eddd 3a01 	vldr	s7, [sp, #4]
 8006752:	ee25 5a25 	vmul.f32	s10, s10, s11
 8006756:	441e      	add	r6, r3
 8006758:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800675c:	441c      	add	r4, r3
 800675e:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8006762:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8006766:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800676a:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800676e:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8006772:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8006776:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800677a:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800677e:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8006782:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8006786:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800678a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800678e:	ee38 8a01 	vadd.f32	s16, s16, s2
 8006792:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8006796:	ee39 5a85 	vadd.f32	s10, s19, s10
 800679a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800679e:	ed02 8a01 	vstr	s16, [r2, #-4]
 80067a2:	ee30 0a21 	vadd.f32	s0, s0, s3
 80067a6:	ed82 6a00 	vstr	s12, [r2]
 80067aa:	ee74 2a62 	vsub.f32	s5, s8, s5
 80067ae:	edc5 0a00 	vstr	s1, [r5]
 80067b2:	ee33 3a28 	vadd.f32	s6, s6, s17
 80067b6:	edc5 3a01 	vstr	s7, [r5, #4]
 80067ba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80067be:	ed07 5a01 	vstr	s10, [r7, #-4]
 80067c2:	edc7 4a00 	vstr	s9, [r7]
 80067c6:	441d      	add	r5, r3
 80067c8:	ed01 0a01 	vstr	s0, [r1, #-4]
 80067cc:	441a      	add	r2, r3
 80067ce:	edc1 2a00 	vstr	s5, [r1]
 80067d2:	441f      	add	r7, r3
 80067d4:	ed80 3a00 	vstr	s6, [r0]
 80067d8:	4419      	add	r1, r3
 80067da:	ed80 7a01 	vstr	s14, [r0, #4]
 80067de:	4418      	add	r0, r3
 80067e0:	f63f aee8 	bhi.w	80065b4 <arm_radix8_butterfly_f32+0x32c>
 80067e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067e6:	f109 0901 	add.w	r9, r9, #1
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	9b04      	ldr	r3, [sp, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067f2:	9304      	str	r3, [sp, #16]
 80067f4:	9b06      	ldr	r3, [sp, #24]
 80067f6:	4413      	add	r3, r2
 80067f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067fa:	9306      	str	r3, [sp, #24]
 80067fc:	9b05      	ldr	r3, [sp, #20]
 80067fe:	4413      	add	r3, r2
 8006800:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006802:	9305      	str	r3, [sp, #20]
 8006804:	9b07      	ldr	r3, [sp, #28]
 8006806:	4413      	add	r3, r2
 8006808:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800680a:	9307      	str	r3, [sp, #28]
 800680c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680e:	4413      	add	r3, r2
 8006810:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006812:	930a      	str	r3, [sp, #40]	; 0x28
 8006814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006816:	4413      	add	r3, r2
 8006818:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800681a:	9309      	str	r3, [sp, #36]	; 0x24
 800681c:	9b08      	ldr	r3, [sp, #32]
 800681e:	4413      	add	r3, r2
 8006820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006822:	9308      	str	r3, [sp, #32]
 8006824:	3208      	adds	r2, #8
 8006826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006828:	920b      	str	r2, [sp, #44]	; 0x2c
 800682a:	4599      	cmp	r9, r3
 800682c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800682e:	f47f ae72 	bne.w	8006516 <arm_radix8_butterfly_f32+0x28e>
 8006832:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 8006836:	46c8      	mov	r8, r9
 8006838:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 800683c:	e533      	b.n	80062a6 <arm_radix8_butterfly_f32+0x1e>
 800683e:	b01f      	add	sp, #124	; 0x7c
 8006840:	ecbd 8b10 	vpop	{d8-d15}
 8006844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006848 <ai_platform_runtime_get_revision>:
 8006848:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <ai_platform_runtime_get_revision+0x74>)
 800684a:	491d      	ldr	r1, [pc, #116]	; (80068c0 <ai_platform_runtime_get_revision+0x78>)
 800684c:	6813      	ldr	r3, [r2, #0]
 800684e:	f023 0301 	bic.w	r3, r3, #1
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006858:	680b      	ldr	r3, [r1, #0]
 800685a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800685e:	189a      	adds	r2, r3, r2
 8006860:	2a01      	cmp	r2, #1
 8006862:	d90c      	bls.n	800687e <ai_platform_runtime_get_revision+0x36>
 8006864:	f240 4249 	movw	r2, #1097	; 0x449
 8006868:	4293      	cmp	r3, r2
 800686a:	d008      	beq.n	800687e <ai_platform_runtime_get_revision+0x36>
 800686c:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <ai_platform_runtime_get_revision+0x7c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006874:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006878:	d010      	beq.n	800689c <ai_platform_runtime_get_revision+0x54>
 800687a:	4813      	ldr	r0, [pc, #76]	; (80068c8 <ai_platform_runtime_get_revision+0x80>)
 800687c:	4770      	bx	lr
 800687e:	4b13      	ldr	r3, [pc, #76]	; (80068cc <ai_platform_runtime_get_revision+0x84>)
 8006880:	2201      	movs	r2, #1
 8006882:	4619      	mov	r1, r3
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	680b      	ldr	r3, [r1, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1fc      	bne.n	8006886 <ai_platform_runtime_get_revision+0x3e>
 800688c:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <ai_platform_runtime_get_revision+0x88>)
 800688e:	4911      	ldr	r1, [pc, #68]	; (80068d4 <ai_platform_runtime_get_revision+0x8c>)
 8006890:	4a11      	ldr	r2, [pc, #68]	; (80068d8 <ai_platform_runtime_get_revision+0x90>)
 8006892:	6019      	str	r1, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4293      	cmp	r3, r2
 8006898:	d0ef      	beq.n	800687a <ai_platform_runtime_get_revision+0x32>
 800689a:	e7fe      	b.n	800689a <ai_platform_runtime_get_revision+0x52>
 800689c:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <ai_platform_runtime_get_revision+0x94>)
 800689e:	2201      	movs	r2, #1
 80068a0:	4619      	mov	r1, r3
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	680b      	ldr	r3, [r1, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1fc      	bne.n	80068a4 <ai_platform_runtime_get_revision+0x5c>
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <ai_platform_runtime_get_revision+0x98>)
 80068ac:	4909      	ldr	r1, [pc, #36]	; (80068d4 <ai_platform_runtime_get_revision+0x8c>)
 80068ae:	4a0a      	ldr	r2, [pc, #40]	; (80068d8 <ai_platform_runtime_get_revision+0x90>)
 80068b0:	6019      	str	r1, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d0e0      	beq.n	800687a <ai_platform_runtime_get_revision+0x32>
 80068b8:	e7fe      	b.n	80068b8 <ai_platform_runtime_get_revision+0x70>
 80068ba:	bf00      	nop
 80068bc:	e0002000 	.word	0xe0002000
 80068c0:	e0042000 	.word	0xe0042000
 80068c4:	5c001000 	.word	0x5c001000
 80068c8:	08031140 	.word	0x08031140
 80068cc:	40023008 	.word	0x40023008
 80068d0:	40023000 	.word	0x40023000
 80068d4:	f407a5c2 	.word	0xf407a5c2
 80068d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80068dc:	58024c08 	.word	0x58024c08
 80068e0:	58024c00 	.word	0x58024c00

080068e4 <ai_platform_runtime_get_version>:
 80068e4:	4a26      	ldr	r2, [pc, #152]	; (8006980 <ai_platform_runtime_get_version+0x9c>)
 80068e6:	4927      	ldr	r1, [pc, #156]	; (8006984 <ai_platform_runtime_get_version+0xa0>)
 80068e8:	6813      	ldr	r3, [r2, #0]
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80068f4:	680b      	ldr	r3, [r1, #0]
 80068f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068fa:	189a      	adds	r2, r3, r2
 80068fc:	2a01      	cmp	r2, #1
 80068fe:	d921      	bls.n	8006944 <ai_platform_runtime_get_version+0x60>
 8006900:	f240 4249 	movw	r2, #1097	; 0x449
 8006904:	4293      	cmp	r3, r2
 8006906:	d01d      	beq.n	8006944 <ai_platform_runtime_get_version+0x60>
 8006908:	4b1f      	ldr	r3, [pc, #124]	; (8006988 <ai_platform_runtime_get_version+0xa4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006910:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006914:	d025      	beq.n	8006962 <ai_platform_runtime_get_version+0x7e>
 8006916:	4b1d      	ldr	r3, [pc, #116]	; (800698c <ai_platform_runtime_get_version+0xa8>)
 8006918:	2000      	movs	r0, #0
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	b410      	push	{r4}
 800691e:	b2dc      	uxtb	r4, r3
 8006920:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006924:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006928:	0e1b      	lsrs	r3, r3, #24
 800692a:	f364 0007 	bfi	r0, r4, #0, #8
 800692e:	b083      	sub	sp, #12
 8006930:	f361 200f 	bfi	r0, r1, #8, #8
 8006934:	f362 4017 	bfi	r0, r2, #16, #8
 8006938:	f363 601f 	bfi	r0, r3, #24, #8
 800693c:	b003      	add	sp, #12
 800693e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	4b12      	ldr	r3, [pc, #72]	; (8006990 <ai_platform_runtime_get_version+0xac>)
 8006946:	2201      	movs	r2, #1
 8006948:	4619      	mov	r1, r3
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	680b      	ldr	r3, [r1, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1fc      	bne.n	800694c <ai_platform_runtime_get_version+0x68>
 8006952:	4b10      	ldr	r3, [pc, #64]	; (8006994 <ai_platform_runtime_get_version+0xb0>)
 8006954:	4910      	ldr	r1, [pc, #64]	; (8006998 <ai_platform_runtime_get_version+0xb4>)
 8006956:	4a11      	ldr	r2, [pc, #68]	; (800699c <ai_platform_runtime_get_version+0xb8>)
 8006958:	6019      	str	r1, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4293      	cmp	r3, r2
 800695e:	d0da      	beq.n	8006916 <ai_platform_runtime_get_version+0x32>
 8006960:	e7fe      	b.n	8006960 <ai_platform_runtime_get_version+0x7c>
 8006962:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <ai_platform_runtime_get_version+0xbc>)
 8006964:	2201      	movs	r2, #1
 8006966:	4619      	mov	r1, r3
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	680b      	ldr	r3, [r1, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1fc      	bne.n	800696a <ai_platform_runtime_get_version+0x86>
 8006970:	4b0c      	ldr	r3, [pc, #48]	; (80069a4 <ai_platform_runtime_get_version+0xc0>)
 8006972:	4909      	ldr	r1, [pc, #36]	; (8006998 <ai_platform_runtime_get_version+0xb4>)
 8006974:	4a09      	ldr	r2, [pc, #36]	; (800699c <ai_platform_runtime_get_version+0xb8>)
 8006976:	6019      	str	r1, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4293      	cmp	r3, r2
 800697c:	d0cb      	beq.n	8006916 <ai_platform_runtime_get_version+0x32>
 800697e:	e7fe      	b.n	800697e <ai_platform_runtime_get_version+0x9a>
 8006980:	e0002000 	.word	0xe0002000
 8006984:	e0042000 	.word	0xe0042000
 8006988:	5c001000 	.word	0x5c001000
 800698c:	08031144 	.word	0x08031144
 8006990:	40023008 	.word	0x40023008
 8006994:	40023000 	.word	0x40023000
 8006998:	f407a5c2 	.word	0xf407a5c2
 800699c:	b5e8b5cd 	.word	0xb5e8b5cd
 80069a0:	58024c08 	.word	0x58024c08
 80069a4:	58024c00 	.word	0x58024c00

080069a8 <ai_platform_api_get_version>:
 80069a8:	4a26      	ldr	r2, [pc, #152]	; (8006a44 <ai_platform_api_get_version+0x9c>)
 80069aa:	4927      	ldr	r1, [pc, #156]	; (8006a48 <ai_platform_api_get_version+0xa0>)
 80069ac:	6813      	ldr	r3, [r2, #0]
 80069ae:	f023 0301 	bic.w	r3, r3, #1
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80069b8:	680b      	ldr	r3, [r1, #0]
 80069ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069be:	189a      	adds	r2, r3, r2
 80069c0:	2a01      	cmp	r2, #1
 80069c2:	d921      	bls.n	8006a08 <ai_platform_api_get_version+0x60>
 80069c4:	f240 4249 	movw	r2, #1097	; 0x449
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d01d      	beq.n	8006a08 <ai_platform_api_get_version+0x60>
 80069cc:	4b1f      	ldr	r3, [pc, #124]	; (8006a4c <ai_platform_api_get_version+0xa4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069d4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80069d8:	d025      	beq.n	8006a26 <ai_platform_api_get_version+0x7e>
 80069da:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <ai_platform_api_get_version+0xa8>)
 80069dc:	2000      	movs	r0, #0
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	b410      	push	{r4}
 80069e2:	b2dc      	uxtb	r4, r3
 80069e4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80069e8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80069ec:	0e1b      	lsrs	r3, r3, #24
 80069ee:	f364 0007 	bfi	r0, r4, #0, #8
 80069f2:	b083      	sub	sp, #12
 80069f4:	f361 200f 	bfi	r0, r1, #8, #8
 80069f8:	f362 4017 	bfi	r0, r2, #16, #8
 80069fc:	f363 601f 	bfi	r0, r3, #24, #8
 8006a00:	b003      	add	sp, #12
 8006a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <ai_platform_api_get_version+0xac>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	680b      	ldr	r3, [r1, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1fc      	bne.n	8006a10 <ai_platform_api_get_version+0x68>
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <ai_platform_api_get_version+0xb0>)
 8006a18:	4910      	ldr	r1, [pc, #64]	; (8006a5c <ai_platform_api_get_version+0xb4>)
 8006a1a:	4a11      	ldr	r2, [pc, #68]	; (8006a60 <ai_platform_api_get_version+0xb8>)
 8006a1c:	6019      	str	r1, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d0da      	beq.n	80069da <ai_platform_api_get_version+0x32>
 8006a24:	e7fe      	b.n	8006a24 <ai_platform_api_get_version+0x7c>
 8006a26:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <ai_platform_api_get_version+0xbc>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	680b      	ldr	r3, [r1, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1fc      	bne.n	8006a2e <ai_platform_api_get_version+0x86>
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <ai_platform_api_get_version+0xc0>)
 8006a36:	4909      	ldr	r1, [pc, #36]	; (8006a5c <ai_platform_api_get_version+0xb4>)
 8006a38:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <ai_platform_api_get_version+0xb8>)
 8006a3a:	6019      	str	r1, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d0cb      	beq.n	80069da <ai_platform_api_get_version+0x32>
 8006a42:	e7fe      	b.n	8006a42 <ai_platform_api_get_version+0x9a>
 8006a44:	e0002000 	.word	0xe0002000
 8006a48:	e0042000 	.word	0xe0042000
 8006a4c:	5c001000 	.word	0x5c001000
 8006a50:	08031148 	.word	0x08031148
 8006a54:	40023008 	.word	0x40023008
 8006a58:	40023000 	.word	0x40023000
 8006a5c:	f407a5c2 	.word	0xf407a5c2
 8006a60:	b5e8b5cd 	.word	0xb5e8b5cd
 8006a64:	58024c08 	.word	0x58024c08
 8006a68:	58024c00 	.word	0x58024c00

08006a6c <ai_platform_interface_api_get_version>:
 8006a6c:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <ai_platform_interface_api_get_version+0x9c>)
 8006a6e:	4927      	ldr	r1, [pc, #156]	; (8006b0c <ai_platform_interface_api_get_version+0xa0>)
 8006a70:	6813      	ldr	r3, [r2, #0]
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006a7c:	680b      	ldr	r3, [r1, #0]
 8006a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a82:	189a      	adds	r2, r3, r2
 8006a84:	2a01      	cmp	r2, #1
 8006a86:	d921      	bls.n	8006acc <ai_platform_interface_api_get_version+0x60>
 8006a88:	f240 4249 	movw	r2, #1097	; 0x449
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d01d      	beq.n	8006acc <ai_platform_interface_api_get_version+0x60>
 8006a90:	4b1f      	ldr	r3, [pc, #124]	; (8006b10 <ai_platform_interface_api_get_version+0xa4>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a98:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006a9c:	d025      	beq.n	8006aea <ai_platform_interface_api_get_version+0x7e>
 8006a9e:	4b1d      	ldr	r3, [pc, #116]	; (8006b14 <ai_platform_interface_api_get_version+0xa8>)
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	b410      	push	{r4}
 8006aa6:	b2dc      	uxtb	r4, r3
 8006aa8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006aac:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006ab0:	0e1b      	lsrs	r3, r3, #24
 8006ab2:	f364 0007 	bfi	r0, r4, #0, #8
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	f361 200f 	bfi	r0, r1, #8, #8
 8006abc:	f362 4017 	bfi	r0, r2, #16, #8
 8006ac0:	f363 601f 	bfi	r0, r3, #24, #8
 8006ac4:	b003      	add	sp, #12
 8006ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <ai_platform_interface_api_get_version+0xac>)
 8006ace:	2201      	movs	r2, #1
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	680b      	ldr	r3, [r1, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1fc      	bne.n	8006ad4 <ai_platform_interface_api_get_version+0x68>
 8006ada:	4b10      	ldr	r3, [pc, #64]	; (8006b1c <ai_platform_interface_api_get_version+0xb0>)
 8006adc:	4910      	ldr	r1, [pc, #64]	; (8006b20 <ai_platform_interface_api_get_version+0xb4>)
 8006ade:	4a11      	ldr	r2, [pc, #68]	; (8006b24 <ai_platform_interface_api_get_version+0xb8>)
 8006ae0:	6019      	str	r1, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d0da      	beq.n	8006a9e <ai_platform_interface_api_get_version+0x32>
 8006ae8:	e7fe      	b.n	8006ae8 <ai_platform_interface_api_get_version+0x7c>
 8006aea:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <ai_platform_interface_api_get_version+0xbc>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	4619      	mov	r1, r3
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	680b      	ldr	r3, [r1, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1fc      	bne.n	8006af2 <ai_platform_interface_api_get_version+0x86>
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <ai_platform_interface_api_get_version+0xc0>)
 8006afa:	4909      	ldr	r1, [pc, #36]	; (8006b20 <ai_platform_interface_api_get_version+0xb4>)
 8006afc:	4a09      	ldr	r2, [pc, #36]	; (8006b24 <ai_platform_interface_api_get_version+0xb8>)
 8006afe:	6019      	str	r1, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d0cb      	beq.n	8006a9e <ai_platform_interface_api_get_version+0x32>
 8006b06:	e7fe      	b.n	8006b06 <ai_platform_interface_api_get_version+0x9a>
 8006b08:	e0002000 	.word	0xe0002000
 8006b0c:	e0042000 	.word	0xe0042000
 8006b10:	5c001000 	.word	0x5c001000
 8006b14:	0803114c 	.word	0x0803114c
 8006b18:	40023008 	.word	0x40023008
 8006b1c:	40023000 	.word	0x40023000
 8006b20:	f407a5c2 	.word	0xf407a5c2
 8006b24:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b28:	58024c08 	.word	0x58024c08
 8006b2c:	58024c00 	.word	0x58024c00

08006b30 <ai_platform_context_acquire>:
 8006b30:	b120      	cbz	r0, 8006b3c <ai_platform_context_acquire+0xc>
 8006b32:	4b1e      	ldr	r3, [pc, #120]	; (8006bac <ai_platform_context_acquire+0x7c>)
 8006b34:	6802      	ldr	r2, [r0, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	bf18      	it	ne
 8006b3a:	2000      	movne	r0, #0
 8006b3c:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <ai_platform_context_acquire+0x80>)
 8006b3e:	491d      	ldr	r1, [pc, #116]	; (8006bb4 <ai_platform_context_acquire+0x84>)
 8006b40:	6813      	ldr	r3, [r2, #0]
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006b4c:	680b      	ldr	r3, [r1, #0]
 8006b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b52:	189a      	adds	r2, r3, r2
 8006b54:	2a01      	cmp	r2, #1
 8006b56:	d90b      	bls.n	8006b70 <ai_platform_context_acquire+0x40>
 8006b58:	f240 4249 	movw	r2, #1097	; 0x449
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d007      	beq.n	8006b70 <ai_platform_context_acquire+0x40>
 8006b60:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <ai_platform_context_acquire+0x88>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b68:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006b6c:	d00f      	beq.n	8006b8e <ai_platform_context_acquire+0x5e>
 8006b6e:	4770      	bx	lr
 8006b70:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <ai_platform_context_acquire+0x8c>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	4619      	mov	r1, r3
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	680b      	ldr	r3, [r1, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1fc      	bne.n	8006b78 <ai_platform_context_acquire+0x48>
 8006b7e:	4b10      	ldr	r3, [pc, #64]	; (8006bc0 <ai_platform_context_acquire+0x90>)
 8006b80:	4910      	ldr	r1, [pc, #64]	; (8006bc4 <ai_platform_context_acquire+0x94>)
 8006b82:	4a11      	ldr	r2, [pc, #68]	; (8006bc8 <ai_platform_context_acquire+0x98>)
 8006b84:	6019      	str	r1, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d0f0      	beq.n	8006b6e <ai_platform_context_acquire+0x3e>
 8006b8c:	e7fe      	b.n	8006b8c <ai_platform_context_acquire+0x5c>
 8006b8e:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <ai_platform_context_acquire+0x9c>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	4619      	mov	r1, r3
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	680b      	ldr	r3, [r1, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1fc      	bne.n	8006b96 <ai_platform_context_acquire+0x66>
 8006b9c:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <ai_platform_context_acquire+0xa0>)
 8006b9e:	4909      	ldr	r1, [pc, #36]	; (8006bc4 <ai_platform_context_acquire+0x94>)
 8006ba0:	4a09      	ldr	r2, [pc, #36]	; (8006bc8 <ai_platform_context_acquire+0x98>)
 8006ba2:	6019      	str	r1, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d0e1      	beq.n	8006b6e <ai_platform_context_acquire+0x3e>
 8006baa:	e7fe      	b.n	8006baa <ai_platform_context_acquire+0x7a>
 8006bac:	a1c00100 	.word	0xa1c00100
 8006bb0:	e0002000 	.word	0xe0002000
 8006bb4:	e0042000 	.word	0xe0042000
 8006bb8:	5c001000 	.word	0x5c001000
 8006bbc:	40023008 	.word	0x40023008
 8006bc0:	40023000 	.word	0x40023000
 8006bc4:	f407a5c2 	.word	0xf407a5c2
 8006bc8:	b5e8b5cd 	.word	0xb5e8b5cd
 8006bcc:	58024c08 	.word	0x58024c08
 8006bd0:	58024c00 	.word	0x58024c00

08006bd4 <ai_platform_network_get_error>:
 8006bd4:	b118      	cbz	r0, 8006bde <ai_platform_network_get_error+0xa>
 8006bd6:	4b3c      	ldr	r3, [pc, #240]	; (8006cc8 <ai_platform_network_get_error+0xf4>)
 8006bd8:	6802      	ldr	r2, [r0, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d02a      	beq.n	8006c34 <ai_platform_network_get_error+0x60>
 8006bde:	4a3b      	ldr	r2, [pc, #236]	; (8006ccc <ai_platform_network_get_error+0xf8>)
 8006be0:	493b      	ldr	r1, [pc, #236]	; (8006cd0 <ai_platform_network_get_error+0xfc>)
 8006be2:	6813      	ldr	r3, [r2, #0]
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	680b      	ldr	r3, [r1, #0]
 8006bec:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006bf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bf4:	185a      	adds	r2, r3, r1
 8006bf6:	2a01      	cmp	r2, #1
 8006bf8:	d90d      	bls.n	8006c16 <ai_platform_network_get_error+0x42>
 8006bfa:	f240 4249 	movw	r2, #1097	; 0x449
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d009      	beq.n	8006c16 <ai_platform_network_get_error+0x42>
 8006c02:	4b34      	ldr	r3, [pc, #208]	; (8006cd4 <ai_platform_network_get_error+0x100>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c0a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006c0e:	d02d      	beq.n	8006c6c <ai_platform_network_get_error+0x98>
 8006c10:	f241 0010 	movw	r0, #4112	; 0x1010
 8006c14:	4770      	bx	lr
 8006c16:	4b30      	ldr	r3, [pc, #192]	; (8006cd8 <ai_platform_network_get_error+0x104>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	680b      	ldr	r3, [r1, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1fc      	bne.n	8006c1e <ai_platform_network_get_error+0x4a>
 8006c24:	4b2d      	ldr	r3, [pc, #180]	; (8006cdc <ai_platform_network_get_error+0x108>)
 8006c26:	492e      	ldr	r1, [pc, #184]	; (8006ce0 <ai_platform_network_get_error+0x10c>)
 8006c28:	4a2e      	ldr	r2, [pc, #184]	; (8006ce4 <ai_platform_network_get_error+0x110>)
 8006c2a:	6019      	str	r1, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d0ee      	beq.n	8006c10 <ai_platform_network_get_error+0x3c>
 8006c32:	e7fe      	b.n	8006c32 <ai_platform_network_get_error+0x5e>
 8006c34:	4a25      	ldr	r2, [pc, #148]	; (8006ccc <ai_platform_network_get_error+0xf8>)
 8006c36:	4926      	ldr	r1, [pc, #152]	; (8006cd0 <ai_platform_network_get_error+0xfc>)
 8006c38:	6813      	ldr	r3, [r2, #0]
 8006c3a:	f023 0301 	bic.w	r3, r3, #1
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006c44:	680b      	ldr	r3, [r1, #0]
 8006c46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c4a:	189a      	adds	r2, r3, r2
 8006c4c:	2a01      	cmp	r2, #1
 8006c4e:	d92b      	bls.n	8006ca8 <ai_platform_network_get_error+0xd4>
 8006c50:	f240 4249 	movw	r2, #1097	; 0x449
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d027      	beq.n	8006ca8 <ai_platform_network_get_error+0xd4>
 8006c58:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <ai_platform_network_get_error+0x100>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c60:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006c64:	d011      	beq.n	8006c8a <ai_platform_network_get_error+0xb6>
 8006c66:	3010      	adds	r0, #16
 8006c68:	f001 b824 	b.w	8007cb4 <core_get_error>
 8006c6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ce8 <ai_platform_network_get_error+0x114>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4619      	mov	r1, r3
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	680b      	ldr	r3, [r1, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1fc      	bne.n	8006c74 <ai_platform_network_get_error+0xa0>
 8006c7a:	4b1c      	ldr	r3, [pc, #112]	; (8006cec <ai_platform_network_get_error+0x118>)
 8006c7c:	4918      	ldr	r1, [pc, #96]	; (8006ce0 <ai_platform_network_get_error+0x10c>)
 8006c7e:	4a19      	ldr	r2, [pc, #100]	; (8006ce4 <ai_platform_network_get_error+0x110>)
 8006c80:	6019      	str	r1, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d0c3      	beq.n	8006c10 <ai_platform_network_get_error+0x3c>
 8006c88:	e7fe      	b.n	8006c88 <ai_platform_network_get_error+0xb4>
 8006c8a:	4b17      	ldr	r3, [pc, #92]	; (8006ce8 <ai_platform_network_get_error+0x114>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	4619      	mov	r1, r3
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	680b      	ldr	r3, [r1, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1fc      	bne.n	8006c92 <ai_platform_network_get_error+0xbe>
 8006c98:	4b14      	ldr	r3, [pc, #80]	; (8006cec <ai_platform_network_get_error+0x118>)
 8006c9a:	4911      	ldr	r1, [pc, #68]	; (8006ce0 <ai_platform_network_get_error+0x10c>)
 8006c9c:	4a11      	ldr	r2, [pc, #68]	; (8006ce4 <ai_platform_network_get_error+0x110>)
 8006c9e:	6019      	str	r1, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d0df      	beq.n	8006c66 <ai_platform_network_get_error+0x92>
 8006ca6:	e7fe      	b.n	8006ca6 <ai_platform_network_get_error+0xd2>
 8006ca8:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <ai_platform_network_get_error+0x104>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	4619      	mov	r1, r3
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	680b      	ldr	r3, [r1, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1fc      	bne.n	8006cb0 <ai_platform_network_get_error+0xdc>
 8006cb6:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <ai_platform_network_get_error+0x108>)
 8006cb8:	4909      	ldr	r1, [pc, #36]	; (8006ce0 <ai_platform_network_get_error+0x10c>)
 8006cba:	4a0a      	ldr	r2, [pc, #40]	; (8006ce4 <ai_platform_network_get_error+0x110>)
 8006cbc:	6019      	str	r1, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d0d0      	beq.n	8006c66 <ai_platform_network_get_error+0x92>
 8006cc4:	e7fe      	b.n	8006cc4 <ai_platform_network_get_error+0xf0>
 8006cc6:	bf00      	nop
 8006cc8:	a1c00100 	.word	0xa1c00100
 8006ccc:	e0002000 	.word	0xe0002000
 8006cd0:	e0042000 	.word	0xe0042000
 8006cd4:	5c001000 	.word	0x5c001000
 8006cd8:	40023008 	.word	0x40023008
 8006cdc:	40023000 	.word	0x40023000
 8006ce0:	f407a5c2 	.word	0xf407a5c2
 8006ce4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ce8:	58024c08 	.word	0x58024c08
 8006cec:	58024c00 	.word	0x58024c00

08006cf0 <ai_platform_api_get_network_report>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	b120      	cbz	r0, 8006d06 <ai_platform_api_get_network_report+0x16>
 8006cfc:	4ba7      	ldr	r3, [pc, #668]	; (8006f9c <ai_platform_api_get_network_report+0x2ac>)
 8006cfe:	6802      	ldr	r2, [r0, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	bf18      	it	ne
 8006d04:	2500      	movne	r5, #0
 8006d06:	4aa6      	ldr	r2, [pc, #664]	; (8006fa0 <ai_platform_api_get_network_report+0x2b0>)
 8006d08:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 8006d0c:	49a5      	ldr	r1, [pc, #660]	; (8006fa4 <ai_platform_api_get_network_report+0x2b4>)
 8006d0e:	6813      	ldr	r3, [r2, #0]
 8006d10:	f023 0301 	bic.w	r3, r3, #1
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	680b      	ldr	r3, [r1, #0]
 8006d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d1c:	199a      	adds	r2, r3, r6
 8006d1e:	2a01      	cmp	r2, #1
 8006d20:	f240 8090 	bls.w	8006e44 <ai_platform_api_get_network_report+0x154>
 8006d24:	f240 4249 	movw	r2, #1097	; 0x449
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	f000 808b 	beq.w	8006e44 <ai_platform_api_get_network_report+0x154>
 8006d2e:	4b9e      	ldr	r3, [pc, #632]	; (8006fa8 <ai_platform_api_get_network_report+0x2b8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d36:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006d3a:	d073      	beq.n	8006e24 <ai_platform_api_get_network_report+0x134>
 8006d3c:	2d00      	cmp	r5, #0
 8006d3e:	f000 8091 	beq.w	8006e64 <ai_platform_api_get_network_report+0x174>
 8006d42:	fab4 f384 	clz	r3, r4
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f040 808b 	bne.w	8006e64 <ai_platform_api_get_network_report+0x174>
 8006d4e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006d50:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	f000 810f 	beq.w	8006f76 <ai_platform_api_get_network_report+0x286>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006d5c:	68d3      	ldr	r3, [r2, #12]
 8006d5e:	b193      	cbz	r3, 8006d86 <ai_platform_api_get_network_report+0x96>
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d010      	beq.n	8006d86 <ai_platform_api_get_network_report+0x96>
 8006d64:	2202      	movs	r2, #2
 8006d66:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006d68:	3201      	adds	r2, #1
 8006d6a:	68d9      	ldr	r1, [r3, #12]
 8006d6c:	4299      	cmp	r1, r3
 8006d6e:	bf18      	it	ne
 8006d70:	2900      	cmpne	r1, #0
 8006d72:	460b      	mov	r3, r1
 8006d74:	bf14      	ite	ne
 8006d76:	2001      	movne	r0, #1
 8006d78:	2000      	moveq	r0, #0
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d1f3      	bne.n	8006d66 <ai_platform_api_get_network_report+0x76>
 8006d7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80f8 	beq.w	8006f76 <ai_platform_api_get_network_report+0x286>
 8006d86:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 80e7 	beq.w	8006f5e <ai_platform_api_get_network_report+0x26e>
 8006d90:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8006d92:	2f00      	cmp	r7, #0
 8006d94:	f000 80e3 	beq.w	8006f5e <ai_platform_api_get_network_report+0x26e>
 8006d98:	883b      	ldrh	r3, [r7, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80df 	beq.w	8006f5e <ai_platform_api_get_network_report+0x26e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 80db 	beq.w	8006f5e <ai_platform_api_get_network_report+0x26e>
 8006da8:	681e      	ldr	r6, [r3, #0]
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	f000 80d7 	beq.w	8006f5e <ai_platform_api_get_network_report+0x26e>
 8006db0:	f04f 0901 	mov.w	r9, #1
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	464b      	mov	r3, r9
 8006dba:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8006dbe:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8006dc2:	69b0      	ldr	r0, [r6, #24]
 8006dc4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8006dc8:	6800      	ldr	r0, [r0, #0]
 8006dca:	eb01 0a02 	add.w	sl, r1, r2
 8006dce:	9303      	str	r3, [sp, #12]
 8006dd0:	f8dc b008 	ldr.w	fp, [ip, #8]
 8006dd4:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8006dd8:	f002 ff7a 	bl	8009cd0 <ai_array_to_buffer_fmt>
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8006de2:	5088      	str	r0, [r1, r2]
 8006de4:	eb0b 0108 	add.w	r1, fp, r8
 8006de8:	f8aa 3004 	strh.w	r3, [sl, #4]
 8006dec:	68f2      	ldr	r2, [r6, #12]
 8006dee:	68d2      	ldr	r2, [r2, #12]
 8006df0:	f8aa 2006 	strh.w	r2, [sl, #6]
 8006df4:	68f2      	ldr	r2, [r6, #12]
 8006df6:	6892      	ldr	r2, [r2, #8]
 8006df8:	f8aa 2008 	strh.w	r2, [sl, #8]
 8006dfc:	68f2      	ldr	r2, [r6, #12]
 8006dfe:	6852      	ldr	r2, [r2, #4]
 8006e00:	f8ca 200c 	str.w	r2, [sl, #12]
 8006e04:	69b2      	ldr	r2, [r6, #24]
 8006e06:	6892      	ldr	r2, [r2, #8]
 8006e08:	f8ca 2010 	str.w	r2, [sl, #16]
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	d02d      	beq.n	8006e6c <ai_platform_api_get_network_report+0x17c>
 8006e10:	2200      	movs	r2, #0
 8006e12:	f84b 2008 	str.w	r2, [fp, r8]
 8006e16:	6832      	ldr	r2, [r6, #0]
 8006e18:	604a      	str	r2, [r1, #4]
 8006e1a:	b33a      	cbz	r2, 8006e6c <ai_platform_api_get_network_report+0x17c>
 8006e1c:	8852      	ldrh	r2, [r2, #2]
 8006e1e:	b32a      	cbz	r2, 8006e6c <ai_platform_api_get_network_report+0x17c>
 8006e20:	600b      	str	r3, [r1, #0]
 8006e22:	e024      	b.n	8006e6e <ai_platform_api_get_network_report+0x17e>
 8006e24:	4b61      	ldr	r3, [pc, #388]	; (8006fac <ai_platform_api_get_network_report+0x2bc>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	4619      	mov	r1, r3
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	680b      	ldr	r3, [r1, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1fc      	bne.n	8006e2c <ai_platform_api_get_network_report+0x13c>
 8006e32:	4b5f      	ldr	r3, [pc, #380]	; (8006fb0 <ai_platform_api_get_network_report+0x2c0>)
 8006e34:	495f      	ldr	r1, [pc, #380]	; (8006fb4 <ai_platform_api_get_network_report+0x2c4>)
 8006e36:	4a60      	ldr	r2, [pc, #384]	; (8006fb8 <ai_platform_api_get_network_report+0x2c8>)
 8006e38:	6019      	str	r1, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	f43f af7d 	beq.w	8006d3c <ai_platform_api_get_network_report+0x4c>
 8006e42:	e7fe      	b.n	8006e42 <ai_platform_api_get_network_report+0x152>
 8006e44:	4b5d      	ldr	r3, [pc, #372]	; (8006fbc <ai_platform_api_get_network_report+0x2cc>)
 8006e46:	2201      	movs	r2, #1
 8006e48:	4619      	mov	r1, r3
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	680b      	ldr	r3, [r1, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1fc      	bne.n	8006e4c <ai_platform_api_get_network_report+0x15c>
 8006e52:	4b5b      	ldr	r3, [pc, #364]	; (8006fc0 <ai_platform_api_get_network_report+0x2d0>)
 8006e54:	4957      	ldr	r1, [pc, #348]	; (8006fb4 <ai_platform_api_get_network_report+0x2c4>)
 8006e56:	4a58      	ldr	r2, [pc, #352]	; (8006fb8 <ai_platform_api_get_network_report+0x2c8>)
 8006e58:	6019      	str	r1, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	f43f af6d 	beq.w	8006d3c <ai_platform_api_get_network_report+0x4c>
 8006e62:	e7fe      	b.n	8006e62 <ai_platform_api_get_network_report+0x172>
 8006e64:	2000      	movs	r0, #0
 8006e66:	b005      	add	sp, #20
 8006e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f8ca 1014 	str.w	r1, [sl, #20]
 8006e72:	fa1f f289 	uxth.w	r2, r9
 8006e76:	8839      	ldrh	r1, [r7, #0]
 8006e78:	f108 0808 	add.w	r8, r8, #8
 8006e7c:	4589      	cmp	r9, r1
 8006e7e:	d207      	bcs.n	8006e90 <ai_platform_api_get_network_report+0x1a0>
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	b129      	cbz	r1, 8006e90 <ai_platform_api_get_network_report+0x1a0>
 8006e84:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 8006e88:	f109 0901 	add.w	r9, r9, #1
 8006e8c:	2e00      	cmp	r6, #0
 8006e8e:	d194      	bne.n	8006dba <ai_platform_api_get_network_report+0xca>
 8006e90:	2a00      	cmp	r2, #0
 8006e92:	d064      	beq.n	8006f5e <ai_platform_api_get_network_report+0x26e>
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	8622      	strh	r2, [r4, #48]	; 0x30
 8006e9a:	6363      	str	r3, [r4, #52]	; 0x34
 8006e9c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d970      	bls.n	8006f86 <ai_platform_api_get_network_report+0x296>
 8006ea4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8006ea6:	f117 0f0c 	cmn.w	r7, #12
 8006eaa:	d06c      	beq.n	8006f86 <ai_platform_api_get_network_report+0x296>
 8006eac:	89bb      	ldrh	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d069      	beq.n	8006f86 <ai_platform_api_get_network_report+0x296>
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d066      	beq.n	8006f86 <ai_platform_api_get_network_report+0x296>
 8006eb8:	681e      	ldr	r6, [r3, #0]
 8006eba:	2e00      	cmp	r6, #0
 8006ebc:	d063      	beq.n	8006f86 <ai_platform_api_get_network_report+0x296>
 8006ebe:	f04f 0901 	mov.w	r9, #1
 8006ec2:	f04f 0800 	mov.w	r8, #0
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	e01c      	b.n	8006f04 <ai_platform_api_get_network_report+0x214>
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f84b 2008 	str.w	r2, [fp, r8]
 8006ed0:	6832      	ldr	r2, [r6, #0]
 8006ed2:	604a      	str	r2, [r1, #4]
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	d040      	beq.n	8006f5a <ai_platform_api_get_network_report+0x26a>
 8006ed8:	8852      	ldrh	r2, [r2, #2]
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	d03d      	beq.n	8006f5a <ai_platform_api_get_network_report+0x26a>
 8006ede:	600b      	str	r3, [r1, #0]
 8006ee0:	f8ca 1014 	str.w	r1, [sl, #20]
 8006ee4:	fa1f f289 	uxth.w	r2, r9
 8006ee8:	89b9      	ldrh	r1, [r7, #12]
 8006eea:	f108 0808 	add.w	r8, r8, #8
 8006eee:	4589      	cmp	r9, r1
 8006ef0:	d268      	bcs.n	8006fc4 <ai_platform_api_get_network_report+0x2d4>
 8006ef2:	6939      	ldr	r1, [r7, #16]
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	d065      	beq.n	8006fc4 <ai_platform_api_get_network_report+0x2d4>
 8006ef8:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 8006efc:	f109 0901 	add.w	r9, r9, #1
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	d05f      	beq.n	8006fc4 <ai_platform_api_get_network_report+0x2d4>
 8006f04:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8006f08:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8006f0c:	69b0      	ldr	r0, [r6, #24]
 8006f0e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8006f12:	6800      	ldr	r0, [r0, #0]
 8006f14:	eb01 0a02 	add.w	sl, r1, r2
 8006f18:	9303      	str	r3, [sp, #12]
 8006f1a:	f8dc b008 	ldr.w	fp, [ip, #8]
 8006f1e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8006f22:	f002 fed5 	bl	8009cd0 <ai_array_to_buffer_fmt>
 8006f26:	9b03      	ldr	r3, [sp, #12]
 8006f28:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8006f2c:	5088      	str	r0, [r1, r2]
 8006f2e:	eb0b 0108 	add.w	r1, fp, r8
 8006f32:	f8aa 3004 	strh.w	r3, [sl, #4]
 8006f36:	68f2      	ldr	r2, [r6, #12]
 8006f38:	68d2      	ldr	r2, [r2, #12]
 8006f3a:	f8aa 2006 	strh.w	r2, [sl, #6]
 8006f3e:	68f2      	ldr	r2, [r6, #12]
 8006f40:	6892      	ldr	r2, [r2, #8]
 8006f42:	f8aa 2008 	strh.w	r2, [sl, #8]
 8006f46:	68f2      	ldr	r2, [r6, #12]
 8006f48:	6852      	ldr	r2, [r2, #4]
 8006f4a:	f8ca 200c 	str.w	r2, [sl, #12]
 8006f4e:	69b2      	ldr	r2, [r6, #24]
 8006f50:	6892      	ldr	r2, [r2, #8]
 8006f52:	f8ca 2010 	str.w	r2, [sl, #16]
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d1b7      	bne.n	8006eca <ai_platform_api_get_network_report+0x1da>
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	e7c0      	b.n	8006ee0 <ai_platform_api_get_network_report+0x1f0>
 8006f5e:	2600      	movs	r6, #0
 8006f60:	f105 0010 	add.w	r0, r5, #16
 8006f64:	2218      	movs	r2, #24
 8006f66:	2112      	movs	r1, #18
 8006f68:	8626      	strh	r6, [r4, #48]	; 0x30
 8006f6a:	f000 fea9 	bl	8007cc0 <core_set_error>
 8006f6e:	4630      	mov	r0, r6
 8006f70:	b005      	add	sp, #20
 8006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f76:	f105 0010 	add.w	r0, r5, #16
 8006f7a:	2218      	movs	r2, #24
 8006f7c:	2111      	movs	r1, #17
 8006f7e:	f000 fe9f 	bl	8007cc0 <core_set_error>
 8006f82:	2000      	movs	r0, #0
 8006f84:	e76f      	b.n	8006e66 <ai_platform_api_get_network_report+0x176>
 8006f86:	2600      	movs	r6, #0
 8006f88:	f105 0010 	add.w	r0, r5, #16
 8006f8c:	2218      	movs	r2, #24
 8006f8e:	2113      	movs	r1, #19
 8006f90:	8666      	strh	r6, [r4, #50]	; 0x32
 8006f92:	f000 fe95 	bl	8007cc0 <core_set_error>
 8006f96:	4630      	mov	r0, r6
 8006f98:	e765      	b.n	8006e66 <ai_platform_api_get_network_report+0x176>
 8006f9a:	bf00      	nop
 8006f9c:	a1c00100 	.word	0xa1c00100
 8006fa0:	e0002000 	.word	0xe0002000
 8006fa4:	e0042000 	.word	0xe0042000
 8006fa8:	5c001000 	.word	0x5c001000
 8006fac:	58024c08 	.word	0x58024c08
 8006fb0:	58024c00 	.word	0x58024c00
 8006fb4:	f407a5c2 	.word	0xf407a5c2
 8006fb8:	b5e8b5cd 	.word	0xb5e8b5cd
 8006fbc:	40023008 	.word	0x40023008
 8006fc0:	40023000 	.word	0x40023000
 8006fc4:	2a00      	cmp	r2, #0
 8006fc6:	d0de      	beq.n	8006f86 <ai_platform_api_get_network_report+0x296>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8006fce:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 8006fd2:	f105 0718 	add.w	r7, r5, #24
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8006fdc:	8662      	strh	r2, [r4, #50]	; 0x32
 8006fde:	63a3      	str	r3, [r4, #56]	; 0x38
 8006fe0:	686b      	ldr	r3, [r5, #4]
 8006fe2:	4d80      	ldr	r5, [pc, #512]	; (80071e4 <ai_platform_api_get_network_report+0x4f4>)
 8006fe4:	6723      	str	r3, [r4, #112]	; 0x70
 8006fe6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006fea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006fee:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8006ff2:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80071f0 <ai_platform_api_get_network_report+0x500>
 8006ff6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006ffa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006ffc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006ffe:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007002:	e886 0003 	stmia.w	r6, {r0, r1}
 8007006:	682b      	ldr	r3, [r5, #0]
 8007008:	f023 0301 	bic.w	r3, r3, #1
 800700c:	602b      	str	r3, [r5, #0]
 800700e:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8007012:	f8de 3000 	ldr.w	r3, [lr]
 8007016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800701a:	195a      	adds	r2, r3, r5
 800701c:	2a01      	cmp	r2, #1
 800701e:	d966      	bls.n	80070ee <ai_platform_api_get_network_report+0x3fe>
 8007020:	f240 4249 	movw	r2, #1097	; 0x449
 8007024:	4293      	cmp	r3, r2
 8007026:	d062      	beq.n	80070ee <ai_platform_api_get_network_report+0x3fe>
 8007028:	4b6f      	ldr	r3, [pc, #444]	; (80071e8 <ai_platform_api_get_network_report+0x4f8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007030:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007034:	f000 80c6 	beq.w	80071c4 <ai_platform_api_get_network_report+0x4d4>
 8007038:	4a6a      	ldr	r2, [pc, #424]	; (80071e4 <ai_platform_api_get_network_report+0x4f4>)
 800703a:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800703e:	4b6b      	ldr	r3, [pc, #428]	; (80071ec <ai_platform_api_get_network_report+0x4fc>)
 8007040:	496b      	ldr	r1, [pc, #428]	; (80071f0 <ai_platform_api_get_network_report+0x500>)
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	6813      	ldr	r3, [r2, #0]
 8007046:	f023 0301 	bic.w	r3, r3, #1
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	680b      	ldr	r3, [r1, #0]
 800704e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007052:	181a      	adds	r2, r3, r0
 8007054:	2a01      	cmp	r2, #1
 8007056:	f240 80a5 	bls.w	80071a4 <ai_platform_api_get_network_report+0x4b4>
 800705a:	f240 4249 	movw	r2, #1097	; 0x449
 800705e:	4293      	cmp	r3, r2
 8007060:	f000 80a0 	beq.w	80071a4 <ai_platform_api_get_network_report+0x4b4>
 8007064:	4b60      	ldr	r3, [pc, #384]	; (80071e8 <ai_platform_api_get_network_report+0x4f8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800706c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007070:	f000 8088 	beq.w	8007184 <ai_platform_api_get_network_report+0x494>
 8007074:	4a5b      	ldr	r2, [pc, #364]	; (80071e4 <ai_platform_api_get_network_report+0x4f4>)
 8007076:	f240 2305 	movw	r3, #517	; 0x205
 800707a:	495d      	ldr	r1, [pc, #372]	; (80071f0 <ai_platform_api_get_network_report+0x500>)
 800707c:	6163      	str	r3, [r4, #20]
 800707e:	6813      	ldr	r3, [r2, #0]
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	680b      	ldr	r3, [r1, #0]
 8007088:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800708c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007090:	185a      	adds	r2, r3, r1
 8007092:	2a01      	cmp	r2, #1
 8007094:	d967      	bls.n	8007166 <ai_platform_api_get_network_report+0x476>
 8007096:	f240 4249 	movw	r2, #1097	; 0x449
 800709a:	4293      	cmp	r3, r2
 800709c:	d063      	beq.n	8007166 <ai_platform_api_get_network_report+0x476>
 800709e:	4b52      	ldr	r3, [pc, #328]	; (80071e8 <ai_platform_api_get_network_report+0x4f8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070a6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80070aa:	d04d      	beq.n	8007148 <ai_platform_api_get_network_report+0x458>
 80070ac:	4a4d      	ldr	r2, [pc, #308]	; (80071e4 <ai_platform_api_get_network_report+0x4f4>)
 80070ae:	f240 1301 	movw	r3, #257	; 0x101
 80070b2:	494f      	ldr	r1, [pc, #316]	; (80071f0 <ai_platform_api_get_network_report+0x500>)
 80070b4:	6263      	str	r3, [r4, #36]	; 0x24
 80070b6:	6813      	ldr	r3, [r2, #0]
 80070b8:	f023 0301 	bic.w	r3, r3, #1
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80070c2:	680b      	ldr	r3, [r1, #0]
 80070c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070c8:	189a      	adds	r2, r3, r2
 80070ca:	2a01      	cmp	r2, #1
 80070cc:	d92d      	bls.n	800712a <ai_platform_api_get_network_report+0x43a>
 80070ce:	f240 4249 	movw	r2, #1097	; 0x449
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d029      	beq.n	800712a <ai_platform_api_get_network_report+0x43a>
 80070d6:	4b44      	ldr	r3, [pc, #272]	; (80071e8 <ai_platform_api_get_network_report+0x4f8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070de:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80070e2:	d013      	beq.n	800710c <ai_platform_api_get_network_report+0x41c>
 80070e4:	f240 4301 	movw	r3, #1025	; 0x401
 80070e8:	2001      	movs	r0, #1
 80070ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80070ec:	e6bb      	b.n	8006e66 <ai_platform_api_get_network_report+0x176>
 80070ee:	4b41      	ldr	r3, [pc, #260]	; (80071f4 <ai_platform_api_get_network_report+0x504>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	4619      	mov	r1, r3
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	680b      	ldr	r3, [r1, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1fc      	bne.n	80070f6 <ai_platform_api_get_network_report+0x406>
 80070fc:	4b3e      	ldr	r3, [pc, #248]	; (80071f8 <ai_platform_api_get_network_report+0x508>)
 80070fe:	493f      	ldr	r1, [pc, #252]	; (80071fc <ai_platform_api_get_network_report+0x50c>)
 8007100:	4a3f      	ldr	r2, [pc, #252]	; (8007200 <ai_platform_api_get_network_report+0x510>)
 8007102:	6019      	str	r1, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4293      	cmp	r3, r2
 8007108:	d096      	beq.n	8007038 <ai_platform_api_get_network_report+0x348>
 800710a:	e7fe      	b.n	800710a <ai_platform_api_get_network_report+0x41a>
 800710c:	4b3d      	ldr	r3, [pc, #244]	; (8007204 <ai_platform_api_get_network_report+0x514>)
 800710e:	2201      	movs	r2, #1
 8007110:	4619      	mov	r1, r3
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	680b      	ldr	r3, [r1, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1fc      	bne.n	8007114 <ai_platform_api_get_network_report+0x424>
 800711a:	4b3b      	ldr	r3, [pc, #236]	; (8007208 <ai_platform_api_get_network_report+0x518>)
 800711c:	4937      	ldr	r1, [pc, #220]	; (80071fc <ai_platform_api_get_network_report+0x50c>)
 800711e:	4a38      	ldr	r2, [pc, #224]	; (8007200 <ai_platform_api_get_network_report+0x510>)
 8007120:	6019      	str	r1, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4293      	cmp	r3, r2
 8007126:	d0dd      	beq.n	80070e4 <ai_platform_api_get_network_report+0x3f4>
 8007128:	e7fe      	b.n	8007128 <ai_platform_api_get_network_report+0x438>
 800712a:	4b32      	ldr	r3, [pc, #200]	; (80071f4 <ai_platform_api_get_network_report+0x504>)
 800712c:	2201      	movs	r2, #1
 800712e:	4619      	mov	r1, r3
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	680b      	ldr	r3, [r1, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1fc      	bne.n	8007132 <ai_platform_api_get_network_report+0x442>
 8007138:	4b2f      	ldr	r3, [pc, #188]	; (80071f8 <ai_platform_api_get_network_report+0x508>)
 800713a:	4930      	ldr	r1, [pc, #192]	; (80071fc <ai_platform_api_get_network_report+0x50c>)
 800713c:	4a30      	ldr	r2, [pc, #192]	; (8007200 <ai_platform_api_get_network_report+0x510>)
 800713e:	6019      	str	r1, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4293      	cmp	r3, r2
 8007144:	d0ce      	beq.n	80070e4 <ai_platform_api_get_network_report+0x3f4>
 8007146:	e7fe      	b.n	8007146 <ai_platform_api_get_network_report+0x456>
 8007148:	4b2e      	ldr	r3, [pc, #184]	; (8007204 <ai_platform_api_get_network_report+0x514>)
 800714a:	2201      	movs	r2, #1
 800714c:	4619      	mov	r1, r3
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	680b      	ldr	r3, [r1, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1fc      	bne.n	8007150 <ai_platform_api_get_network_report+0x460>
 8007156:	4b2c      	ldr	r3, [pc, #176]	; (8007208 <ai_platform_api_get_network_report+0x518>)
 8007158:	4928      	ldr	r1, [pc, #160]	; (80071fc <ai_platform_api_get_network_report+0x50c>)
 800715a:	4a29      	ldr	r2, [pc, #164]	; (8007200 <ai_platform_api_get_network_report+0x510>)
 800715c:	6019      	str	r1, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4293      	cmp	r3, r2
 8007162:	d0a3      	beq.n	80070ac <ai_platform_api_get_network_report+0x3bc>
 8007164:	e7fe      	b.n	8007164 <ai_platform_api_get_network_report+0x474>
 8007166:	4b23      	ldr	r3, [pc, #140]	; (80071f4 <ai_platform_api_get_network_report+0x504>)
 8007168:	2201      	movs	r2, #1
 800716a:	4619      	mov	r1, r3
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	680b      	ldr	r3, [r1, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1fc      	bne.n	800716e <ai_platform_api_get_network_report+0x47e>
 8007174:	4b20      	ldr	r3, [pc, #128]	; (80071f8 <ai_platform_api_get_network_report+0x508>)
 8007176:	4921      	ldr	r1, [pc, #132]	; (80071fc <ai_platform_api_get_network_report+0x50c>)
 8007178:	4a21      	ldr	r2, [pc, #132]	; (8007200 <ai_platform_api_get_network_report+0x510>)
 800717a:	6019      	str	r1, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4293      	cmp	r3, r2
 8007180:	d094      	beq.n	80070ac <ai_platform_api_get_network_report+0x3bc>
 8007182:	e7fe      	b.n	8007182 <ai_platform_api_get_network_report+0x492>
 8007184:	4b1f      	ldr	r3, [pc, #124]	; (8007204 <ai_platform_api_get_network_report+0x514>)
 8007186:	2201      	movs	r2, #1
 8007188:	4619      	mov	r1, r3
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	680b      	ldr	r3, [r1, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1fc      	bne.n	800718c <ai_platform_api_get_network_report+0x49c>
 8007192:	4b1d      	ldr	r3, [pc, #116]	; (8007208 <ai_platform_api_get_network_report+0x518>)
 8007194:	4919      	ldr	r1, [pc, #100]	; (80071fc <ai_platform_api_get_network_report+0x50c>)
 8007196:	4a1a      	ldr	r2, [pc, #104]	; (8007200 <ai_platform_api_get_network_report+0x510>)
 8007198:	6019      	str	r1, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4293      	cmp	r3, r2
 800719e:	f43f af69 	beq.w	8007074 <ai_platform_api_get_network_report+0x384>
 80071a2:	e7fe      	b.n	80071a2 <ai_platform_api_get_network_report+0x4b2>
 80071a4:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <ai_platform_api_get_network_report+0x504>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	4619      	mov	r1, r3
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	680b      	ldr	r3, [r1, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1fc      	bne.n	80071ac <ai_platform_api_get_network_report+0x4bc>
 80071b2:	4b11      	ldr	r3, [pc, #68]	; (80071f8 <ai_platform_api_get_network_report+0x508>)
 80071b4:	4911      	ldr	r1, [pc, #68]	; (80071fc <ai_platform_api_get_network_report+0x50c>)
 80071b6:	4a12      	ldr	r2, [pc, #72]	; (8007200 <ai_platform_api_get_network_report+0x510>)
 80071b8:	6019      	str	r1, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4293      	cmp	r3, r2
 80071be:	f43f af59 	beq.w	8007074 <ai_platform_api_get_network_report+0x384>
 80071c2:	e7fe      	b.n	80071c2 <ai_platform_api_get_network_report+0x4d2>
 80071c4:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <ai_platform_api_get_network_report+0x514>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	4619      	mov	r1, r3
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	680b      	ldr	r3, [r1, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1fc      	bne.n	80071cc <ai_platform_api_get_network_report+0x4dc>
 80071d2:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <ai_platform_api_get_network_report+0x518>)
 80071d4:	4909      	ldr	r1, [pc, #36]	; (80071fc <ai_platform_api_get_network_report+0x50c>)
 80071d6:	4a0a      	ldr	r2, [pc, #40]	; (8007200 <ai_platform_api_get_network_report+0x510>)
 80071d8:	6019      	str	r1, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4293      	cmp	r3, r2
 80071de:	f43f af2b 	beq.w	8007038 <ai_platform_api_get_network_report+0x348>
 80071e2:	e7fe      	b.n	80071e2 <ai_platform_api_get_network_report+0x4f2>
 80071e4:	e0002000 	.word	0xe0002000
 80071e8:	5c001000 	.word	0x5c001000
 80071ec:	08031140 	.word	0x08031140
 80071f0:	e0042000 	.word	0xe0042000
 80071f4:	40023008 	.word	0x40023008
 80071f8:	40023000 	.word	0x40023000
 80071fc:	f407a5c2 	.word	0xf407a5c2
 8007200:	b5e8b5cd 	.word	0xb5e8b5cd
 8007204:	58024c08 	.word	0x58024c08
 8007208:	58024c00 	.word	0x58024c00

0800720c <ai_platform_network_create>:
 800720c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720e:	4d36      	ldr	r5, [pc, #216]	; (80072e8 <ai_platform_network_create+0xdc>)
 8007210:	b083      	sub	sp, #12
 8007212:	4e36      	ldr	r6, [pc, #216]	; (80072ec <ai_platform_network_create+0xe0>)
 8007214:	6829      	ldr	r1, [r5, #0]
 8007216:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800721a:	f021 0101 	bic.w	r1, r1, #1
 800721e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8007222:	6029      	str	r1, [r5, #0]
 8007224:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8007228:	6831      	ldr	r1, [r6, #0]
 800722a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800722e:	194d      	adds	r5, r1, r5
 8007230:	2d01      	cmp	r5, #1
 8007232:	d92f      	bls.n	8007294 <ai_platform_network_create+0x88>
 8007234:	f240 4549 	movw	r5, #1097	; 0x449
 8007238:	42a9      	cmp	r1, r5
 800723a:	d02b      	beq.n	8007294 <ai_platform_network_create+0x88>
 800723c:	492c      	ldr	r1, [pc, #176]	; (80072f0 <ai_platform_network_create+0xe4>)
 800723e:	6809      	ldr	r1, [r1, #0]
 8007240:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8007244:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8007248:	d015      	beq.n	8007276 <ai_platform_network_create+0x6a>
 800724a:	2800      	cmp	r0, #0
 800724c:	d031      	beq.n	80072b2 <ai_platform_network_create+0xa6>
 800724e:	461e      	mov	r6, r3
 8007250:	4613      	mov	r3, r2
 8007252:	4a28      	ldr	r2, [pc, #160]	; (80072f4 <ai_platform_network_create+0xe8>)
 8007254:	4605      	mov	r5, r0
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	f000 fd29 	bl	8007cb0 <core_init>
 800725e:	2800      	cmp	r0, #0
 8007260:	d02b      	beq.n	80072ba <ai_platform_network_create+0xae>
 8007262:	0223      	lsls	r3, r4, #8
 8007264:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007268:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800726c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8007270:	d92e      	bls.n	80072d0 <ai_platform_network_create+0xc4>
 8007272:	2301      	movs	r3, #1
 8007274:	e022      	b.n	80072bc <ai_platform_network_create+0xb0>
 8007276:	4920      	ldr	r1, [pc, #128]	; (80072f8 <ai_platform_network_create+0xec>)
 8007278:	2501      	movs	r5, #1
 800727a:	460e      	mov	r6, r1
 800727c:	600d      	str	r5, [r1, #0]
 800727e:	6831      	ldr	r1, [r6, #0]
 8007280:	2900      	cmp	r1, #0
 8007282:	d1fc      	bne.n	800727e <ai_platform_network_create+0x72>
 8007284:	491d      	ldr	r1, [pc, #116]	; (80072fc <ai_platform_network_create+0xf0>)
 8007286:	4e1e      	ldr	r6, [pc, #120]	; (8007300 <ai_platform_network_create+0xf4>)
 8007288:	4d1e      	ldr	r5, [pc, #120]	; (8007304 <ai_platform_network_create+0xf8>)
 800728a:	600e      	str	r6, [r1, #0]
 800728c:	6809      	ldr	r1, [r1, #0]
 800728e:	42a9      	cmp	r1, r5
 8007290:	d0db      	beq.n	800724a <ai_platform_network_create+0x3e>
 8007292:	e7fe      	b.n	8007292 <ai_platform_network_create+0x86>
 8007294:	491c      	ldr	r1, [pc, #112]	; (8007308 <ai_platform_network_create+0xfc>)
 8007296:	2501      	movs	r5, #1
 8007298:	460e      	mov	r6, r1
 800729a:	600d      	str	r5, [r1, #0]
 800729c:	6831      	ldr	r1, [r6, #0]
 800729e:	2900      	cmp	r1, #0
 80072a0:	d1fc      	bne.n	800729c <ai_platform_network_create+0x90>
 80072a2:	491a      	ldr	r1, [pc, #104]	; (800730c <ai_platform_network_create+0x100>)
 80072a4:	4e16      	ldr	r6, [pc, #88]	; (8007300 <ai_platform_network_create+0xf4>)
 80072a6:	4d17      	ldr	r5, [pc, #92]	; (8007304 <ai_platform_network_create+0xf8>)
 80072a8:	600e      	str	r6, [r1, #0]
 80072aa:	6809      	ldr	r1, [r1, #0]
 80072ac:	42a9      	cmp	r1, r5
 80072ae:	d0cc      	beq.n	800724a <ai_platform_network_create+0x3e>
 80072b0:	e7fe      	b.n	80072b0 <ai_platform_network_create+0xa4>
 80072b2:	f241 0010 	movw	r0, #4112	; 0x1010
 80072b6:	b003      	add	sp, #12
 80072b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ba:	2330      	movs	r3, #48	; 0x30
 80072bc:	2100      	movs	r1, #0
 80072be:	2210      	movs	r2, #16
 80072c0:	6029      	str	r1, [r5, #0]
 80072c2:	2000      	movs	r0, #0
 80072c4:	f363 0007 	bfi	r0, r3, #0, #8
 80072c8:	f362 201f 	bfi	r0, r2, #8, #24
 80072cc:	b003      	add	sp, #12
 80072ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d0:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <ai_platform_network_create+0x104>)
 80072d2:	a802      	add	r0, sp, #8
 80072d4:	f840 3d04 	str.w	r3, [r0, #-4]!
 80072d8:	f002 fc96 	bl	8009c08 <ai_check_custom_types>
 80072dc:	b110      	cbz	r0, 80072e4 <ai_platform_network_create+0xd8>
 80072de:	2200      	movs	r2, #0
 80072e0:	4613      	mov	r3, r2
 80072e2:	e7ee      	b.n	80072c2 <ai_platform_network_create+0xb6>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e7e9      	b.n	80072bc <ai_platform_network_create+0xb0>
 80072e8:	e0002000 	.word	0xe0002000
 80072ec:	e0042000 	.word	0xe0042000
 80072f0:	5c001000 	.word	0x5c001000
 80072f4:	a1c00100 	.word	0xa1c00100
 80072f8:	58024c08 	.word	0x58024c08
 80072fc:	58024c00 	.word	0x58024c00
 8007300:	f407a5c2 	.word	0xf407a5c2
 8007304:	b5e8b5cd 	.word	0xb5e8b5cd
 8007308:	40023008 	.word	0x40023008
 800730c:	40023000 	.word	0x40023000
 8007310:	84048403 	.word	0x84048403

08007314 <ai_platform_network_destroy>:
 8007314:	b118      	cbz	r0, 800731e <ai_platform_network_destroy+0xa>
 8007316:	4b3a      	ldr	r3, [pc, #232]	; (8007400 <ai_platform_network_destroy+0xec>)
 8007318:	6802      	ldr	r2, [r0, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d037      	beq.n	800738e <ai_platform_network_destroy+0x7a>
 800731e:	4a39      	ldr	r2, [pc, #228]	; (8007404 <ai_platform_network_destroy+0xf0>)
 8007320:	4939      	ldr	r1, [pc, #228]	; (8007408 <ai_platform_network_destroy+0xf4>)
 8007322:	6813      	ldr	r3, [r2, #0]
 8007324:	f023 0301 	bic.w	r3, r3, #1
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	680b      	ldr	r3, [r1, #0]
 800732c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007330:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007334:	185a      	adds	r2, r3, r1
 8007336:	2a01      	cmp	r2, #1
 8007338:	d90b      	bls.n	8007352 <ai_platform_network_destroy+0x3e>
 800733a:	f240 4249 	movw	r2, #1097	; 0x449
 800733e:	4293      	cmp	r3, r2
 8007340:	d007      	beq.n	8007352 <ai_platform_network_destroy+0x3e>
 8007342:	4b32      	ldr	r3, [pc, #200]	; (800740c <ai_platform_network_destroy+0xf8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800734a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800734e:	d00f      	beq.n	8007370 <ai_platform_network_destroy+0x5c>
 8007350:	4770      	bx	lr
 8007352:	4b2f      	ldr	r3, [pc, #188]	; (8007410 <ai_platform_network_destroy+0xfc>)
 8007354:	2201      	movs	r2, #1
 8007356:	4619      	mov	r1, r3
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	680b      	ldr	r3, [r1, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1fc      	bne.n	800735a <ai_platform_network_destroy+0x46>
 8007360:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <ai_platform_network_destroy+0x100>)
 8007362:	492d      	ldr	r1, [pc, #180]	; (8007418 <ai_platform_network_destroy+0x104>)
 8007364:	4a2d      	ldr	r2, [pc, #180]	; (800741c <ai_platform_network_destroy+0x108>)
 8007366:	6019      	str	r1, [r3, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4293      	cmp	r3, r2
 800736c:	d0f0      	beq.n	8007350 <ai_platform_network_destroy+0x3c>
 800736e:	e7fe      	b.n	800736e <ai_platform_network_destroy+0x5a>
 8007370:	4b2b      	ldr	r3, [pc, #172]	; (8007420 <ai_platform_network_destroy+0x10c>)
 8007372:	2201      	movs	r2, #1
 8007374:	4619      	mov	r1, r3
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	680b      	ldr	r3, [r1, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1fc      	bne.n	8007378 <ai_platform_network_destroy+0x64>
 800737e:	4b29      	ldr	r3, [pc, #164]	; (8007424 <ai_platform_network_destroy+0x110>)
 8007380:	4925      	ldr	r1, [pc, #148]	; (8007418 <ai_platform_network_destroy+0x104>)
 8007382:	4a26      	ldr	r2, [pc, #152]	; (800741c <ai_platform_network_destroy+0x108>)
 8007384:	6019      	str	r1, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4293      	cmp	r3, r2
 800738a:	d0e1      	beq.n	8007350 <ai_platform_network_destroy+0x3c>
 800738c:	e7fe      	b.n	800738c <ai_platform_network_destroy+0x78>
 800738e:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <ai_platform_network_destroy+0xf0>)
 8007390:	491d      	ldr	r1, [pc, #116]	; (8007408 <ai_platform_network_destroy+0xf4>)
 8007392:	6813      	ldr	r3, [r2, #0]
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800739e:	680b      	ldr	r3, [r1, #0]
 80073a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073a4:	189a      	adds	r2, r3, r2
 80073a6:	2a01      	cmp	r2, #1
 80073a8:	d90c      	bls.n	80073c4 <ai_platform_network_destroy+0xb0>
 80073aa:	f240 4249 	movw	r2, #1097	; 0x449
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d008      	beq.n	80073c4 <ai_platform_network_destroy+0xb0>
 80073b2:	4b16      	ldr	r3, [pc, #88]	; (800740c <ai_platform_network_destroy+0xf8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073ba:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80073be:	d010      	beq.n	80073e2 <ai_platform_network_destroy+0xce>
 80073c0:	2000      	movs	r0, #0
 80073c2:	4770      	bx	lr
 80073c4:	4b12      	ldr	r3, [pc, #72]	; (8007410 <ai_platform_network_destroy+0xfc>)
 80073c6:	2201      	movs	r2, #1
 80073c8:	4619      	mov	r1, r3
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	680b      	ldr	r3, [r1, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1fc      	bne.n	80073cc <ai_platform_network_destroy+0xb8>
 80073d2:	4b10      	ldr	r3, [pc, #64]	; (8007414 <ai_platform_network_destroy+0x100>)
 80073d4:	4910      	ldr	r1, [pc, #64]	; (8007418 <ai_platform_network_destroy+0x104>)
 80073d6:	4a11      	ldr	r2, [pc, #68]	; (800741c <ai_platform_network_destroy+0x108>)
 80073d8:	6019      	str	r1, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4293      	cmp	r3, r2
 80073de:	d0ef      	beq.n	80073c0 <ai_platform_network_destroy+0xac>
 80073e0:	e7fe      	b.n	80073e0 <ai_platform_network_destroy+0xcc>
 80073e2:	4b0f      	ldr	r3, [pc, #60]	; (8007420 <ai_platform_network_destroy+0x10c>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	4619      	mov	r1, r3
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	680b      	ldr	r3, [r1, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1fc      	bne.n	80073ea <ai_platform_network_destroy+0xd6>
 80073f0:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <ai_platform_network_destroy+0x110>)
 80073f2:	4909      	ldr	r1, [pc, #36]	; (8007418 <ai_platform_network_destroy+0x104>)
 80073f4:	4a09      	ldr	r2, [pc, #36]	; (800741c <ai_platform_network_destroy+0x108>)
 80073f6:	6019      	str	r1, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d0e0      	beq.n	80073c0 <ai_platform_network_destroy+0xac>
 80073fe:	e7fe      	b.n	80073fe <ai_platform_network_destroy+0xea>
 8007400:	a1c00100 	.word	0xa1c00100
 8007404:	e0002000 	.word	0xe0002000
 8007408:	e0042000 	.word	0xe0042000
 800740c:	5c001000 	.word	0x5c001000
 8007410:	40023008 	.word	0x40023008
 8007414:	40023000 	.word	0x40023000
 8007418:	f407a5c2 	.word	0xf407a5c2
 800741c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007420:	58024c08 	.word	0x58024c08
 8007424:	58024c00 	.word	0x58024c00

08007428 <ai_platform_network_init>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	2800      	cmp	r0, #0
 800742c:	d05e      	beq.n	80074ec <ai_platform_network_init+0xc4>
 800742e:	4b68      	ldr	r3, [pc, #416]	; (80075d0 <ai_platform_network_init+0x1a8>)
 8007430:	6802      	ldr	r2, [r0, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d15a      	bne.n	80074ec <ai_platform_network_init+0xc4>
 8007436:	4a67      	ldr	r2, [pc, #412]	; (80075d4 <ai_platform_network_init+0x1ac>)
 8007438:	4c67      	ldr	r4, [pc, #412]	; (80075d8 <ai_platform_network_init+0x1b0>)
 800743a:	6813      	ldr	r3, [r2, #0]
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800744c:	189a      	adds	r2, r3, r2
 800744e:	2a01      	cmp	r2, #1
 8007450:	d93d      	bls.n	80074ce <ai_platform_network_init+0xa6>
 8007452:	f240 4249 	movw	r2, #1097	; 0x449
 8007456:	4293      	cmp	r3, r2
 8007458:	d039      	beq.n	80074ce <ai_platform_network_init+0xa6>
 800745a:	4b60      	ldr	r3, [pc, #384]	; (80075dc <ai_platform_network_init+0x1b4>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007462:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007466:	d06b      	beq.n	8007540 <ai_platform_network_init+0x118>
 8007468:	4605      	mov	r5, r0
 800746a:	460c      	mov	r4, r1
 800746c:	2900      	cmp	r1, #0
 800746e:	f000 80a8 	beq.w	80075c2 <ai_platform_network_init+0x19a>
 8007472:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8007474:	690e      	ldr	r6, [r1, #16]
 8007476:	2f00      	cmp	r7, #0
 8007478:	f000 8092 	beq.w	80075a0 <ai_platform_network_init+0x178>
 800747c:	2e00      	cmp	r6, #0
 800747e:	d07d      	beq.n	800757c <ai_platform_network_init+0x154>
 8007480:	f104 0718 	add.w	r7, r4, #24
 8007484:	f105 0c18 	add.w	ip, r5, #24
 8007488:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800748c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800748e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007496:	2403      	movs	r4, #3
 8007498:	e88c 0003 	stmia.w	ip, {r0, r1}
 800749c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800749e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80074a0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80074a4:	e886 0003 	stmia.w	r6, {r0, r1}
 80074a8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80074aa:	60ec      	str	r4, [r5, #12]
 80074ac:	b16a      	cbz	r2, 80074ca <ai_platform_network_init+0xa2>
 80074ae:	68d3      	ldr	r3, [r2, #12]
 80074b0:	6095      	str	r5, [r2, #8]
 80074b2:	b153      	cbz	r3, 80074ca <ai_platform_network_init+0xa2>
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d104      	bne.n	80074c2 <ai_platform_network_init+0x9a>
 80074b8:	e007      	b.n	80074ca <ai_platform_network_init+0xa2>
 80074ba:	429a      	cmp	r2, r3
 80074bc:	4613      	mov	r3, r2
 80074be:	d004      	beq.n	80074ca <ai_platform_network_init+0xa2>
 80074c0:	b11a      	cbz	r2, 80074ca <ai_platform_network_init+0xa2>
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	609d      	str	r5, [r3, #8]
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	d1f7      	bne.n	80074ba <ai_platform_network_init+0x92>
 80074ca:	4628      	mov	r0, r5
 80074cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ce:	4b44      	ldr	r3, [pc, #272]	; (80075e0 <ai_platform_network_init+0x1b8>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	461c      	mov	r4, r3
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1fc      	bne.n	80074d6 <ai_platform_network_init+0xae>
 80074dc:	4b41      	ldr	r3, [pc, #260]	; (80075e4 <ai_platform_network_init+0x1bc>)
 80074de:	4c42      	ldr	r4, [pc, #264]	; (80075e8 <ai_platform_network_init+0x1c0>)
 80074e0:	4a42      	ldr	r2, [pc, #264]	; (80075ec <ai_platform_network_init+0x1c4>)
 80074e2:	601c      	str	r4, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d0be      	beq.n	8007468 <ai_platform_network_init+0x40>
 80074ea:	e7fe      	b.n	80074ea <ai_platform_network_init+0xc2>
 80074ec:	4a39      	ldr	r2, [pc, #228]	; (80075d4 <ai_platform_network_init+0x1ac>)
 80074ee:	493a      	ldr	r1, [pc, #232]	; (80075d8 <ai_platform_network_init+0x1b0>)
 80074f0:	6813      	ldr	r3, [r2, #0]
 80074f2:	f023 0301 	bic.w	r3, r3, #1
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	680b      	ldr	r3, [r1, #0]
 80074fa:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80074fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007502:	185a      	adds	r2, r3, r1
 8007504:	2a01      	cmp	r2, #1
 8007506:	d90c      	bls.n	8007522 <ai_platform_network_init+0xfa>
 8007508:	f240 4249 	movw	r2, #1097	; 0x449
 800750c:	4293      	cmp	r3, r2
 800750e:	d008      	beq.n	8007522 <ai_platform_network_init+0xfa>
 8007510:	4b32      	ldr	r3, [pc, #200]	; (80075dc <ai_platform_network_init+0x1b4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007518:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800751c:	d01f      	beq.n	800755e <ai_platform_network_init+0x136>
 800751e:	2000      	movs	r0, #0
 8007520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007522:	4b2f      	ldr	r3, [pc, #188]	; (80075e0 <ai_platform_network_init+0x1b8>)
 8007524:	2201      	movs	r2, #1
 8007526:	4619      	mov	r1, r3
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	680b      	ldr	r3, [r1, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1fc      	bne.n	800752a <ai_platform_network_init+0x102>
 8007530:	4b2c      	ldr	r3, [pc, #176]	; (80075e4 <ai_platform_network_init+0x1bc>)
 8007532:	492d      	ldr	r1, [pc, #180]	; (80075e8 <ai_platform_network_init+0x1c0>)
 8007534:	4a2d      	ldr	r2, [pc, #180]	; (80075ec <ai_platform_network_init+0x1c4>)
 8007536:	6019      	str	r1, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4293      	cmp	r3, r2
 800753c:	d0ef      	beq.n	800751e <ai_platform_network_init+0xf6>
 800753e:	e7fe      	b.n	800753e <ai_platform_network_init+0x116>
 8007540:	4b2b      	ldr	r3, [pc, #172]	; (80075f0 <ai_platform_network_init+0x1c8>)
 8007542:	2201      	movs	r2, #1
 8007544:	461c      	mov	r4, r3
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1fc      	bne.n	8007548 <ai_platform_network_init+0x120>
 800754e:	4b29      	ldr	r3, [pc, #164]	; (80075f4 <ai_platform_network_init+0x1cc>)
 8007550:	4c25      	ldr	r4, [pc, #148]	; (80075e8 <ai_platform_network_init+0x1c0>)
 8007552:	4a26      	ldr	r2, [pc, #152]	; (80075ec <ai_platform_network_init+0x1c4>)
 8007554:	601c      	str	r4, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4293      	cmp	r3, r2
 800755a:	d085      	beq.n	8007468 <ai_platform_network_init+0x40>
 800755c:	e7fe      	b.n	800755c <ai_platform_network_init+0x134>
 800755e:	4b24      	ldr	r3, [pc, #144]	; (80075f0 <ai_platform_network_init+0x1c8>)
 8007560:	2201      	movs	r2, #1
 8007562:	4619      	mov	r1, r3
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	680b      	ldr	r3, [r1, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1fc      	bne.n	8007566 <ai_platform_network_init+0x13e>
 800756c:	4b21      	ldr	r3, [pc, #132]	; (80075f4 <ai_platform_network_init+0x1cc>)
 800756e:	491e      	ldr	r1, [pc, #120]	; (80075e8 <ai_platform_network_init+0x1c0>)
 8007570:	4a1e      	ldr	r2, [pc, #120]	; (80075ec <ai_platform_network_init+0x1c4>)
 8007572:	6019      	str	r1, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4293      	cmp	r3, r2
 8007578:	d0d1      	beq.n	800751e <ai_platform_network_init+0xf6>
 800757a:	e7fe      	b.n	800757a <ai_platform_network_init+0x152>
 800757c:	8921      	ldrh	r1, [r4, #8]
 800757e:	88e2      	ldrh	r2, [r4, #6]
 8007580:	68e3      	ldr	r3, [r4, #12]
 8007582:	fb02 f201 	mul.w	r2, r2, r1
 8007586:	fb03 f302 	mul.w	r3, r3, r2
 800758a:	2b00      	cmp	r3, #0
 800758c:	f43f af78 	beq.w	8007480 <ai_platform_network_init+0x58>
 8007590:	f105 0010 	add.w	r0, r5, #16
 8007594:	2212      	movs	r2, #18
 8007596:	2110      	movs	r1, #16
 8007598:	f000 fb92 	bl	8007cc0 <core_set_error>
 800759c:	4630      	mov	r0, r6
 800759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a0:	8c09      	ldrh	r1, [r1, #32]
 80075a2:	8be2      	ldrh	r2, [r4, #30]
 80075a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075a6:	fb02 f201 	mul.w	r2, r2, r1
 80075aa:	fb03 f302 	mul.w	r3, r3, r2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f43f af64 	beq.w	800747c <ai_platform_network_init+0x54>
 80075b4:	2213      	movs	r2, #19
 80075b6:	2110      	movs	r1, #16
 80075b8:	3010      	adds	r0, #16
 80075ba:	f000 fb81 	bl	8007cc0 <core_set_error>
 80075be:	4638      	mov	r0, r7
 80075c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c2:	2211      	movs	r2, #17
 80075c4:	2110      	movs	r1, #16
 80075c6:	3010      	adds	r0, #16
 80075c8:	f000 fb7a 	bl	8007cc0 <core_set_error>
 80075cc:	4620      	mov	r0, r4
 80075ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d0:	a1c00100 	.word	0xa1c00100
 80075d4:	e0002000 	.word	0xe0002000
 80075d8:	e0042000 	.word	0xe0042000
 80075dc:	5c001000 	.word	0x5c001000
 80075e0:	40023008 	.word	0x40023008
 80075e4:	40023000 	.word	0x40023000
 80075e8:	f407a5c2 	.word	0xf407a5c2
 80075ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80075f0:	58024c08 	.word	0x58024c08
 80075f4:	58024c00 	.word	0x58024c00

080075f8 <ai_platform_network_post_init>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	b118      	cbz	r0, 8007604 <ai_platform_network_post_init+0xc>
 80075fc:	4b4a      	ldr	r3, [pc, #296]	; (8007728 <ai_platform_network_post_init+0x130>)
 80075fe:	6802      	ldr	r2, [r0, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d029      	beq.n	8007658 <ai_platform_network_post_init+0x60>
 8007604:	4a49      	ldr	r2, [pc, #292]	; (800772c <ai_platform_network_post_init+0x134>)
 8007606:	494a      	ldr	r1, [pc, #296]	; (8007730 <ai_platform_network_post_init+0x138>)
 8007608:	6813      	ldr	r3, [r2, #0]
 800760a:	f023 0301 	bic.w	r3, r3, #1
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	680b      	ldr	r3, [r1, #0]
 8007612:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800761a:	185a      	adds	r2, r3, r1
 800761c:	2a01      	cmp	r2, #1
 800761e:	d90c      	bls.n	800763a <ai_platform_network_post_init+0x42>
 8007620:	f240 4249 	movw	r2, #1097	; 0x449
 8007624:	4293      	cmp	r3, r2
 8007626:	d008      	beq.n	800763a <ai_platform_network_post_init+0x42>
 8007628:	4b42      	ldr	r3, [pc, #264]	; (8007734 <ai_platform_network_post_init+0x13c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007630:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007634:	d044      	beq.n	80076c0 <ai_platform_network_post_init+0xc8>
 8007636:	2000      	movs	r0, #0
 8007638:	bd38      	pop	{r3, r4, r5, pc}
 800763a:	4b3f      	ldr	r3, [pc, #252]	; (8007738 <ai_platform_network_post_init+0x140>)
 800763c:	2201      	movs	r2, #1
 800763e:	4619      	mov	r1, r3
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	680b      	ldr	r3, [r1, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1fc      	bne.n	8007642 <ai_platform_network_post_init+0x4a>
 8007648:	4b3c      	ldr	r3, [pc, #240]	; (800773c <ai_platform_network_post_init+0x144>)
 800764a:	493d      	ldr	r1, [pc, #244]	; (8007740 <ai_platform_network_post_init+0x148>)
 800764c:	4a3d      	ldr	r2, [pc, #244]	; (8007744 <ai_platform_network_post_init+0x14c>)
 800764e:	6019      	str	r1, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4293      	cmp	r3, r2
 8007654:	d0ef      	beq.n	8007636 <ai_platform_network_post_init+0x3e>
 8007656:	e7fe      	b.n	8007656 <ai_platform_network_post_init+0x5e>
 8007658:	4a34      	ldr	r2, [pc, #208]	; (800772c <ai_platform_network_post_init+0x134>)
 800765a:	4935      	ldr	r1, [pc, #212]	; (8007730 <ai_platform_network_post_init+0x138>)
 800765c:	6813      	ldr	r3, [r2, #0]
 800765e:	f023 0301 	bic.w	r3, r3, #1
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007668:	680b      	ldr	r3, [r1, #0]
 800766a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800766e:	189a      	adds	r2, r3, r2
 8007670:	2a01      	cmp	r2, #1
 8007672:	d94a      	bls.n	800770a <ai_platform_network_post_init+0x112>
 8007674:	f240 4249 	movw	r2, #1097	; 0x449
 8007678:	4293      	cmp	r3, r2
 800767a:	d046      	beq.n	800770a <ai_platform_network_post_init+0x112>
 800767c:	4b2d      	ldr	r3, [pc, #180]	; (8007734 <ai_platform_network_post_init+0x13c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007684:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007688:	d030      	beq.n	80076ec <ai_platform_network_post_init+0xf4>
 800768a:	68c3      	ldr	r3, [r0, #12]
 800768c:	4604      	mov	r4, r0
 800768e:	f013 0502 	ands.w	r5, r3, #2
 8007692:	d024      	beq.n	80076de <ai_platform_network_post_init+0xe6>
 8007694:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007696:	b18b      	cbz	r3, 80076bc <ai_platform_network_post_init+0xc4>
 8007698:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800769a:	b90d      	cbnz	r5, 80076a0 <ai_platform_network_post_init+0xa8>
 800769c:	e00e      	b.n	80076bc <ai_platform_network_post_init+0xc4>
 800769e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80076a2:	4629      	mov	r1, r5
 80076a4:	2000      	movs	r0, #0
 80076a6:	4798      	blx	r3
 80076a8:	68ea      	ldr	r2, [r5, #12]
 80076aa:	1b53      	subs	r3, r2, r5
 80076ac:	4615      	mov	r5, r2
 80076ae:	bf18      	it	ne
 80076b0:	2301      	movne	r3, #1
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	bf08      	it	eq
 80076b6:	2300      	moveq	r3, #0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f0      	bne.n	800769e <ai_platform_network_post_init+0xa6>
 80076bc:	2001      	movs	r0, #1
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	4b21      	ldr	r3, [pc, #132]	; (8007748 <ai_platform_network_post_init+0x150>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	4619      	mov	r1, r3
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	680b      	ldr	r3, [r1, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1fc      	bne.n	80076c8 <ai_platform_network_post_init+0xd0>
 80076ce:	4b1f      	ldr	r3, [pc, #124]	; (800774c <ai_platform_network_post_init+0x154>)
 80076d0:	491b      	ldr	r1, [pc, #108]	; (8007740 <ai_platform_network_post_init+0x148>)
 80076d2:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <ai_platform_network_post_init+0x14c>)
 80076d4:	6019      	str	r1, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4293      	cmp	r3, r2
 80076da:	d0ac      	beq.n	8007636 <ai_platform_network_post_init+0x3e>
 80076dc:	e7fe      	b.n	80076dc <ai_platform_network_post_init+0xe4>
 80076de:	2210      	movs	r2, #16
 80076e0:	2111      	movs	r1, #17
 80076e2:	3010      	adds	r0, #16
 80076e4:	f000 faec 	bl	8007cc0 <core_set_error>
 80076e8:	4628      	mov	r0, r5
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	4b16      	ldr	r3, [pc, #88]	; (8007748 <ai_platform_network_post_init+0x150>)
 80076ee:	2201      	movs	r2, #1
 80076f0:	4619      	mov	r1, r3
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	680b      	ldr	r3, [r1, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1fc      	bne.n	80076f4 <ai_platform_network_post_init+0xfc>
 80076fa:	4b14      	ldr	r3, [pc, #80]	; (800774c <ai_platform_network_post_init+0x154>)
 80076fc:	4910      	ldr	r1, [pc, #64]	; (8007740 <ai_platform_network_post_init+0x148>)
 80076fe:	4a11      	ldr	r2, [pc, #68]	; (8007744 <ai_platform_network_post_init+0x14c>)
 8007700:	6019      	str	r1, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4293      	cmp	r3, r2
 8007706:	d0c0      	beq.n	800768a <ai_platform_network_post_init+0x92>
 8007708:	e7fe      	b.n	8007708 <ai_platform_network_post_init+0x110>
 800770a:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <ai_platform_network_post_init+0x140>)
 800770c:	2201      	movs	r2, #1
 800770e:	4619      	mov	r1, r3
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	680b      	ldr	r3, [r1, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1fc      	bne.n	8007712 <ai_platform_network_post_init+0x11a>
 8007718:	4b08      	ldr	r3, [pc, #32]	; (800773c <ai_platform_network_post_init+0x144>)
 800771a:	4909      	ldr	r1, [pc, #36]	; (8007740 <ai_platform_network_post_init+0x148>)
 800771c:	4a09      	ldr	r2, [pc, #36]	; (8007744 <ai_platform_network_post_init+0x14c>)
 800771e:	6019      	str	r1, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4293      	cmp	r3, r2
 8007724:	d0b1      	beq.n	800768a <ai_platform_network_post_init+0x92>
 8007726:	e7fe      	b.n	8007726 <ai_platform_network_post_init+0x12e>
 8007728:	a1c00100 	.word	0xa1c00100
 800772c:	e0002000 	.word	0xe0002000
 8007730:	e0042000 	.word	0xe0042000
 8007734:	5c001000 	.word	0x5c001000
 8007738:	40023008 	.word	0x40023008
 800773c:	40023000 	.word	0x40023000
 8007740:	f407a5c2 	.word	0xf407a5c2
 8007744:	b5e8b5cd 	.word	0xb5e8b5cd
 8007748:	58024c08 	.word	0x58024c08
 800774c:	58024c00 	.word	0x58024c00

08007750 <ai_platform_network_process>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	4692      	mov	sl, r2
 8007756:	b083      	sub	sp, #12
 8007758:	4604      	mov	r4, r0
 800775a:	b120      	cbz	r0, 8007766 <ai_platform_network_process+0x16>
 800775c:	4b86      	ldr	r3, [pc, #536]	; (8007978 <ai_platform_network_process+0x228>)
 800775e:	6802      	ldr	r2, [r0, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	bf18      	it	ne
 8007764:	2400      	movne	r4, #0
 8007766:	4a85      	ldr	r2, [pc, #532]	; (800797c <ai_platform_network_process+0x22c>)
 8007768:	4885      	ldr	r0, [pc, #532]	; (8007980 <ai_platform_network_process+0x230>)
 800776a:	6813      	ldr	r3, [r2, #0]
 800776c:	f023 0301 	bic.w	r3, r3, #1
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	6803      	ldr	r3, [r0, #0]
 8007774:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 8007778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800777c:	181a      	adds	r2, r3, r0
 800777e:	2a01      	cmp	r2, #1
 8007780:	f240 80c6 	bls.w	8007910 <ai_platform_network_process+0x1c0>
 8007784:	f240 4249 	movw	r2, #1097	; 0x449
 8007788:	4293      	cmp	r3, r2
 800778a:	f000 80c1 	beq.w	8007910 <ai_platform_network_process+0x1c0>
 800778e:	4b7d      	ldr	r3, [pc, #500]	; (8007984 <ai_platform_network_process+0x234>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007796:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800779a:	f000 80a9 	beq.w	80078f0 <ai_platform_network_process+0x1a0>
 800779e:	2c00      	cmp	r4, #0
 80077a0:	f000 80db 	beq.w	800795a <ai_platform_network_process+0x20a>
 80077a4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80077a8:	68e0      	ldr	r0, [r4, #12]
 80077aa:	461a      	mov	r2, r3
 80077ac:	f000 0003 	and.w	r0, r0, #3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 80bd 	beq.w	8007930 <ai_platform_network_process+0x1e0>
 80077b6:	2600      	movs	r6, #0
 80077b8:	2803      	cmp	r0, #3
 80077ba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80077bc:	6166      	str	r6, [r4, #20]
 80077be:	f040 80c6 	bne.w	800794e <ai_platform_network_process+0x1fe>
 80077c2:	2900      	cmp	r1, #0
 80077c4:	f000 80b7 	beq.w	8007936 <ai_platform_network_process+0x1e6>
 80077c8:	fab5 f085 	clz	r0, r5
 80077cc:	0940      	lsrs	r0, r0, #5
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f040 80b1 	bne.w	8007936 <ai_platform_network_process+0x1e6>
 80077d4:	882e      	ldrh	r6, [r5, #0]
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	f000 80ad 	beq.w	8007936 <ai_platform_network_process+0x1e6>
 80077dc:	888f      	ldrh	r7, [r1, #4]
 80077de:	686e      	ldr	r6, [r5, #4]
 80077e0:	9701      	str	r7, [sp, #4]
 80077e2:	2e00      	cmp	r6, #0
 80077e4:	f000 825f 	beq.w	8007ca6 <ai_platform_network_process+0x556>
 80077e8:	6836      	ldr	r6, [r6, #0]
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	f000 825b 	beq.w	8007ca6 <ai_platform_network_process+0x556>
 80077f0:	68ab      	ldr	r3, [r5, #8]
 80077f2:	f8d3 9000 	ldr.w	r9, [r3]
 80077f6:	f1b9 0f00 	cmp.w	r9, #0
 80077fa:	f000 809c 	beq.w	8007936 <ai_platform_network_process+0x1e6>
 80077fe:	460f      	mov	r7, r1
 8007800:	4680      	mov	r8, r0
 8007802:	e05e      	b.n	80078c2 <ai_platform_network_process+0x172>
 8007804:	68f3      	ldr	r3, [r6, #12]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	455a      	cmp	r2, fp
 800780a:	d168      	bne.n	80078de <ai_platform_network_process+0x18e>
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	4572      	cmp	r2, lr
 8007810:	d165      	bne.n	80078de <ai_platform_network_process+0x18e>
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	459c      	cmp	ip, r3
 8007816:	d162      	bne.n	80078de <ai_platform_network_process+0x18e>
 8007818:	6800      	ldr	r0, [r0, #0]
 800781a:	f002 faa5 	bl	8009d68 <ai_array_get_byte_size>
 800781e:	68f2      	ldr	r2, [r6, #12]
 8007820:	6973      	ldr	r3, [r6, #20]
 8007822:	68d2      	ldr	r2, [r2, #12]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	fb03 f302 	mul.w	r3, r3, r2
 800782a:	4298      	cmp	r0, r3
 800782c:	d357      	bcc.n	80078de <ai_platform_network_process+0x18e>
 800782e:	69b3      	ldr	r3, [r6, #24]
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	f002 fa4d 	bl	8009cd0 <ai_array_to_buffer_fmt>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	4043      	eors	r3, r0
 800783a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800783e:	f040 8229 	bne.w	8007c94 <ai_platform_network_process+0x544>
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 821d 	beq.w	8007c84 <ai_platform_network_process+0x534>
 800784a:	88bb      	ldrh	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 808a 	beq.w	8007966 <ai_platform_network_process+0x216>
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	68f1      	ldr	r1, [r6, #12]
 8007856:	429a      	cmp	r2, r3
 8007858:	68c9      	ldr	r1, [r1, #12]
 800785a:	bf38      	it	cc
 800785c:	461a      	movcc	r2, r3
 800785e:	9201      	str	r2, [sp, #4]
 8007860:	6972      	ldr	r2, [r6, #20]
 8007862:	68d3      	ldr	r3, [r2, #12]
 8007864:	fb03 f301 	mul.w	r3, r3, r1
 8007868:	f8c9 3008 	str.w	r3, [r9, #8]
 800786c:	88ba      	ldrh	r2, [r7, #4]
 800786e:	fb03 f302 	mul.w	r3, r3, r2
 8007872:	f8c9 300c 	str.w	r3, [r9, #12]
 8007876:	6939      	ldr	r1, [r7, #16]
 8007878:	f8c9 1004 	str.w	r1, [r9, #4]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4413      	add	r3, r2
 8007880:	f8c9 3000 	str.w	r3, [r9]
 8007884:	69b0      	ldr	r0, [r6, #24]
 8007886:	6803      	ldr	r3, [r0, #0]
 8007888:	009a      	lsls	r2, r3, #2
 800788a:	d408      	bmi.n	800789e <ai_platform_network_process+0x14e>
 800788c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	4419      	add	r1, r3
 8007894:	6081      	str	r1, [r0, #8]
 8007896:	69b3      	ldr	r3, [r6, #24]
 8007898:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800789c:	60da      	str	r2, [r3, #12]
 800789e:	f108 0801 	add.w	r8, r8, #1
 80078a2:	882b      	ldrh	r3, [r5, #0]
 80078a4:	4598      	cmp	r8, r3
 80078a6:	d27b      	bcs.n	80079a0 <ai_platform_network_process+0x250>
 80078a8:	686b      	ldr	r3, [r5, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d078      	beq.n	80079a0 <ai_platform_network_process+0x250>
 80078ae:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 80078b2:	2e00      	cmp	r6, #0
 80078b4:	d074      	beq.n	80079a0 <ai_platform_network_process+0x250>
 80078b6:	68ab      	ldr	r3, [r5, #8]
 80078b8:	3718      	adds	r7, #24
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 80078c0:	d039      	beq.n	8007936 <ai_platform_network_process+0x1e6>
 80078c2:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 80078c6:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 80078ca:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80078ce:	fb0b f30e 	mul.w	r3, fp, lr
 80078d2:	69b0      	ldr	r0, [r6, #24]
 80078d4:	fb0c f303 	mul.w	r3, ip, r3
 80078d8:	6841      	ldr	r1, [r0, #4]
 80078da:	4299      	cmp	r1, r3
 80078dc:	d292      	bcs.n	8007804 <ai_platform_network_process+0xb4>
 80078de:	f104 0010 	add.w	r0, r4, #16
 80078e2:	2218      	movs	r2, #24
 80078e4:	2112      	movs	r1, #18
 80078e6:	f04f 0b00 	mov.w	fp, #0
 80078ea:	f000 f9e9 	bl	8007cc0 <core_set_error>
 80078ee:	e02a      	b.n	8007946 <ai_platform_network_process+0x1f6>
 80078f0:	4b25      	ldr	r3, [pc, #148]	; (8007988 <ai_platform_network_process+0x238>)
 80078f2:	2201      	movs	r2, #1
 80078f4:	4618      	mov	r0, r3
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	6803      	ldr	r3, [r0, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1fc      	bne.n	80078f8 <ai_platform_network_process+0x1a8>
 80078fe:	4b23      	ldr	r3, [pc, #140]	; (800798c <ai_platform_network_process+0x23c>)
 8007900:	4823      	ldr	r0, [pc, #140]	; (8007990 <ai_platform_network_process+0x240>)
 8007902:	4a24      	ldr	r2, [pc, #144]	; (8007994 <ai_platform_network_process+0x244>)
 8007904:	6018      	str	r0, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4293      	cmp	r3, r2
 800790a:	f43f af48 	beq.w	800779e <ai_platform_network_process+0x4e>
 800790e:	e7fe      	b.n	800790e <ai_platform_network_process+0x1be>
 8007910:	4b21      	ldr	r3, [pc, #132]	; (8007998 <ai_platform_network_process+0x248>)
 8007912:	2201      	movs	r2, #1
 8007914:	4618      	mov	r0, r3
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	6803      	ldr	r3, [r0, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1fc      	bne.n	8007918 <ai_platform_network_process+0x1c8>
 800791e:	4b1f      	ldr	r3, [pc, #124]	; (800799c <ai_platform_network_process+0x24c>)
 8007920:	481b      	ldr	r0, [pc, #108]	; (8007990 <ai_platform_network_process+0x240>)
 8007922:	4a1c      	ldr	r2, [pc, #112]	; (8007994 <ai_platform_network_process+0x244>)
 8007924:	6018      	str	r0, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4293      	cmp	r3, r2
 800792a:	f43f af38 	beq.w	800779e <ai_platform_network_process+0x4e>
 800792e:	e7fe      	b.n	800792e <ai_platform_network_process+0x1de>
 8007930:	2803      	cmp	r0, #3
 8007932:	6163      	str	r3, [r4, #20]
 8007934:	d10b      	bne.n	800794e <ai_platform_network_process+0x1fe>
 8007936:	f04f 0b00 	mov.w	fp, #0
 800793a:	f104 0010 	add.w	r0, r4, #16
 800793e:	2217      	movs	r2, #23
 8007940:	2112      	movs	r1, #18
 8007942:	f000 f9bd 	bl	8007cc0 <core_set_error>
 8007946:	4658      	mov	r0, fp
 8007948:	b003      	add	sp, #12
 800794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794e:	f104 0010 	add.w	r0, r4, #16
 8007952:	2230      	movs	r2, #48	; 0x30
 8007954:	2111      	movs	r1, #17
 8007956:	f000 f9b3 	bl	8007cc0 <core_set_error>
 800795a:	f04f 0b00 	mov.w	fp, #0
 800795e:	4658      	mov	r0, fp
 8007960:	b003      	add	sp, #12
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	f104 0010 	add.w	r0, r4, #16
 800796a:	2221      	movs	r2, #33	; 0x21
 800796c:	2112      	movs	r1, #18
 800796e:	469b      	mov	fp, r3
 8007970:	f000 f9a6 	bl	8007cc0 <core_set_error>
 8007974:	e7e7      	b.n	8007946 <ai_platform_network_process+0x1f6>
 8007976:	bf00      	nop
 8007978:	a1c00100 	.word	0xa1c00100
 800797c:	e0002000 	.word	0xe0002000
 8007980:	e0042000 	.word	0xe0042000
 8007984:	5c001000 	.word	0x5c001000
 8007988:	58024c08 	.word	0x58024c08
 800798c:	58024c00 	.word	0x58024c00
 8007990:	f407a5c2 	.word	0xf407a5c2
 8007994:	b5e8b5cd 	.word	0xb5e8b5cd
 8007998:	40023008 	.word	0x40023008
 800799c:	40023000 	.word	0x40023000
 80079a0:	f1ba 0f00 	cmp.w	sl, #0
 80079a4:	f000 808c 	beq.w	8007ac0 <ai_platform_network_process+0x370>
 80079a8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	f240 813b 	bls.w	8007c28 <ai_platform_network_process+0x4d8>
 80079b2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80079b4:	f115 0f0c 	cmn.w	r5, #12
 80079b8:	f000 8136 	beq.w	8007c28 <ai_platform_network_process+0x4d8>
 80079bc:	89ab      	ldrh	r3, [r5, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 8132 	beq.w	8007c28 <ai_platform_network_process+0x4d8>
 80079c4:	4656      	mov	r6, sl
 80079c6:	f04f 0900 	mov.w	r9, #0
 80079ca:	9400      	str	r4, [sp, #0]
 80079cc:	4599      	cmp	r9, r3
 80079ce:	d274      	bcs.n	8007aba <ai_platform_network_process+0x36a>
 80079d0:	692b      	ldr	r3, [r5, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d071      	beq.n	8007aba <ai_platform_network_process+0x36a>
 80079d6:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 80079da:	2f00      	cmp	r7, #0
 80079dc:	d06d      	beq.n	8007aba <ai_platform_network_process+0x36a>
 80079de:	696b      	ldr	r3, [r5, #20]
 80079e0:	ea4f 1409 	mov.w	r4, r9, lsl #4
 80079e4:	f8d3 8000 	ldr.w	r8, [r3]
 80079e8:	eb18 0a04 	adds.w	sl, r8, r4
 80079ec:	f000 8125 	beq.w	8007c3a <ai_platform_network_process+0x4ea>
 80079f0:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 80079f4:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 80079f8:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80079fc:	fb0b f30e 	mul.w	r3, fp, lr
 8007a00:	69b8      	ldr	r0, [r7, #24]
 8007a02:	fb0c f303 	mul.w	r3, ip, r3
 8007a06:	6841      	ldr	r1, [r0, #4]
 8007a08:	4299      	cmp	r1, r3
 8007a0a:	f0c0 810c 	bcc.w	8007c26 <ai_platform_network_process+0x4d6>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	455a      	cmp	r2, fp
 8007a14:	f040 8107 	bne.w	8007c26 <ai_platform_network_process+0x4d6>
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	4572      	cmp	r2, lr
 8007a1c:	f040 8103 	bne.w	8007c26 <ai_platform_network_process+0x4d6>
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	459c      	cmp	ip, r3
 8007a24:	f040 80ff 	bne.w	8007c26 <ai_platform_network_process+0x4d6>
 8007a28:	6800      	ldr	r0, [r0, #0]
 8007a2a:	f002 f99d 	bl	8009d68 <ai_array_get_byte_size>
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	68d2      	ldr	r2, [r2, #12]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	fb03 f302 	mul.w	r3, r3, r2
 8007a3a:	4298      	cmp	r0, r3
 8007a3c:	f0c0 80f3 	bcc.w	8007c26 <ai_platform_network_process+0x4d6>
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	f002 f944 	bl	8009cd0 <ai_array_to_buffer_fmt>
 8007a48:	6833      	ldr	r3, [r6, #0]
 8007a4a:	4043      	eors	r3, r0
 8007a4c:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007a50:	f040 810e 	bne.w	8007c70 <ai_platform_network_process+0x520>
 8007a54:	6933      	ldr	r3, [r6, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 8101 	beq.w	8007c5e <ai_platform_network_process+0x50e>
 8007a5c:	88b3      	ldrh	r3, [r6, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 80f4 	beq.w	8007c4c <ai_platform_network_process+0x4fc>
 8007a64:	9a01      	ldr	r2, [sp, #4]
 8007a66:	68f9      	ldr	r1, [r7, #12]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	68c9      	ldr	r1, [r1, #12]
 8007a6c:	bf38      	it	cc
 8007a6e:	461a      	movcc	r2, r3
 8007a70:	9201      	str	r2, [sp, #4]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	68d3      	ldr	r3, [r2, #12]
 8007a76:	fb03 f301 	mul.w	r3, r3, r1
 8007a7a:	f8ca 3008 	str.w	r3, [sl, #8]
 8007a7e:	88b2      	ldrh	r2, [r6, #4]
 8007a80:	fb03 f302 	mul.w	r3, r3, r2
 8007a84:	f8ca 300c 	str.w	r3, [sl, #12]
 8007a88:	6931      	ldr	r1, [r6, #16]
 8007a8a:	f8ca 1004 	str.w	r1, [sl, #4]
 8007a8e:	6932      	ldr	r2, [r6, #16]
 8007a90:	4413      	add	r3, r2
 8007a92:	f848 3004 	str.w	r3, [r8, r4]
 8007a96:	69b8      	ldr	r0, [r7, #24]
 8007a98:	6803      	ldr	r3, [r0, #0]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	d408      	bmi.n	8007ab0 <ai_platform_network_process+0x360>
 8007a9e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007aa2:	1a9b      	subs	r3, r3, r2
 8007aa4:	4419      	add	r1, r3
 8007aa6:	6081      	str	r1, [r0, #8]
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007aae:	60da      	str	r2, [r3, #12]
 8007ab0:	f109 0901 	add.w	r9, r9, #1
 8007ab4:	3618      	adds	r6, #24
 8007ab6:	89ab      	ldrh	r3, [r5, #12]
 8007ab8:	e788      	b.n	80079cc <ai_platform_network_process+0x27c>
 8007aba:	e9dd 4300 	ldrd	r4, r3, [sp]
 8007abe:	82a3      	strh	r3, [r4, #20]
 8007ac0:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	f000 80a9 	beq.w	8007c1c <ai_platform_network_process+0x4cc>
 8007aca:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007acc:	2a01      	cmp	r2, #1
 8007ace:	f240 80a8 	bls.w	8007c22 <ai_platform_network_process+0x4d2>
 8007ad2:	f105 060c 	add.w	r6, r5, #12
 8007ad6:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8007ada:	8aa3      	ldrh	r3, [r4, #20]
 8007adc:	455b      	cmp	r3, fp
 8007ade:	f67f af32 	bls.w	8007946 <ai_platform_network_process+0x1f6>
 8007ae2:	9400      	str	r4, [sp, #0]
 8007ae4:	2d00      	cmp	r5, #0
 8007ae6:	d037      	beq.n	8007b58 <ai_platform_network_process+0x408>
 8007ae8:	882b      	ldrh	r3, [r5, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d034      	beq.n	8007b58 <ai_platform_network_process+0x408>
 8007aee:	686b      	ldr	r3, [r5, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d031      	beq.n	8007b58 <ai_platform_network_process+0x408>
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d02e      	beq.n	8007b58 <ai_platform_network_process+0x408>
 8007afa:	f04f 0800 	mov.w	r8, #0
 8007afe:	e01a      	b.n	8007b36 <ai_platform_network_process+0x3e6>
 8007b00:	68d4      	ldr	r4, [r2, #12]
 8007b02:	1b00      	subs	r0, r0, r4
 8007b04:	4401      	add	r1, r0
 8007b06:	6091      	str	r1, [r2, #8]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	60da      	str	r2, [r3, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f108 0801 	add.w	r8, r8, #1
 8007b14:	68b9      	ldr	r1, [r7, #8]
 8007b16:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007b1a:	440b      	add	r3, r1
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d301      	bcc.n	8007b24 <ai_platform_network_process+0x3d4>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	607b      	str	r3, [r7, #4]
 8007b26:	882b      	ldrh	r3, [r5, #0]
 8007b28:	4598      	cmp	r8, r3
 8007b2a:	d215      	bcs.n	8007b58 <ai_platform_network_process+0x408>
 8007b2c:	686b      	ldr	r3, [r5, #4]
 8007b2e:	b19b      	cbz	r3, 8007b58 <ai_platform_network_process+0x408>
 8007b30:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007b34:	b183      	cbz	r3, 8007b58 <ai_platform_network_process+0x408>
 8007b36:	68a9      	ldr	r1, [r5, #8]
 8007b38:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	f8d1 a000 	ldr.w	sl, [r1]
 8007b42:	6814      	ldr	r4, [r2, #0]
 8007b44:	eb0a 0709 	add.w	r7, sl, r9
 8007b48:	6890      	ldr	r0, [r2, #8]
 8007b4a:	00a4      	lsls	r4, r4, #2
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	d5d7      	bpl.n	8007b00 <ai_platform_network_process+0x3b0>
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	f002 f95b 	bl	8009e0c <memcpy>
 8007b56:	e7da      	b.n	8007b0e <ai_platform_network_process+0x3be>
 8007b58:	9800      	ldr	r0, [sp, #0]
 8007b5a:	f002 f87f 	bl	8009c5c <ai_layers_forward_all>
 8007b5e:	2e00      	cmp	r6, #0
 8007b60:	d04a      	beq.n	8007bf8 <ai_platform_network_process+0x4a8>
 8007b62:	8833      	ldrh	r3, [r6, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d047      	beq.n	8007bf8 <ai_platform_network_process+0x4a8>
 8007b68:	6873      	ldr	r3, [r6, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d044      	beq.n	8007bf8 <ai_platform_network_process+0x4a8>
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d041      	beq.n	8007bf8 <ai_platform_network_process+0x4a8>
 8007b74:	f04f 0800 	mov.w	r8, #0
 8007b78:	e019      	b.n	8007bae <ai_platform_network_process+0x45e>
 8007b7a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007b7e:	4291      	cmp	r1, r2
 8007b80:	d301      	bcc.n	8007b86 <ai_platform_network_process+0x436>
 8007b82:	68f9      	ldr	r1, [r7, #12]
 8007b84:	1a51      	subs	r1, r2, r1
 8007b86:	6079      	str	r1, [r7, #4]
 8007b88:	f108 0801 	add.w	r8, r8, #1
 8007b8c:	6998      	ldr	r0, [r3, #24]
 8007b8e:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8007b92:	1b12      	subs	r2, r2, r4
 8007b94:	440a      	add	r2, r1
 8007b96:	6082      	str	r2, [r0, #8]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	60da      	str	r2, [r3, #12]
 8007b9e:	8833      	ldrh	r3, [r6, #0]
 8007ba0:	4598      	cmp	r8, r3
 8007ba2:	d229      	bcs.n	8007bf8 <ai_platform_network_process+0x4a8>
 8007ba4:	6873      	ldr	r3, [r6, #4]
 8007ba6:	b33b      	cbz	r3, 8007bf8 <ai_platform_network_process+0x4a8>
 8007ba8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007bac:	b323      	cbz	r3, 8007bf8 <ai_platform_network_process+0x4a8>
 8007bae:	68b2      	ldr	r2, [r6, #8]
 8007bb0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007bb4:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8007bb8:	f8d2 a000 	ldr.w	sl, [r2]
 8007bbc:	f8de 1000 	ldr.w	r1, [lr]
 8007bc0:	eb0a 0709 	add.w	r7, sl, r9
 8007bc4:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8007bc8:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8007bcc:	eb00 0102 	add.w	r1, r0, r2
 8007bd0:	d0d3      	beq.n	8007b7a <ai_platform_network_process+0x42a>
 8007bd2:	f8de 1008 	ldr.w	r1, [lr, #8]
 8007bd6:	f002 f919 	bl	8009e0c <memcpy>
 8007bda:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007bde:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8007be2:	440b      	add	r3, r1
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d301      	bcc.n	8007bec <ai_platform_network_process+0x49c>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	607b      	str	r3, [r7, #4]
 8007bee:	f108 0801 	add.w	r8, r8, #1
 8007bf2:	8833      	ldrh	r3, [r6, #0]
 8007bf4:	4598      	cmp	r8, r3
 8007bf6:	d3d5      	bcc.n	8007ba4 <ai_platform_network_process+0x454>
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	8a9b      	ldrh	r3, [r3, #20]
 8007c02:	f10b 0b01 	add.w	fp, fp, #1
 8007c06:	fa1f fb8b 	uxth.w	fp, fp
 8007c0a:	455b      	cmp	r3, fp
 8007c0c:	f8a2 b016 	strh.w	fp, [r2, #22]
 8007c10:	f63f af68 	bhi.w	8007ae4 <ai_platform_network_process+0x394>
 8007c14:	4658      	mov	r0, fp
 8007c16:	b003      	add	sp, #12
 8007c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1c:	4615      	mov	r5, r2
 8007c1e:	4616      	mov	r6, r2
 8007c20:	e759      	b.n	8007ad6 <ai_platform_network_process+0x386>
 8007c22:	2600      	movs	r6, #0
 8007c24:	e757      	b.n	8007ad6 <ai_platform_network_process+0x386>
 8007c26:	9c00      	ldr	r4, [sp, #0]
 8007c28:	f104 0010 	add.w	r0, r4, #16
 8007c2c:	2218      	movs	r2, #24
 8007c2e:	2113      	movs	r1, #19
 8007c30:	f04f 0b00 	mov.w	fp, #0
 8007c34:	f000 f844 	bl	8007cc0 <core_set_error>
 8007c38:	e685      	b.n	8007946 <ai_platform_network_process+0x1f6>
 8007c3a:	9c00      	ldr	r4, [sp, #0]
 8007c3c:	2217      	movs	r2, #23
 8007c3e:	2113      	movs	r1, #19
 8007c40:	46d3      	mov	fp, sl
 8007c42:	f104 0010 	add.w	r0, r4, #16
 8007c46:	f000 f83b 	bl	8007cc0 <core_set_error>
 8007c4a:	e67c      	b.n	8007946 <ai_platform_network_process+0x1f6>
 8007c4c:	9c00      	ldr	r4, [sp, #0]
 8007c4e:	2221      	movs	r2, #33	; 0x21
 8007c50:	2113      	movs	r1, #19
 8007c52:	469b      	mov	fp, r3
 8007c54:	f104 0010 	add.w	r0, r4, #16
 8007c58:	f000 f832 	bl	8007cc0 <core_set_error>
 8007c5c:	e673      	b.n	8007946 <ai_platform_network_process+0x1f6>
 8007c5e:	9c00      	ldr	r4, [sp, #0]
 8007c60:	2217      	movs	r2, #23
 8007c62:	2113      	movs	r1, #19
 8007c64:	469b      	mov	fp, r3
 8007c66:	f104 0010 	add.w	r0, r4, #16
 8007c6a:	f000 f829 	bl	8007cc0 <core_set_error>
 8007c6e:	e66a      	b.n	8007946 <ai_platform_network_process+0x1f6>
 8007c70:	9c00      	ldr	r4, [sp, #0]
 8007c72:	2219      	movs	r2, #25
 8007c74:	2113      	movs	r1, #19
 8007c76:	f04f 0b00 	mov.w	fp, #0
 8007c7a:	f104 0010 	add.w	r0, r4, #16
 8007c7e:	f000 f81f 	bl	8007cc0 <core_set_error>
 8007c82:	e660      	b.n	8007946 <ai_platform_network_process+0x1f6>
 8007c84:	f104 0010 	add.w	r0, r4, #16
 8007c88:	2217      	movs	r2, #23
 8007c8a:	2112      	movs	r1, #18
 8007c8c:	469b      	mov	fp, r3
 8007c8e:	f000 f817 	bl	8007cc0 <core_set_error>
 8007c92:	e658      	b.n	8007946 <ai_platform_network_process+0x1f6>
 8007c94:	f104 0010 	add.w	r0, r4, #16
 8007c98:	2219      	movs	r2, #25
 8007c9a:	2112      	movs	r1, #18
 8007c9c:	f04f 0b00 	mov.w	fp, #0
 8007ca0:	f000 f80e 	bl	8007cc0 <core_set_error>
 8007ca4:	e64f      	b.n	8007946 <ai_platform_network_process+0x1f6>
 8007ca6:	f1ba 0f00 	cmp.w	sl, #0
 8007caa:	f47f ae7f 	bne.w	80079ac <ai_platform_network_process+0x25c>
 8007cae:	e70d      	b.n	8007acc <ai_platform_network_process+0x37c>

08007cb0 <core_init>:
 8007cb0:	2001      	movs	r0, #1
 8007cb2:	4770      	bx	lr

08007cb4 <core_get_error>:
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	6800      	ldr	r0, [r0, #0]
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop

08007cc0 <core_set_error>:
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	7800      	ldrb	r0, [r0, #0]
 8007cc4:	b930      	cbnz	r0, 8007cd4 <core_set_error+0x14>
 8007cc6:	7019      	strb	r1, [r3, #0]
 8007cc8:	2001      	movs	r0, #1
 8007cca:	6819      	ldr	r1, [r3, #0]
 8007ccc:	f362 211f 	bfi	r1, r2, #8, #24
 8007cd0:	6019      	str	r1, [r3, #0]
 8007cd2:	4770      	bx	lr
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	4770      	bx	lr

08007cd8 <func_dummy>:
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop

08007cdc <ai_dict8_dot_array_f32>:
 8007cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce0:	9d06      	ldr	r5, [sp, #24]
 8007ce2:	4c88      	ldr	r4, [pc, #544]	; (8007f04 <ai_dict8_dot_array_f32+0x228>)
 8007ce4:	2d07      	cmp	r5, #7
 8007ce6:	442c      	add	r4, r5
 8007ce8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007cec:	f104 0620 	add.w	r6, r4, #32
 8007cf0:	d817      	bhi.n	8007d22 <ai_dict8_dot_array_f32+0x46>
 8007cf2:	42b3      	cmp	r3, r6
 8007cf4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8007f08 <ai_dict8_dot_array_f32+0x22c>
 8007cf8:	d20b      	bcs.n	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cfe:	ecf3 7a01 	vldmia	r3!, {s15}
 8007d02:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007d06:	42b3      	cmp	r3, r6
 8007d08:	edd4 6a00 	vldr	s13, [r4]
 8007d0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d10:	d3f3      	bcc.n	8007cfa <ai_dict8_dot_array_f32+0x1e>
 8007d12:	edd0 7a00 	vldr	s15, [r0]
 8007d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d1a:	ed80 7a00 	vstr	s14, [r0]
 8007d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d22:	f001 0503 	and.w	r5, r1, #3
 8007d26:	2d02      	cmp	r5, #2
 8007d28:	f000 80f0 	beq.w	8007f0c <ai_dict8_dot_array_f32+0x230>
 8007d2c:	2d03      	cmp	r5, #3
 8007d2e:	f000 81ff 	beq.w	8008130 <ai_dict8_dot_array_f32+0x454>
 8007d32:	2d01      	cmp	r5, #1
 8007d34:	f000 81f0 	beq.w	8008118 <ai_dict8_dot_array_f32+0x43c>
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	f200 81fc 	bhi.w	8008136 <ai_dict8_dot_array_f32+0x45a>
 8007d3e:	1ae4      	subs	r4, r4, r3
 8007d40:	f101 0810 	add.w	r8, r1, #16
 8007d44:	f101 0508 	add.w	r5, r1, #8
 8007d48:	f103 0720 	add.w	r7, r3, #32
 8007d4c:	0964      	lsrs	r4, r4, #5
 8007d4e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8007f08 <ai_dict8_dot_array_f32+0x22c>
 8007d52:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 8007d56:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8007d5a:	3508      	adds	r5, #8
 8007d5c:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8007d60:	3720      	adds	r7, #32
 8007d62:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8007d66:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8007d6a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007d6e:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8007d72:	edde 7a00 	vldr	s15, [lr]
 8007d76:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8007d7a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007d7e:	eddc 5a00 	vldr	s11, [ip]
 8007d82:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 8007d86:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8007d8a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007d8e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007d92:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 8007d96:	ed9c 4a00 	vldr	s8, [ip]
 8007d9a:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8007d9e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8007da2:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 8007da6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007daa:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8007dae:	eee4 7a26 	vfma.f32	s15, s8, s13
 8007db2:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 8007db6:	ed9c 4a00 	vldr	s8, [ip]
 8007dba:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8007dbe:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 8007dc2:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007dc6:	eee4 7a05 	vfma.f32	s15, s8, s10
 8007dca:	ed9e 5a00 	vldr	s10, [lr]
 8007dce:	ed9c 4a00 	vldr	s8, [ip]
 8007dd2:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 8007dd6:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8007dda:	4545      	cmp	r5, r8
 8007ddc:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8007de0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007de4:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007de8:	ed9e 5a00 	vldr	s10, [lr]
 8007dec:	ed9c 6a00 	vldr	s12, [ip]
 8007df0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007df4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007df8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e00:	d1a9      	bne.n	8007d56 <ai_dict8_dot_array_f32+0x7a>
 8007e02:	3401      	adds	r4, #1
 8007e04:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007e08:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8007e0c:	42b3      	cmp	r3, r6
 8007e0e:	d280      	bcs.n	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007e10:	461c      	mov	r4, r3
 8007e12:	780d      	ldrb	r5, [r1, #0]
 8007e14:	ecf4 6a01 	vldmia	r4!, {s13}
 8007e18:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007e1c:	42a6      	cmp	r6, r4
 8007e1e:	edd5 7a00 	vldr	s15, [r5]
 8007e22:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e26:	f67f af74 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007e2a:	784d      	ldrb	r5, [r1, #1]
 8007e2c:	f103 0408 	add.w	r4, r3, #8
 8007e30:	edd3 6a01 	vldr	s13, [r3, #4]
 8007e34:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007e38:	42a6      	cmp	r6, r4
 8007e3a:	edd5 7a00 	vldr	s15, [r5]
 8007e3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e42:	f67f af66 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007e46:	788d      	ldrb	r5, [r1, #2]
 8007e48:	f103 040c 	add.w	r4, r3, #12
 8007e4c:	edd3 6a02 	vldr	s13, [r3, #8]
 8007e50:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007e54:	42a6      	cmp	r6, r4
 8007e56:	edd5 7a00 	vldr	s15, [r5]
 8007e5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e5e:	f67f af58 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007e62:	78cd      	ldrb	r5, [r1, #3]
 8007e64:	f103 0410 	add.w	r4, r3, #16
 8007e68:	edd3 6a03 	vldr	s13, [r3, #12]
 8007e6c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007e70:	42a6      	cmp	r6, r4
 8007e72:	edd5 7a00 	vldr	s15, [r5]
 8007e76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e7a:	f67f af4a 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007e7e:	790d      	ldrb	r5, [r1, #4]
 8007e80:	f103 0414 	add.w	r4, r3, #20
 8007e84:	edd3 6a04 	vldr	s13, [r3, #16]
 8007e88:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007e8c:	42a6      	cmp	r6, r4
 8007e8e:	edd5 7a00 	vldr	s15, [r5]
 8007e92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e96:	f67f af3c 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007e9a:	794d      	ldrb	r5, [r1, #5]
 8007e9c:	f103 0418 	add.w	r4, r3, #24
 8007ea0:	edd3 6a05 	vldr	s13, [r3, #20]
 8007ea4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007ea8:	42a6      	cmp	r6, r4
 8007eaa:	edd5 7a00 	vldr	s15, [r5]
 8007eae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007eb2:	f67f af2e 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007eb6:	798d      	ldrb	r5, [r1, #6]
 8007eb8:	f103 041c 	add.w	r4, r3, #28
 8007ebc:	edd3 6a06 	vldr	s13, [r3, #24]
 8007ec0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007ec4:	42a6      	cmp	r6, r4
 8007ec6:	edd5 7a00 	vldr	s15, [r5]
 8007eca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ece:	f67f af20 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007ed2:	79cd      	ldrb	r5, [r1, #7]
 8007ed4:	f103 0420 	add.w	r4, r3, #32
 8007ed8:	edd3 6a07 	vldr	s13, [r3, #28]
 8007edc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007ee0:	42a6      	cmp	r6, r4
 8007ee2:	edd5 7a00 	vldr	s15, [r5]
 8007ee6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007eea:	f67f af12 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007eee:	7a09      	ldrb	r1, [r1, #8]
 8007ef0:	edd3 7a08 	vldr	s15, [r3, #32]
 8007ef4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007ef8:	edd2 6a00 	vldr	s13, [r2]
 8007efc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f00:	e707      	b.n	8007d12 <ai_dict8_dot_array_f32+0x36>
 8007f02:	bf00      	nop
 8007f04:	3ffffff8 	.word	0x3ffffff8
 8007f08:	00000000 	.word	0x00000000
 8007f0c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8007f08 <ai_dict8_dot_array_f32+0x22c>
 8007f10:	780d      	ldrb	r5, [r1, #0]
 8007f12:	3304      	adds	r3, #4
 8007f14:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007f18:	3101      	adds	r1, #1
 8007f1a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007f1e:	edd5 6a00 	vldr	s13, [r5]
 8007f22:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f26:	780d      	ldrb	r5, [r1, #0]
 8007f28:	1d1f      	adds	r7, r3, #4
 8007f2a:	edd3 7a00 	vldr	s15, [r3]
 8007f2e:	f101 0c01 	add.w	ip, r1, #1
 8007f32:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007f36:	42bc      	cmp	r4, r7
 8007f38:	edd5 6a00 	vldr	s13, [r5]
 8007f3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f40:	d365      	bcc.n	800800e <ai_dict8_dot_array_f32+0x332>
 8007f42:	3324      	adds	r3, #36	; 0x24
 8007f44:	f101 0e11 	add.w	lr, r1, #17
 8007f48:	3109      	adds	r1, #9
 8007f4a:	eba6 0803 	sub.w	r8, r6, r3
 8007f4e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8007f52:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 8007f56:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007f5a:	3108      	adds	r1, #8
 8007f5c:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8007f60:	3320      	adds	r3, #32
 8007f62:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007f66:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007f6a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007f6e:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8007f72:	edd5 7a00 	vldr	s15, [r5]
 8007f76:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8007f7a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007f7e:	edd4 5a00 	vldr	s11, [r4]
 8007f82:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 8007f86:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8007f8a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007f8e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007f92:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007f96:	ed94 4a00 	vldr	s8, [r4]
 8007f9a:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8007f9e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007fa2:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 8007fa6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007faa:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8007fae:	eee4 7a26 	vfma.f32	s15, s8, s13
 8007fb2:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8007fb6:	ed94 4a00 	vldr	s8, [r4]
 8007fba:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8007fbe:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8007fc2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007fc6:	eee4 7a05 	vfma.f32	s15, s8, s10
 8007fca:	ed95 5a00 	vldr	s10, [r5]
 8007fce:	ed94 4a00 	vldr	s8, [r4]
 8007fd2:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007fd6:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8007fda:	458e      	cmp	lr, r1
 8007fdc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007fe0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007fe4:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007fe8:	ed95 5a00 	vldr	s10, [r5]
 8007fec:	ed94 6a00 	vldr	s12, [r4]
 8007ff0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007ff4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007ff8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008000:	d1a9      	bne.n	8007f56 <ai_dict8_dot_array_f32+0x27a>
 8008002:	f108 0801 	add.w	r8, r8, #1
 8008006:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800800a:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800800e:	42b7      	cmp	r7, r6
 8008010:	f4bf ae7f 	bcs.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8008014:	463b      	mov	r3, r7
 8008016:	f89c 1000 	ldrb.w	r1, [ip]
 800801a:	ecf3 6a01 	vldmia	r3!, {s13}
 800801e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8008022:	429e      	cmp	r6, r3
 8008024:	edd1 7a00 	vldr	s15, [r1]
 8008028:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800802c:	f67f ae71 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8008030:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	edd7 6a01 	vldr	s13, [r7, #4]
 800803c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8008040:	429e      	cmp	r6, r3
 8008042:	edd1 7a00 	vldr	s15, [r1]
 8008046:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800804a:	f67f ae62 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 800804e:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8008052:	f107 030c 	add.w	r3, r7, #12
 8008056:	edd7 6a02 	vldr	s13, [r7, #8]
 800805a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800805e:	429e      	cmp	r6, r3
 8008060:	edd1 7a00 	vldr	s15, [r1]
 8008064:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008068:	f67f ae53 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 800806c:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8008070:	f107 0310 	add.w	r3, r7, #16
 8008074:	edd7 6a03 	vldr	s13, [r7, #12]
 8008078:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800807c:	429e      	cmp	r6, r3
 800807e:	edd1 7a00 	vldr	s15, [r1]
 8008082:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008086:	f67f ae44 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 800808a:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800808e:	f107 0314 	add.w	r3, r7, #20
 8008092:	edd7 6a04 	vldr	s13, [r7, #16]
 8008096:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800809a:	429e      	cmp	r6, r3
 800809c:	edd1 7a00 	vldr	s15, [r1]
 80080a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080a4:	f67f ae35 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 80080a8:	f89c 1005 	ldrb.w	r1, [ip, #5]
 80080ac:	f107 0318 	add.w	r3, r7, #24
 80080b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80080b4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80080b8:	429e      	cmp	r6, r3
 80080ba:	edd1 7a00 	vldr	s15, [r1]
 80080be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080c2:	f67f ae26 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 80080c6:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80080ca:	f107 031c 	add.w	r3, r7, #28
 80080ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80080d2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80080d6:	429e      	cmp	r6, r3
 80080d8:	edd1 7a00 	vldr	s15, [r1]
 80080dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080e0:	f67f ae17 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 80080e4:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80080e8:	f107 0320 	add.w	r3, r7, #32
 80080ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80080f0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80080f4:	429e      	cmp	r6, r3
 80080f6:	edd1 7a00 	vldr	s15, [r1]
 80080fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080fe:	f67f ae08 	bls.w	8007d12 <ai_dict8_dot_array_f32+0x36>
 8008102:	f89c 3008 	ldrb.w	r3, [ip, #8]
 8008106:	edd7 7a08 	vldr	s15, [r7, #32]
 800810a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800810e:	edd2 6a00 	vldr	s13, [r2]
 8008112:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008116:	e5fc      	b.n	8007d12 <ai_dict8_dot_array_f32+0x36>
 8008118:	780d      	ldrb	r5, [r1, #0]
 800811a:	3304      	adds	r3, #4
 800811c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008120:	3101      	adds	r1, #1
 8008122:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8008126:	ed95 7a00 	vldr	s14, [r5]
 800812a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800812e:	e6ef      	b.n	8007f10 <ai_dict8_dot_array_f32+0x234>
 8008130:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8007f08 <ai_dict8_dot_array_f32+0x22c>
 8008134:	e6f7      	b.n	8007f26 <ai_dict8_dot_array_f32+0x24a>
 8008136:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8007f08 <ai_dict8_dot_array_f32+0x22c>
 800813a:	e667      	b.n	8007e0c <ai_dict8_dot_array_f32+0x130>

0800813c <ai_dict4_dot_array_f32>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008142:	f027 0c01 	bic.w	ip, r7, #1
 8008146:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800814a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800814e:	f000 80ad 	beq.w	80082ac <ai_dict4_dot_array_f32+0x170>
 8008152:	1d0d      	adds	r5, r1, #4
 8008154:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8008158:	f103 0420 	add.w	r4, r3, #32
 800815c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80082b4 <ai_dict4_dot_array_f32+0x178>
 8008160:	eb05 0e09 	add.w	lr, r5, r9
 8008164:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8008168:	3504      	adds	r5, #4
 800816a:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800816e:	3420      	adds	r4, #32
 8008170:	f006 0a0f 	and.w	sl, r6, #15
 8008174:	0936      	lsrs	r6, r6, #4
 8008176:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800817a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800817e:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 8008182:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008186:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800818a:	edda 7a00 	vldr	s15, [sl]
 800818e:	edd6 5a00 	vldr	s11, [r6]
 8008192:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008196:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800819a:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800819e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80081a2:	f006 060f 	and.w	r6, r6, #15
 80081a6:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80081aa:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 80081ae:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80081b2:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 80081b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80081ba:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 80081be:	ed9a 3a00 	vldr	s6, [sl]
 80081c2:	ed96 5a00 	vldr	s10, [r6]
 80081c6:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 80081ca:	eee3 7a04 	vfma.f32	s15, s6, s8
 80081ce:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 80081d2:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80081d6:	f00a 0a0f 	and.w	sl, sl, #15
 80081da:	45ae      	cmp	lr, r5
 80081dc:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80081e0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80081e4:	ed9b 3a00 	vldr	s6, [fp]
 80081e8:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 80081ec:	eee5 7a06 	vfma.f32	s15, s10, s12
 80081f0:	ed9a 4a00 	vldr	s8, [sl]
 80081f4:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 80081f8:	f006 060f 	and.w	r6, r6, #15
 80081fc:	ed9a 5a00 	vldr	s10, [sl]
 8008200:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008204:	ed96 6a00 	vldr	s12, [r6]
 8008208:	eee3 7a23 	vfma.f32	s15, s6, s7
 800820c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008210:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008214:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008218:	ee37 7a27 	vadd.f32	s14, s14, s15
 800821c:	d1a2      	bne.n	8008164 <ai_dict4_dot_array_f32+0x28>
 800821e:	4449      	add	r1, r9
 8008220:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8008224:	459c      	cmp	ip, r3
 8008226:	d92d      	bls.n	8008284 <ai_dict4_dot_array_f32+0x148>
 8008228:	f10c 0c07 	add.w	ip, ip, #7
 800822c:	f103 0508 	add.w	r5, r3, #8
 8008230:	f103 0810 	add.w	r8, r3, #16
 8008234:	f101 3eff 	add.w	lr, r1, #4294967295
 8008238:	ebac 0c05 	sub.w	ip, ip, r5
 800823c:	f02c 0407 	bic.w	r4, ip, #7
 8008240:	44a0      	add	r8, r4
 8008242:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8008246:	3508      	adds	r5, #8
 8008248:	ed55 5a03 	vldr	s11, [r5, #-12]
 800824c:	f004 060f 	and.w	r6, r4, #15
 8008250:	0924      	lsrs	r4, r4, #4
 8008252:	ed55 6a04 	vldr	s13, [r5, #-16]
 8008256:	45a8      	cmp	r8, r5
 8008258:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800825c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008260:	edd6 7a00 	vldr	s15, [r6]
 8008264:	ed94 6a00 	vldr	s12, [r4]
 8008268:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800826c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008274:	d1e5      	bne.n	8008242 <ai_dict4_dot_array_f32+0x106>
 8008276:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800827a:	f10c 0c01 	add.w	ip, ip, #1
 800827e:	4461      	add	r1, ip
 8008280:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8008284:	07fc      	lsls	r4, r7, #31
 8008286:	d509      	bpl.n	800829c <ai_dict4_dot_array_f32+0x160>
 8008288:	7809      	ldrb	r1, [r1, #0]
 800828a:	edd3 7a00 	vldr	s15, [r3]
 800828e:	090b      	lsrs	r3, r1, #4
 8008290:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008294:	edd2 6a00 	vldr	s13, [r2]
 8008298:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800829c:	edd0 7a00 	vldr	s15, [r0]
 80082a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082a4:	ed80 7a00 	vstr	s14, [r0]
 80082a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ac:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80082b4 <ai_dict4_dot_array_f32+0x178>
 80082b0:	e7b8      	b.n	8008224 <ai_dict4_dot_array_f32+0xe8>
 80082b2:	bf00      	nop
 80082b4:	00000000 	.word	0x00000000

080082b8 <ai_dict_decompress_f32>:
 80082b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082bc:	9f08      	ldr	r7, [sp, #32]
 80082be:	2b04      	cmp	r3, #4
 80082c0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80082c4:	d00e      	beq.n	80082e4 <ai_dict_decompress_f32+0x2c>
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d10a      	bne.n	80082e0 <ai_dict_decompress_f32+0x28>
 80082ca:	42b8      	cmp	r0, r7
 80082cc:	d208      	bcs.n	80082e0 <ai_dict_decompress_f32+0x28>
 80082ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f840 3b04 	str.w	r3, [r0], #4
 80082dc:	4287      	cmp	r7, r0
 80082de:	d8f6      	bhi.n	80082ce <ai_dict_decompress_f32+0x16>
 80082e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082e4:	9b07      	ldr	r3, [sp, #28]
 80082e6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80082ea:	f003 0e01 	and.w	lr, r3, #1
 80082ee:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80082f2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80082f6:	42b8      	cmp	r0, r7
 80082f8:	d2f2      	bcs.n	80082e0 <ai_dict_decompress_f32+0x28>
 80082fa:	f1bc 0f00 	cmp.w	ip, #0
 80082fe:	d019      	beq.n	8008334 <ai_dict_decompress_f32+0x7c>
 8008300:	f100 0508 	add.w	r5, r0, #8
 8008304:	1e4c      	subs	r4, r1, #1
 8008306:	eb01 0608 	add.w	r6, r1, r8
 800830a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800830e:	3508      	adds	r5, #8
 8008310:	091b      	lsrs	r3, r3, #4
 8008312:	42a6      	cmp	r6, r4
 8008314:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f845 3c10 	str.w	r3, [r5, #-16]
 800831e:	7823      	ldrb	r3, [r4, #0]
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f845 3c0c 	str.w	r3, [r5, #-12]
 800832e:	d1ec      	bne.n	800830a <ai_dict_decompress_f32+0x52>
 8008330:	4461      	add	r1, ip
 8008332:	4448      	add	r0, r9
 8008334:	f1be 0f00 	cmp.w	lr, #0
 8008338:	d103      	bne.n	8008342 <ai_dict_decompress_f32+0x8a>
 800833a:	4287      	cmp	r7, r0
 800833c:	d8dd      	bhi.n	80082fa <ai_dict_decompress_f32+0x42>
 800833e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008342:	780b      	ldrb	r3, [r1, #0]
 8008344:	3004      	adds	r0, #4
 8008346:	3101      	adds	r1, #1
 8008348:	091b      	lsrs	r3, r3, #4
 800834a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f840 3c04 	str.w	r3, [r0, #-4]
 8008354:	e7cf      	b.n	80082f6 <ai_dict_decompress_f32+0x3e>
 8008356:	bf00      	nop

08008358 <forward_conv2d>:
 8008358:	6942      	ldr	r2, [r0, #20]
 800835a:	8813      	ldrh	r3, [r2, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 87ad 	beq.w	80092bc <forward_conv2d+0xf64>
 8008362:	6852      	ldr	r2, [r2, #4]
 8008364:	6851      	ldr	r1, [r2, #4]
 8008366:	b101      	cbz	r1, 800836a <forward_conv2d+0x12>
 8008368:	6809      	ldr	r1, [r1, #0]
 800836a:	2b01      	cmp	r3, #1
 800836c:	f240 87a3 	bls.w	80092b6 <forward_conv2d+0xf5e>
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	ed2d 8b08 	vpush	{d8-d11}
 8008378:	b0cb      	sub	sp, #300	; 0x12c
 800837a:	6914      	ldr	r4, [r2, #16]
 800837c:	af02      	add	r7, sp, #8
 800837e:	2c00      	cmp	r4, #0
 8008380:	f000 8795 	beq.w	80092ae <forward_conv2d+0xf56>
 8008384:	6824      	ldr	r4, [r4, #0]
 8008386:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 800838a:	2b02      	cmp	r3, #2
 800838c:	f000 878a 	beq.w	80092a4 <forward_conv2d+0xf4c>
 8008390:	69d5      	ldr	r5, [r2, #28]
 8008392:	2d00      	cmp	r5, #0
 8008394:	f000 877f 	beq.w	8009296 <forward_conv2d+0xf3e>
 8008398:	f112 0318 	adds.w	r3, r2, #24
 800839c:	682c      	ldr	r4, [r5, #0]
 800839e:	d004      	beq.n	80083aa <forward_conv2d+0x52>
 80083a0:	8b13      	ldrh	r3, [r2, #24]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	f240 878c 	bls.w	80092c0 <forward_conv2d+0xf68>
 80083a8:	686b      	ldr	r3, [r5, #4]
 80083aa:	68aa      	ldr	r2, [r5, #8]
 80083ac:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80083b0:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80083b4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80083b8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80083bc:	68ce      	ldr	r6, [r1, #12]
 80083be:	69a1      	ldr	r1, [r4, #24]
 80083c0:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80083c2:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80083c6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80083ca:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80083ce:	f8de 1004 	ldr.w	r1, [lr, #4]
 80083d2:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80083d6:	f8de 100c 	ldr.w	r1, [lr, #12]
 80083da:	64b9      	str	r1, [r7, #72]	; 0x48
 80083dc:	f8de 1008 	ldr.w	r1, [lr, #8]
 80083e0:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80083e4:	6871      	ldr	r1, [r6, #4]
 80083e6:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80083ea:	68f1      	ldr	r1, [r6, #12]
 80083ec:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80083f0:	68b1      	ldr	r1, [r6, #8]
 80083f2:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80083f6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80083fa:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80083fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008402:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8008406:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800840a:	6889      	ldr	r1, [r1, #8]
 800840c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008410:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008412:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8008416:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800841a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800841c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008420:	6981      	ldr	r1, [r0, #24]
 8008422:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 8008426:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 8724 	beq.w	8009278 <forward_conv2d+0xf20>
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843c:	4606      	mov	r6, r0
 800843e:	69c0      	ldr	r0, [r0, #28]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008448:	2a00      	cmp	r2, #0
 800844a:	f000 8708 	beq.w	800925e <forward_conv2d+0xf06>
 800844e:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 8008452:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008456:	6892      	ldr	r2, [r2, #8]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800845e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008462:	f001 fc81 	bl	8009d68 <ai_array_get_byte_size>
 8008466:	69a3      	ldr	r3, [r4, #24]
 8008468:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800846c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008470:	681c      	ldr	r4, [r3, #0]
 8008472:	fa1f f289 	uxth.w	r2, r9
 8008476:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800847a:	fa1f f388 	uxth.w	r3, r8
 800847e:	f3c4 15c6 	ubfx	r5, r4, #7, #7
 8008482:	f3c4 5041 	ubfx	r0, r4, #21, #2
 8008486:	f101 3eff 	add.w	lr, r1, #4294967295
 800848a:	f3c4 4c43 	ubfx	ip, r4, #17, #4
 800848e:	3a01      	subs	r2, #1
 8008490:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8008494:	fa45 f000 	asr.w	r0, r5, r0
 8008498:	6a35      	ldr	r5, [r6, #32]
 800849a:	fb0e 1202 	mla	r2, lr, r2, r1
 800849e:	3b01      	subs	r3, #1
 80084a0:	3c01      	subs	r4, #1
 80084a2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80084a6:	f8c7 50b4 	str.w	r5, [r7, #180]	; 0xb4
 80084aa:	b285      	uxth	r5, r0
 80084ac:	fb04 1103 	mla	r1, r4, r3, r1
 80084b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084b4:	647a      	str	r2, [r7, #68]	; 0x44
 80084b6:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80084ba:	4619      	mov	r1, r3
 80084bc:	4ade      	ldr	r2, [pc, #888]	; (8008838 <forward_conv2d+0x4e0>)
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bf08      	it	eq
 80084c2:	4611      	moveq	r1, r2
 80084c4:	f1bc 0f04 	cmp.w	ip, #4
 80084c8:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 80084cc:	f000 852e 	beq.w	8008f2c <forward_conv2d+0xbd4>
 80084d0:	f1bc 0f08 	cmp.w	ip, #8
 80084d4:	f000 852a 	beq.w	8008f2c <forward_conv2d+0xbd4>
 80084d8:	fa1f f38a 	uxth.w	r3, sl
 80084dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80084e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084e4:	425b      	negs	r3, r3
 80084e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084ea:	2a00      	cmp	r2, #0
 80084ec:	f000 8241 	beq.w	8008972 <forward_conv2d+0x61a>
 80084f0:	fa1f f28b 	uxth.w	r2, fp
 80084f4:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80084f8:	f8d7 50d0 	ldr.w	r5, [r7, #208]	; 0xd0
 80084fc:	fa0f f689 	sxth.w	r6, r9
 8008500:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008504:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008508:	fb01 f305 	mul.w	r3, r1, r5
 800850c:	f8b7 c0f0 	ldrh.w	ip, [r7, #240]	; 0xf0
 8008510:	fa0f f588 	sxth.w	r5, r8
 8008514:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8008518:	f8c7 c064 	str.w	ip, [r7, #100]	; 0x64
 800851c:	4264      	negs	r4, r4
 800851e:	fb03 fc00 	mul.w	ip, r3, r0
 8008522:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 8008526:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800852a:	4634      	mov	r4, r6
 800852c:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8008530:	462e      	mov	r6, r5
 8008532:	f8b7 c100 	ldrh.w	ip, [r7, #256]	; 0x100
 8008536:	f8c7 50b0 	str.w	r5, [r7, #176]	; 0xb0
 800853a:	f8c7 c0d4 	str.w	ip, [r7, #212]	; 0xd4
 800853e:	fb04 fc05 	mul.w	ip, r4, r5
 8008542:	4605      	mov	r5, r0
 8008544:	0084      	lsls	r4, r0, #2
 8008546:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800854a:	fb06 f605 	mul.w	r6, r6, r5
 800854e:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 8008552:	fb01 f200 	mul.w	r2, r1, r0
 8008556:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800855a:	62fe      	str	r6, [r7, #44]	; 0x2c
 800855c:	4626      	mov	r6, r4
 800855e:	fb01 f000 	mul.w	r0, r1, r0
 8008562:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 800883c <forward_conv2d+0x4e4>
 8008566:	fb06 f605 	mul.w	r6, r6, r5
 800856a:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
 800856c:	6338      	str	r0, [r7, #48]	; 0x30
 800856e:	00ad      	lsls	r5, r5, #2
 8008570:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8008574:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008578:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
 800857c:	4625      	mov	r5, r4
 800857e:	0080      	lsls	r0, r0, #2
 8008580:	f8c7 c074 	str.w	ip, [r7, #116]	; 0x74
 8008584:	fb05 f503 	mul.w	r5, r5, r3
 8008588:	460b      	mov	r3, r1
 800858a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800858e:	0089      	lsls	r1, r1, #2
 8008590:	4620      	mov	r0, r4
 8008592:	63fd      	str	r5, [r7, #60]	; 0x3c
 8008594:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8008598:	0095      	lsls	r5, r2, #2
 800859a:	6239      	str	r1, [r7, #32]
 800859c:	4619      	mov	r1, r3
 800859e:	62bd      	str	r5, [r7, #40]	; 0x28
 80085a0:	4625      	mov	r5, r4
 80085a2:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80085a4:	fb00 f505 	mul.w	r5, r0, r5
 80085a8:	fb04 f101 	mul.w	r1, r4, r1
 80085ac:	65fe      	str	r6, [r7, #92]	; 0x5c
 80085ae:	66bd      	str	r5, [r7, #104]	; 0x68
 80085b0:	6179      	str	r1, [r7, #20]
 80085b2:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80085b6:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80085ba:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80085be:	ea4f 0b81 	mov.w	fp, r1, lsl #2
 80085c2:	fb04 f400 	mul.w	r4, r4, r0
 80085c6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80085ca:	65bc      	str	r4, [r7, #88]	; 0x58
 80085cc:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 80085d0:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 80085d4:	643c      	str	r4, [r7, #64]	; 0x40
 80085d6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80085da:	fb02 f204 	mul.w	r2, r2, r4
 80085de:	61ba      	str	r2, [r7, #24]
 80085e0:	460a      	mov	r2, r1
 80085e2:	0109      	lsls	r1, r1, #4
 80085e4:	6079      	str	r1, [r7, #4]
 80085e6:	4619      	mov	r1, r3
 80085e8:	4603      	mov	r3, r0
 80085ea:	fb01 f303 	mul.w	r3, r1, r3
 80085ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085f2:	00d3      	lsls	r3, r2, #3
 80085f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008600:	2300      	movs	r3, #0
 8008602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008606:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800860a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800860e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008610:	2900      	cmp	r1, #0
 8008612:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008614:	441a      	add	r2, r3
 8008616:	bfb4      	ite	lt
 8008618:	2100      	movlt	r1, #0
 800861a:	2300      	movge	r3, #0
 800861c:	4282      	cmp	r2, r0
 800861e:	bf28      	it	cs
 8008620:	4602      	movcs	r2, r0
 8008622:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8008626:	2801      	cmp	r0, #1
 8008628:	f000 8300 	beq.w	8008c2c <forward_conv2d+0x8d4>
 800862c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8008630:	4281      	cmp	r1, r0
 8008632:	f000 81bc 	beq.w	80089ae <forward_conv2d+0x656>
 8008636:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800863a:	2900      	cmp	r1, #0
 800863c:	f000 8178 	beq.w	8008930 <forward_conv2d+0x5d8>
 8008640:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008644:	1ad2      	subs	r2, r2, r3
 8008646:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800864a:	181d      	adds	r5, r3, r0
 800864c:	f8c7 b01c 	str.w	fp, [r7, #28]
 8008650:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8008654:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8008658:	3d01      	subs	r5, #1
 800865a:	fb93 f1f0 	sdiv	r1, r3, r0
 800865e:	fb00 3111 	mls	r1, r0, r1, r3
 8008662:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008666:	2400      	movs	r4, #0
 8008668:	1a41      	subs	r1, r0, r1
 800866a:	67bc      	str	r4, [r7, #120]	; 0x78
 800866c:	4604      	mov	r4, r0
 800866e:	fb91 f0f0 	sdiv	r0, r1, r0
 8008672:	fb04 1110 	mls	r1, r4, r0, r1
 8008676:	4620      	mov	r0, r4
 8008678:	1a52      	subs	r2, r2, r1
 800867a:	4419      	add	r1, r3
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008680:	4422      	add	r2, r4
 8008682:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8008686:	fb03 f301 	mul.w	r3, r3, r1
 800868a:	3a01      	subs	r2, #1
 800868c:	673b      	str	r3, [r7, #112]	; 0x70
 800868e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008692:	fb92 f8f0 	sdiv	r8, r2, r0
 8008696:	4619      	mov	r1, r3
 8008698:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800869c:	46c2      	mov	sl, r8
 800869e:	fbb1 f3f4 	udiv	r3, r1, r4
 80086a2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80086a6:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80086aa:	fb95 f5f0 	sdiv	r5, r5, r0
 80086ae:	eba1 0008 	sub.w	r0, r1, r8
 80086b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086b4:	eba1 0c03 	sub.w	ip, r1, r3
 80086b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80086bc:	fbb2 f2f4 	udiv	r2, r2, r4
 80086c0:	fb0e f403 	mul.w	r4, lr, r3
 80086c4:	0096      	lsls	r6, r2, #2
 80086c6:	fb03 f305 	mul.w	r3, r3, r5
 80086ca:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 80086ce:	657a      	str	r2, [r7, #84]	; 0x54
 80086d0:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80086d4:	653b      	str	r3, [r7, #80]	; 0x50
 80086d6:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80086da:	fb04 f300 	mul.w	r3, r4, r0
 80086de:	663e      	str	r6, [r7, #96]	; 0x60
 80086e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086e8:	1b9b      	subs	r3, r3, r6
 80086ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086ee:	008b      	lsls	r3, r1, #2
 80086f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80086f2:	00d3      	lsls	r3, r2, #3
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
 80086f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80086fc:	189e      	adds	r6, r3, r2
 80086fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008702:	2b00      	cmp	r3, #0
 8008704:	f2c0 813e 	blt.w	8008984 <forward_conv2d+0x62c>
 8008708:	2100      	movs	r1, #0
 800870a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800870c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008710:	4688      	mov	r8, r1
 8008712:	460d      	mov	r5, r1
 8008714:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 8008718:	f103 3cff 	add.w	ip, r3, #4294967295
 800871c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008720:	0080      	lsls	r0, r0, #2
 8008722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008726:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800872a:	4422      	add	r2, r4
 800872c:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8008730:	4423      	add	r3, r4
 8008732:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8008736:	42a2      	cmp	r2, r4
 8008738:	bf94      	ite	ls
 800873a:	ebc5 0202 	rsbls	r2, r5, r2
 800873e:	ebc5 0204 	rsbhi	r2, r5, r4
 8008742:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8008746:	eb08 0403 	add.w	r4, r8, r3
 800874a:	1a52      	subs	r2, r2, r1
 800874c:	462b      	mov	r3, r5
 800874e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008752:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008756:	2d00      	cmp	r5, #0
 8008758:	bf08      	it	eq
 800875a:	4633      	moveq	r3, r6
 800875c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008760:	440a      	add	r2, r1
 8008762:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8008766:	42b3      	cmp	r3, r6
 8008768:	f102 36ff 	add.w	r6, r2, #4294967295
 800876c:	fb00 5004 	mla	r0, r0, r4, r5
 8008770:	460a      	mov	r2, r1
 8008772:	fe08 6a06 	vseleq.f32	s12, s16, s12
 8008776:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800877a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800877c:	fb96 f6f1 	sdiv	r6, r6, r1
 8008780:	fb9c f5f1 	sdiv	r5, ip, r1
 8008784:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008786:	440d      	add	r5, r1
 8008788:	fb06 0112 	mls	r1, r6, r2, r0
 800878c:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8008790:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8008794:	fb0e 0505 	mla	r5, lr, r5, r0
 8008798:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800879c:	1b92      	subs	r2, r2, r6
 800879e:	2800      	cmp	r0, #0
 80087a0:	d074      	beq.n	800888c <forward_conv2d+0x534>
 80087a2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80087a6:	fb0e f802 	mul.w	r8, lr, r2
 80087aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087ac:	fb00 fb01 	mul.w	fp, r0, r1
 80087b0:	2a00      	cmp	r2, #0
 80087b2:	d06b      	beq.n	800888c <forward_conv2d+0x534>
 80087b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087b6:	189a      	adds	r2, r3, r2
 80087b8:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80087bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	637b      	str	r3, [r7, #52]	; 0x34
 80087c4:	2300      	movs	r3, #0
 80087c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087c8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80087cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087d0:	4413      	add	r3, r2
 80087d2:	188a      	adds	r2, r1, r2
 80087d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087d6:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80087da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80087de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80087e2:	f1ba 0f00 	cmp.w	sl, #0
 80087e6:	ecf3 7a01 	vldmia	r3!, {s15}
 80087ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80087ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 80087f2:	f340 80c5 	ble.w	8008980 <forward_conv2d+0x628>
 80087f6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80087fa:	f04f 0c00 	mov.w	ip, #0
 80087fe:	2e00      	cmp	r6, #0
 8008800:	dd1e      	ble.n	8008840 <forward_conv2d+0x4e8>
 8008802:	2100      	movs	r1, #0
 8008804:	eb00 040e 	add.w	r4, r0, lr
 8008808:	4284      	cmp	r4, r0
 800880a:	d910      	bls.n	800882e <forward_conv2d+0x4d6>
 800880c:	4603      	mov	r3, r0
 800880e:	462a      	mov	r2, r5
 8008810:	ecb3 7a01 	vldmia	r3!, {s14}
 8008814:	ecf2 6a01 	vldmia	r2!, {s13}
 8008818:	429c      	cmp	r4, r3
 800881a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800881e:	d8f7      	bhi.n	8008810 <forward_conv2d+0x4b8>
 8008820:	43c3      	mvns	r3, r0
 8008822:	441c      	add	r4, r3
 8008824:	f024 0403 	bic.w	r4, r4, #3
 8008828:	3404      	adds	r4, #4
 800882a:	4425      	add	r5, r4
 800882c:	4420      	add	r0, r4
 800882e:	3101      	adds	r1, #1
 8008830:	4448      	add	r0, r9
 8008832:	428e      	cmp	r6, r1
 8008834:	d1e6      	bne.n	8008804 <forward_conv2d+0x4ac>
 8008836:	e003      	b.n	8008840 <forward_conv2d+0x4e8>
 8008838:	08007cd9 	.word	0x08007cd9
 800883c:	00000000 	.word	0x00000000
 8008840:	f10c 0c01 	add.w	ip, ip, #1
 8008844:	4458      	add	r0, fp
 8008846:	4445      	add	r5, r8
 8008848:	45e2      	cmp	sl, ip
 800884a:	d1d8      	bne.n	80087fe <forward_conv2d+0x4a6>
 800884c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008854:	441d      	add	r5, r3
 8008856:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800885a:	ece3 7a01 	vstmia	r3!, {s15}
 800885e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008862:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008866:	4293      	cmp	r3, r2
 8008868:	d1b9      	bne.n	80087de <forward_conv2d+0x486>
 800886a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800886e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008870:	4472      	add	r2, lr
 8008872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008874:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008878:	3301      	adds	r3, #1
 800887a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800887c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800887e:	1a52      	subs	r2, r2, r1
 8008880:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008884:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008888:	429a      	cmp	r2, r3
 800888a:	d19d      	bne.n	80087c8 <forward_conv2d+0x470>
 800888c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008890:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008894:	4608      	mov	r0, r1
 8008896:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800889a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800889c:	4410      	add	r0, r2
 800889e:	3301      	adds	r3, #1
 80088a0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 80088a4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80088a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80088aa:	4401      	add	r1, r0
 80088ac:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80088b0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80088b4:	1a8a      	subs	r2, r1, r2
 80088b6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80088ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80088be:	429a      	cmp	r2, r3
 80088c0:	f47f af19 	bne.w	80086f6 <forward_conv2d+0x39e>
 80088c4:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 80088c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088cc:	b383      	cbz	r3, 8008930 <forward_conv2d+0x5d8>
 80088ce:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80088d2:	2500      	movs	r5, #0
 80088d4:	f8d7 608c 	ldr.w	r6, [r7, #140]	; 0x8c
 80088d8:	f8d7 80e4 	ldr.w	r8, [r7, #228]	; 0xe4
 80088dc:	46a2      	mov	sl, r4
 80088de:	f8d7 90c0 	ldr.w	r9, [r7, #192]	; 0xc0
 80088e2:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80088e6:	4633      	mov	r3, r6
 80088e8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80088ec:	3501      	adds	r5, #1
 80088ee:	f8c1 a008 	str.w	sl, [r1, #8]
 80088f2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80088f6:	4416      	add	r6, r2
 80088f8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80088fc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008900:	4482      	add	sl, r0
 8008902:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8008906:	4608      	mov	r0, r1
 8008908:	47a0      	blx	r4
 800890a:	eba6 0309 	sub.w	r3, r6, r9
 800890e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008912:	4293      	cmp	r3, r2
 8008914:	bfa8      	it	ge
 8008916:	464e      	movge	r6, r9
 8008918:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800891c:	42ab      	cmp	r3, r5
 800891e:	d1e0      	bne.n	80088e2 <forward_conv2d+0x58a>
 8008920:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	f8c7 608c 	str.w	r6, [r7, #140]	; 0x8c
 800892a:	4413      	add	r3, r2
 800892c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008930:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008934:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008936:	4604      	mov	r4, r0
 8008938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	4414      	add	r4, r2
 8008944:	1a82      	subs	r2, r0, r2
 8008946:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800894a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800894e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8008952:	3101      	adds	r1, #1
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
 800895a:	609a      	str	r2, [r3, #8]
 800895c:	697c      	ldr	r4, [r7, #20]
 800895e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008962:	4420      	add	r0, r4
 8008964:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008968:	428b      	cmp	r3, r1
 800896a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800896e:	f47f ae4a 	bne.w	8008606 <forward_conv2d+0x2ae>
 8008972:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008976:	46bd      	mov	sp, r7
 8008978:	ecbd 8b08 	vpop	{d8-d11}
 800897c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008980:	461a      	mov	r2, r3
 8008982:	e765      	b.n	8008850 <forward_conv2d+0x4f8>
 8008984:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008988:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800898c:	460d      	mov	r5, r1
 800898e:	4688      	mov	r8, r1
 8008990:	1853      	adds	r3, r2, r1
 8008992:	4611      	mov	r1, r2
 8008994:	fb95 f2f2 	sdiv	r2, r5, r2
 8008998:	fb01 5212 	mls	r2, r1, r2, r5
 800899c:	460c      	mov	r4, r1
 800899e:	1a8a      	subs	r2, r1, r2
 80089a0:	fb92 f1f1 	sdiv	r1, r2, r1
 80089a4:	fb04 2111 	mls	r1, r4, r1, r2
 80089a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089aa:	1888      	adds	r0, r1, r2
 80089ac:	e6b2      	b.n	8008714 <forward_conv2d+0x3bc>
 80089ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80089b0:	2901      	cmp	r1, #1
 80089b2:	f47f ae40 	bne.w	8008636 <forward_conv2d+0x2de>
 80089b6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80089ba:	2900      	cmp	r1, #0
 80089bc:	d0b8      	beq.n	8008930 <forward_conv2d+0x5d8>
 80089be:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80089c2:	1ad1      	subs	r1, r2, r3
 80089c4:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80089c8:	0082      	lsls	r2, r0, #2
 80089ca:	fb03 f000 	mul.w	r0, r3, r0
 80089ce:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80089d2:	6738      	str	r0, [r7, #112]	; 0x70
 80089d4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80089d8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80089dc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80089e0:	1a41      	subs	r1, r0, r1
 80089e2:	6a38      	ldr	r0, [r7, #32]
 80089e4:	fb00 f303 	mul.w	r3, r0, r3
 80089e8:	61fb      	str	r3, [r7, #28]
 80089ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80089f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089fa:	fb02 f301 	mul.w	r3, r2, r1
 80089fe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
 8008a04:	2300      	movs	r3, #0
 8008a06:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a10:	4619      	mov	r1, r3
 8008a12:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8008a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a18:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 8008a1c:	0092      	lsls	r2, r2, #2
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008a22:	603b      	str	r3, [r7, #0]
 8008a24:	008b      	lsls	r3, r1, #2
 8008a26:	60bb      	str	r3, [r7, #8]
 8008a28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f2c0 8264 	blt.w	8008efa <forward_conv2d+0xba2>
 8008a32:	2400      	movs	r4, #0
 8008a34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a36:	4621      	mov	r1, r4
 8008a38:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8008a3c:	f8d7 6114 	ldr.w	r6, [r7, #276]	; 0x114
 8008a40:	1818      	adds	r0, r3, r0
 8008a42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a46:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8008a4a:	18f3      	adds	r3, r6, r3
 8008a4c:	4420      	add	r0, r4
 8008a4e:	461c      	mov	r4, r3
 8008a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a54:	0080      	lsls	r0, r0, #2
 8008a56:	429c      	cmp	r4, r3
 8008a58:	bf28      	it	cs
 8008a5a:	461c      	movcs	r4, r3
 8008a5c:	1a64      	subs	r4, r4, r1
 8008a5e:	2d00      	cmp	r5, #0
 8008a60:	f000 823c 	beq.w	8008edc <forward_conv2d+0xb84>
 8008a64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a68:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8008a6c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008a70:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8008a74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008a78:	428d      	cmp	r5, r1
 8008a7a:	462a      	mov	r2, r5
 8008a7c:	eba6 0104 	sub.w	r1, r6, r4
 8008a80:	eba3 0304 	sub.w	r3, r3, r4
 8008a84:	fe48 3a23 	vseleq.f32	s7, s16, s7
 8008a88:	69fd      	ldr	r5, [r7, #28]
 8008a8a:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8008a8e:	4428      	add	r0, r5
 8008a90:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8008a94:	fb05 6e00 	mla	lr, r5, r0, r6
 8008a98:	eb0e 000b 	add.w	r0, lr, fp
 8008a9c:	4586      	cmp	lr, r0
 8008a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8008aa0:	f080 80a7 	bcs.w	8008bf2 <forward_conv2d+0x89a>
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	fb01 f10b 	mul.w	r1, r1, fp
 8008aaa:	f024 0803 	bic.w	r8, r4, #3
 8008aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 809a 	beq.w	8008bf2 <forward_conv2d+0x89a>
 8008abe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008ac0:	f108 33ff 	add.w	r3, r8, #4294967295
 8008ac4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008ac8:	089b      	lsrs	r3, r3, #2
 8008aca:	4401      	add	r1, r0
 8008acc:	68b8      	ldr	r0, [r7, #8]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	1810      	adds	r0, r2, r0
 8008ad2:	1a8a      	subs	r2, r1, r2
 8008ad4:	613a      	str	r2, [r7, #16]
 8008ad6:	fb03 f20a 	mul.w	r2, r3, sl
 8008ada:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8008ade:	657a      	str	r2, [r7, #84]	; 0x54
 8008ae0:	011a      	lsls	r2, r3, #4
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	663a      	str	r2, [r7, #96]	; 0x60
 8008ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8008ae8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aee:	6939      	ldr	r1, [r7, #16]
 8008af0:	4413      	add	r3, r2
 8008af2:	188a      	adds	r2, r1, r2
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008afc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b00:	ecf3 6a01 	vldmia	r3!, {s13}
 8008b04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b08:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008b0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dd57      	ble.n	8008bc4 <forward_conv2d+0x86c>
 8008b14:	4676      	mov	r6, lr
 8008b16:	f04f 0c00 	mov.w	ip, #0
 8008b1a:	f1b8 0f00 	cmp.w	r8, #0
 8008b1e:	f340 81db 	ble.w	8008ed8 <forward_conv2d+0xb80>
 8008b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b26:	f109 0310 	add.w	r3, r9, #16
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	18b1      	adds	r1, r6, r2
 8008b2e:	4632      	mov	r2, r6
 8008b30:	eb02 050b 	add.w	r5, r2, fp
 8008b34:	ed53 7a03 	vldr	s15, [r3, #-12]
 8008b38:	ed92 4a00 	vldr	s8, [r2]
 8008b3c:	3004      	adds	r0, #4
 8008b3e:	ed95 7a00 	vldr	s14, [r5]
 8008b42:	eb01 050b 	add.w	r5, r1, fp
 8008b46:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008b4a:	4540      	cmp	r0, r8
 8008b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b50:	ed91 5a00 	vldr	s10, [r1]
 8008b54:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008b58:	4452      	add	r2, sl
 8008b5a:	ed13 7a01 	vldr	s14, [r3, #-4]
 8008b5e:	4451      	add	r1, sl
 8008b60:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008b64:	ed95 6a00 	vldr	s12, [r5]
 8008b68:	f103 0310 	add.w	r3, r3, #16
 8008b6c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008b70:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008b74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008b78:	dbda      	blt.n	8008b30 <forward_conv2d+0x7d8>
 8008b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b7e:	441e      	add	r6, r3
 8008b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b82:	4499      	add	r9, r3
 8008b84:	4284      	cmp	r4, r0
 8008b86:	dd11      	ble.n	8008bac <forward_conv2d+0x854>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	4633      	mov	r3, r6
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	3201      	adds	r2, #1
 8008b90:	edd3 7a00 	vldr	s15, [r3]
 8008b94:	ecb1 7a01 	vldmia	r1!, {s14}
 8008b98:	445b      	add	r3, fp
 8008b9a:	4294      	cmp	r4, r2
 8008b9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008ba0:	d1f5      	bne.n	8008b8e <forward_conv2d+0x836>
 8008ba2:	1a20      	subs	r0, r4, r0
 8008ba4:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8008ba8:	fb00 660b 	mla	r6, r0, fp, r6
 8008bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bb0:	f10c 0c01 	add.w	ip, ip, #1
 8008bb4:	441e      	add	r6, r3
 8008bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bba:	4499      	add	r9, r3
 8008bbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008bc0:	4563      	cmp	r3, ip
 8008bc2:	d1aa      	bne.n	8008b1a <forward_conv2d+0x7c2>
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008bca:	4499      	add	r9, r3
 8008bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bce:	ece3 6a01 	vstmia	r3!, {s13}
 8008bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d18f      	bne.n	8008afc <forward_conv2d+0x7a4>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f10e 0e04 	add.w	lr, lr, #4
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	1a9b      	subs	r3, r3, r2
 8008be6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	459e      	cmp	lr, r3
 8008bee:	f4ff af7b 	bcc.w	8008ae8 <forward_conv2d+0x790>
 8008bf2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008bf6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008c02:	3301      	adds	r3, #1
 8008c04:	4608      	mov	r0, r1
 8008c06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008c0a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008c0e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008c12:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c14:	4410      	add	r0, r2
 8008c16:	1a8a      	subs	r2, r1, r2
 8008c18:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008c1c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008c20:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8008c24:	429a      	cmp	r2, r3
 8008c26:	f47f aeff 	bne.w	8008a28 <forward_conv2d+0x6d0>
 8008c2a:	e64d      	b.n	80088c8 <forward_conv2d+0x570>
 8008c2c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008c2e:	2801      	cmp	r0, #1
 8008c30:	f47f ad01 	bne.w	8008636 <forward_conv2d+0x2de>
 8008c34:	1ad2      	subs	r2, r2, r3
 8008c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c38:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8008c3c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c42:	fb00 4101 	mla	r1, r0, r1, r4
 8008c46:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008c4a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8008c4e:	f080 8195 	bcs.w	8008f7c <forward_conv2d+0xc24>
 8008c52:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008c56:	2a00      	cmp	r2, #0
 8008c58:	f43f ae36 	beq.w	80088c8 <forward_conv2d+0x570>
 8008c5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c5e:	f8c7 b038 	str.w	fp, [r7, #56]	; 0x38
 8008c62:	fb02 f303 	mul.w	r3, r2, r3
 8008c66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c68:	663b      	str	r3, [r7, #96]	; 0x60
 8008c6a:	4411      	add	r1, r2
 8008c6c:	1a9b      	subs	r3, r3, r2
 8008c6e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8008c70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c72:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8008c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c7a:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8008c7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c80:	2300      	movs	r3, #0
 8008c82:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8008c86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c8a:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8008c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8147 	beq.w	8008f26 <forward_conv2d+0xbce>
 8008c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c9a:	ed93 6a00 	vldr	s12, [r3]
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ca2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 80fe 	beq.w	8008ea8 <forward_conv2d+0xb50>
 8008cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb0:	f04f 0b00 	mov.w	fp, #0
 8008cb4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008cb8:	eb03 0802 	add.w	r8, r3, r2
 8008cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ccc:	673b      	str	r3, [r7, #112]	; 0x70
 8008cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f2c0 811a 	blt.w	8008f14 <forward_conv2d+0xbbc>
 8008ce0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ce8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008cec:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008cf0:	4540      	cmp	r0, r8
 8008cf2:	bf94      	ite	ls
 8008cf4:	ebc3 0300 	rsbls	r3, r3, r0
 8008cf8:	ebc3 0308 	rsbhi	r3, r3, r8
 8008cfc:	4422      	add	r2, r4
 8008cfe:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008d02:	1ac0      	subs	r0, r0, r3
 8008d04:	eba4 0903 	sub.w	r9, r4, r3
 8008d08:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8008d0c:	fb03 f304 	mul.w	r3, r3, r4
 8008d10:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 8008d14:	2c00      	cmp	r4, #0
 8008d16:	f340 80fa 	ble.w	8008f0e <forward_conv2d+0xbb6>
 8008d1a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8008d1e:	f023 050f 	bic.w	r5, r3, #15
 8008d22:	eef0 6a46 	vmov.f32	s13, s12
 8008d26:	f04f 0e00 	mov.w	lr, #0
 8008d2a:	fb04 f000 	mul.w	r0, r4, r0
 8008d2e:	fb04 f909 	mul.w	r9, r4, r9
 8008d32:	6578      	str	r0, [r7, #84]	; 0x54
 8008d34:	1e68      	subs	r0, r5, #1
 8008d36:	0900      	lsrs	r0, r0, #4
 8008d38:	3001      	adds	r0, #1
 8008d3a:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008d3e:	0100      	lsls	r0, r0, #4
 8008d40:	6538      	str	r0, [r7, #80]	; 0x50
 8008d42:	2d00      	cmp	r5, #0
 8008d44:	f340 80e1 	ble.w	8008f0a <forward_conv2d+0xbb2>
 8008d48:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008d4c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008d50:	2600      	movs	r6, #0
 8008d52:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 8008d56:	3610      	adds	r6, #16
 8008d58:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 8008d5c:	3040      	adds	r0, #64	; 0x40
 8008d5e:	ed50 5a20 	vldr	s11, [r0, #-128]	; 0xffffff80
 8008d62:	42ae      	cmp	r6, r5
 8008d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d68:	ed14 7a10 	vldr	s14, [r4, #-64]	; 0xffffffc0
 8008d6c:	ed50 2a1e 	vldr	s5, [r0, #-120]	; 0xffffff88
 8008d70:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008d74:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 8008d78:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008d7c:	ed50 3a1d 	vldr	s7, [r0, #-116]	; 0xffffff8c
 8008d80:	ed14 4a1d 	vldr	s8, [r4, #-116]	; 0xffffff8c
 8008d84:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 8008d88:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 8008d8c:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 8008d90:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 8008d94:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008d98:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 8008d9c:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 8008da0:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 8008da4:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 8008da8:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 8008dac:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 8008db0:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008db4:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 8008db8:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 8008dbc:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 8008dc0:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 8008dc4:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 8008dc8:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 8008dcc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008dd0:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 8008dd4:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 8008dd8:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 8008ddc:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 8008de0:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8008de4:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 8008de8:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008dec:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 8008df0:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 8008df4:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008df8:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008dfc:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008e00:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008e04:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008e08:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008e0c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008e10:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008e14:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008e18:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008e1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008e20:	db97      	blt.n	8008d52 <forward_conv2d+0x9fa>
 8008e22:	4451      	add	r1, sl
 8008e24:	4452      	add	r2, sl
 8008e26:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e28:	4283      	cmp	r3, r0
 8008e2a:	dd0f      	ble.n	8008e4c <forward_conv2d+0xaf4>
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	468c      	mov	ip, r1
 8008e30:	4616      	mov	r6, r2
 8008e32:	3401      	adds	r4, #1
 8008e34:	ecb6 7a01 	vldmia	r6!, {s14}
 8008e38:	ecfc 7a01 	vldmia	ip!, {s15}
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008e42:	d1f6      	bne.n	8008e32 <forward_conv2d+0xada>
 8008e44:	1a18      	subs	r0, r3, r0
 8008e46:	0080      	lsls	r0, r0, #2
 8008e48:	4402      	add	r2, r0
 8008e4a:	4401      	add	r1, r0
 8008e4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008e4e:	f10e 0e01 	add.w	lr, lr, #1
 8008e52:	4449      	add	r1, r9
 8008e54:	4402      	add	r2, r0
 8008e56:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8008e5a:	4570      	cmp	r0, lr
 8008e5c:	f47f af71 	bne.w	8008d42 <forward_conv2d+0x9ea>
 8008e60:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008e64:	f10b 0b01 	add.w	fp, fp, #1
 8008e68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008e70:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008e74:	4410      	add	r0, r2
 8008e76:	edc3 6a00 	vstr	s13, [r3]
 8008e7a:	440b      	add	r3, r1
 8008e7c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8008e80:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8008e84:	eba8 0802 	sub.w	r8, r8, r2
 8008e88:	4608      	mov	r0, r1
 8008e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8008e8c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008e90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e92:	4418      	add	r0, r3
 8008e94:	1acb      	subs	r3, r1, r3
 8008e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e9e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8008ea2:	455b      	cmp	r3, fp
 8008ea4:	f47f af17 	bne.w	8008cd6 <forward_conv2d+0x97e>
 8008ea8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008eb2:	440a      	add	r2, r1
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008eba:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ec2:	3204      	adds	r2, #4
 8008ec4:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008ec8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	f47f aede 	bne.w	8008c8e <forward_conv2d+0x936>
 8008ed2:	f8d7 b038 	ldr.w	fp, [r7, #56]	; 0x38
 8008ed6:	e4f7      	b.n	80088c8 <forward_conv2d+0x570>
 8008ed8:	2000      	movs	r0, #0
 8008eda:	e653      	b.n	8008b84 <forward_conv2d+0x82c>
 8008edc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ee0:	eef0 3a48 	vmov.f32	s7, s16
 8008ee4:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eec:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008ef0:	1b19      	subs	r1, r3, r4
 8008ef2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008ef6:	1b1b      	subs	r3, r3, r4
 8008ef8:	e5c6      	b.n	8008a88 <forward_conv2d+0x730>
 8008efa:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8008efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f00:	4621      	mov	r1, r4
 8008f02:	191a      	adds	r2, r3, r4
 8008f04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f08:	e596      	b.n	8008a38 <forward_conv2d+0x6e0>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e78c      	b.n	8008e28 <forward_conv2d+0xad0>
 8008f0e:	eef0 6a46 	vmov.f32	s13, s12
 8008f12:	e7a5      	b.n	8008e60 <forward_conv2d+0xb08>
 8008f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f18:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008f1c:	eba8 0303 	sub.w	r3, r8, r3
 8008f20:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8008f24:	e6e0      	b.n	8008ce8 <forward_conv2d+0x990>
 8008f26:	eeb0 6a48 	vmov.f32	s12, s16
 8008f2a:	e6ba      	b.n	8008ca2 <forward_conv2d+0x94a>
 8008f2c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008f30:	68ca      	ldr	r2, [r1, #12]
 8008f32:	2a00      	cmp	r2, #0
 8008f34:	f43f aad0 	beq.w	80084d8 <forward_conv2d+0x180>
 8008f38:	6973      	ldr	r3, [r6, #20]
 8008f3a:	8818      	ldrh	r0, [r3, #0]
 8008f3c:	2803      	cmp	r0, #3
 8008f3e:	f240 818b 	bls.w	8009258 <forward_conv2d+0xf00>
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 8183 	beq.w	8009252 <forward_conv2d+0xefa>
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 817f 	beq.w	8009252 <forward_conv2d+0xefa>
 8008f54:	699c      	ldr	r4, [r3, #24]
 8008f56:	462b      	mov	r3, r5
 8008f58:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8008f5c:	6889      	ldr	r1, [r1, #8]
 8008f5e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8008f62:	2800      	cmp	r0, #0
 8008f64:	bf18      	it	ne
 8008f66:	4605      	movne	r5, r0
 8008f68:	f8c7 5108 	str.w	r5, [r7, #264]	; 0x108
 8008f6c:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8008f70:	e9cd 5400 	strd	r5, r4, [sp]
 8008f74:	f7ff f9a0 	bl	80082b8 <ai_dict_decompress_f32>
 8008f78:	f7ff baae 	b.w	80084d8 <forward_conv2d+0x180>
 8008f7c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008f80:	f8c7 d060 	str.w	sp, [r7, #96]	; 0x60
 8008f84:	320a      	adds	r2, #10
 8008f86:	f022 0207 	bic.w	r2, r2, #7
 8008f8a:	ebad 0d02 	sub.w	sp, sp, r2
 8008f8e:	aa02      	add	r2, sp, #8
 8008f90:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8008f94:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008f98:	2a00      	cmp	r2, #0
 8008f9a:	f000 8145 	beq.w	8009228 <forward_conv2d+0xed0>
 8008f9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fa0:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8008fa4:	fb02 f303 	mul.w	r3, r2, r3
 8008fa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008faa:	657b      	str	r3, [r7, #84]	; 0x54
 8008fac:	4411      	add	r1, r2
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fb4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8008fb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008fbc:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8008fc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008fca:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fcc:	6739      	str	r1, [r7, #112]	; 0x70
 8008fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fd0:	b13b      	cbz	r3, 8008fe2 <forward_conv2d+0xc8a>
 8008fd2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008fd6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008fda:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8008fde:	f000 ff15 	bl	8009e0c <memcpy>
 8008fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 8130 	beq.w	800924c <forward_conv2d+0xef4>
 8008fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fee:	ed93 6a00 	vldr	s12, [r3]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	673b      	str	r3, [r7, #112]	; 0x70
 8008ff6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 80fe 	beq.w	80091fc <forward_conv2d+0xea4>
 8009000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009004:	f04f 0b00 	mov.w	fp, #0
 8009008:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800900c:	eb03 0802 	add.w	r8, r3, r2
 8009010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800901c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009020:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800902a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800902e:	2b00      	cmp	r3, #0
 8009030:	f2c0 8103 	blt.w	800923a <forward_conv2d+0xee2>
 8009034:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8009038:	2300      	movs	r3, #0
 800903a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800903c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009040:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8009044:	4540      	cmp	r0, r8
 8009046:	bf94      	ite	ls
 8009048:	ebc3 0300 	rsbls	r3, r3, r0
 800904c:	ebc3 0308 	rsbhi	r3, r3, r8
 8009050:	4422      	add	r2, r4
 8009052:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8009056:	1ac0      	subs	r0, r0, r3
 8009058:	eba4 0903 	sub.w	r9, r4, r3
 800905c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8009060:	fb03 f304 	mul.w	r3, r3, r4
 8009064:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 8009068:	2c00      	cmp	r4, #0
 800906a:	f340 80e3 	ble.w	8009234 <forward_conv2d+0xedc>
 800906e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8009072:	f023 050f 	bic.w	r5, r3, #15
 8009076:	eef0 6a46 	vmov.f32	s13, s12
 800907a:	f04f 0e00 	mov.w	lr, #0
 800907e:	fb04 f000 	mul.w	r0, r4, r0
 8009082:	fb04 f909 	mul.w	r9, r4, r9
 8009086:	6538      	str	r0, [r7, #80]	; 0x50
 8009088:	1e68      	subs	r0, r5, #1
 800908a:	0900      	lsrs	r0, r0, #4
 800908c:	3001      	adds	r0, #1
 800908e:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8009092:	0100      	lsls	r0, r0, #4
 8009094:	6378      	str	r0, [r7, #52]	; 0x34
 8009096:	2d00      	cmp	r5, #0
 8009098:	f340 80ca 	ble.w	8009230 <forward_conv2d+0xed8>
 800909c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80090a0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80090a4:	2600      	movs	r6, #0
 80090a6:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 80090aa:	3610      	adds	r6, #16
 80090ac:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80090b0:	3040      	adds	r0, #64	; 0x40
 80090b2:	ed50 5a20 	vldr	s11, [r0, #-128]	; 0xffffff80
 80090b6:	42ae      	cmp	r6, r5
 80090b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090bc:	ed14 7a10 	vldr	s14, [r4, #-64]	; 0xffffffc0
 80090c0:	ed50 2a1e 	vldr	s5, [r0, #-120]	; 0xffffff88
 80090c4:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80090c8:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 80090cc:	eee5 7a87 	vfma.f32	s15, s11, s14
 80090d0:	ed50 3a1d 	vldr	s7, [r0, #-116]	; 0xffffff8c
 80090d4:	ed14 4a1d 	vldr	s8, [r4, #-116]	; 0xffffff8c
 80090d8:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 80090dc:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 80090e0:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 80090e4:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 80090e8:	eee2 7a83 	vfma.f32	s15, s5, s6
 80090ec:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 80090f0:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 80090f4:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 80090f8:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 80090fc:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 8009100:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 8009104:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009108:	ed54 8a17 	vldr	s17, [r4, #-92]	; 0xffffffa4
 800910c:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 8009110:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 8009114:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 8009118:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800911c:	ed14 2a15 	vldr	s4, [r4, #-84]	; 0xffffffac
 8009120:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009124:	ed54 2a14 	vldr	s5, [r4, #-80]	; 0xffffffb0
 8009128:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800912c:	ed54 3a13 	vldr	s7, [r4, #-76]	; 0xffffffb4
 8009130:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8009134:	ed54 4a12 	vldr	s9, [r4, #-72]	; 0xffffffb8
 8009138:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800913c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009140:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 8009144:	ed14 7a11 	vldr	s14, [r4, #-68]	; 0xffffffbc
 8009148:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800914c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009150:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009154:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009158:	eee0 7a81 	vfma.f32	s15, s1, s2
 800915c:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009160:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009164:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009168:	eee4 7a85 	vfma.f32	s15, s9, s10
 800916c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009170:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009174:	db97      	blt.n	80090a6 <forward_conv2d+0xd4e>
 8009176:	4451      	add	r1, sl
 8009178:	4452      	add	r2, sl
 800917a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800917c:	4283      	cmp	r3, r0
 800917e:	dd0f      	ble.n	80091a0 <forward_conv2d+0xe48>
 8009180:	4604      	mov	r4, r0
 8009182:	468c      	mov	ip, r1
 8009184:	4616      	mov	r6, r2
 8009186:	3401      	adds	r4, #1
 8009188:	ecb6 7a01 	vldmia	r6!, {s14}
 800918c:	ecfc 7a01 	vldmia	ip!, {s15}
 8009190:	42a3      	cmp	r3, r4
 8009192:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009196:	d1f6      	bne.n	8009186 <forward_conv2d+0xe2e>
 8009198:	1a18      	subs	r0, r3, r0
 800919a:	0080      	lsls	r0, r0, #2
 800919c:	4402      	add	r2, r0
 800919e:	4401      	add	r1, r0
 80091a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80091a2:	f10e 0e01 	add.w	lr, lr, #1
 80091a6:	4449      	add	r1, r9
 80091a8:	4402      	add	r2, r0
 80091aa:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80091ae:	4570      	cmp	r0, lr
 80091b0:	f47f af71 	bne.w	8009096 <forward_conv2d+0xd3e>
 80091b4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80091b8:	f10b 0b01 	add.w	fp, fp, #1
 80091bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091be:	4608      	mov	r0, r1
 80091c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80091c4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80091c8:	4410      	add	r0, r2
 80091ca:	edc3 6a00 	vstr	s13, [r3]
 80091ce:	440b      	add	r3, r1
 80091d0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80091d4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80091d8:	eba8 0802 	sub.w	r8, r8, r2
 80091dc:	4608      	mov	r0, r1
 80091de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091e0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80091e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091e6:	4418      	add	r0, r3
 80091e8:	1acb      	subs	r3, r1, r3
 80091ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80091f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80091f6:	455b      	cmp	r3, fp
 80091f8:	f47f af17 	bne.w	800902a <forward_conv2d+0xcd2>
 80091fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009200:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009206:	440a      	add	r2, r1
 8009208:	3301      	adds	r3, #1
 800920a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800920e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009212:	67bb      	str	r3, [r7, #120]	; 0x78
 8009214:	3204      	adds	r2, #4
 8009216:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800921a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800921e:	429a      	cmp	r2, r3
 8009220:	f47f aed5 	bne.w	8008fce <forward_conv2d+0xc76>
 8009224:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 8009228:	f8d7 d060 	ldr.w	sp, [r7, #96]	; 0x60
 800922c:	f7ff bb4c 	b.w	80088c8 <forward_conv2d+0x570>
 8009230:	2000      	movs	r0, #0
 8009232:	e7a3      	b.n	800917c <forward_conv2d+0xe24>
 8009234:	eef0 6a46 	vmov.f32	s13, s12
 8009238:	e7bc      	b.n	80091b4 <forward_conv2d+0xe5c>
 800923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800923e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009242:	eba8 0303 	sub.w	r3, r8, r3
 8009246:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800924a:	e6f7      	b.n	800903c <forward_conv2d+0xce4>
 800924c:	eeb0 6a48 	vmov.f32	s12, s16
 8009250:	e6d1      	b.n	8008ff6 <forward_conv2d+0xc9e>
 8009252:	2300      	movs	r3, #0
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	deff      	udf	#255	; 0xff
 8009258:	2300      	movs	r3, #0
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	deff      	udf	#255	; 0xff
 800925e:	b178      	cbz	r0, 8009280 <forward_conv2d+0xf28>
 8009260:	6883      	ldr	r3, [r0, #8]
 8009262:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800926a:	2301      	movs	r3, #1
 800926c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009270:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009274:	f7ff b8fc 	b.w	8008470 <forward_conv2d+0x118>
 8009278:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800927c:	f7ff b8dc 	b.w	8008438 <forward_conv2d+0xe0>
 8009280:	2301      	movs	r3, #1
 8009282:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8009286:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800928a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800928e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009292:	f7ff b8ed 	b.w	8008470 <forward_conv2d+0x118>
 8009296:	3218      	adds	r2, #24
 8009298:	d007      	beq.n	80092aa <forward_conv2d+0xf52>
 800929a:	462b      	mov	r3, r5
 800929c:	462c      	mov	r4, r5
 800929e:	462a      	mov	r2, r5
 80092a0:	f7ff b884 	b.w	80083ac <forward_conv2d+0x54>
 80092a4:	2300      	movs	r3, #0
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	deff      	udf	#255	; 0xff
 80092aa:	68d3      	ldr	r3, [r2, #12]
 80092ac:	deff      	udf	#255	; 0xff
 80092ae:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 80092b2:	f7ff b86a 	b.w	800838a <forward_conv2d+0x32>
 80092b6:	2300      	movs	r3, #0
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	deff      	udf	#255	; 0xff
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	deff      	udf	#255	; 0xff
 80092c0:	2300      	movs	r3, #0
 80092c2:	f7ff b872 	b.w	80083aa <forward_conv2d+0x52>
 80092c6:	bf00      	nop

080092c8 <forward_dense>:
 80092c8:	6942      	ldr	r2, [r0, #20]
 80092ca:	8813      	ldrh	r3, [r2, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 81c8 	beq.w	8009662 <forward_dense+0x39a>
 80092d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d6:	ed2d 8b08 	vpush	{d8-d11}
 80092da:	6851      	ldr	r1, [r2, #4]
 80092dc:	b091      	sub	sp, #68	; 0x44
 80092de:	684d      	ldr	r5, [r1, #4]
 80092e0:	b105      	cbz	r5, 80092e4 <forward_dense+0x1c>
 80092e2:	682d      	ldr	r5, [r5, #0]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	f240 81b9 	bls.w	800965c <forward_dense+0x394>
 80092ea:	690a      	ldr	r2, [r1, #16]
 80092ec:	b102      	cbz	r2, 80092f0 <forward_dense+0x28>
 80092ee:	6812      	ldr	r2, [r2, #0]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	f000 81b8 	beq.w	8009666 <forward_dense+0x39e>
 80092f6:	69cb      	ldr	r3, [r1, #28]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 8209 	beq.w	8009710 <forward_dense+0x448>
 80092fe:	6818      	ldr	r0, [r3, #0]
 8009300:	9008      	str	r0, [sp, #32]
 8009302:	f111 0018 	adds.w	r0, r1, #24
 8009306:	f000 81dc 	beq.w	80096c2 <forward_dense+0x3fa>
 800930a:	8b09      	ldrh	r1, [r1, #24]
 800930c:	2901      	cmp	r1, #1
 800930e:	f240 81fc 	bls.w	800970a <forward_dense+0x442>
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 81d7 	beq.w	80096c6 <forward_dense+0x3fe>
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	9306      	str	r3, [sp, #24]
 800931c:	9b08      	ldr	r3, [sp, #32]
 800931e:	68d6      	ldr	r6, [r2, #12]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	68b0      	ldr	r0, [r6, #8]
 8009324:	681f      	ldr	r7, [r3, #0]
 8009326:	68f4      	ldr	r4, [r6, #12]
 8009328:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800932c:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 8009330:	f3c7 4743 	ubfx	r7, r7, #17, #4
 8009334:	fb04 f000 	mul.w	r0, r4, r0
 8009338:	fa4e f10c 	asr.w	r1, lr, ip
 800933c:	2f04      	cmp	r7, #4
 800933e:	9007      	str	r0, [sp, #28]
 8009340:	910b      	str	r1, [sp, #44]	; 0x2c
 8009342:	68e9      	ldr	r1, [r5, #12]
 8009344:	6870      	ldr	r0, [r6, #4]
 8009346:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800934a:	f000 81db 	beq.w	8009704 <forward_dense+0x43c>
 800934e:	2f08      	cmp	r7, #8
 8009350:	f000 81d8 	beq.w	8009704 <forward_dense+0x43c>
 8009354:	f04f 0a00 	mov.w	sl, #0
 8009358:	6992      	ldr	r2, [r2, #24]
 800935a:	0080      	lsls	r0, r0, #2
 800935c:	69a9      	ldr	r1, [r5, #24]
 800935e:	6894      	ldr	r4, [r2, #8]
 8009360:	9a08      	ldr	r2, [sp, #32]
 8009362:	9009      	str	r0, [sp, #36]	; 0x24
 8009364:	1826      	adds	r6, r4, r0
 8009366:	6952      	ldr	r2, [r2, #20]
 8009368:	9404      	str	r4, [sp, #16]
 800936a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800936e:	9a07      	ldr	r2, [sp, #28]
 8009370:	688f      	ldr	r7, [r1, #8]
 8009372:	2a00      	cmp	r2, #0
 8009374:	f000 81c1 	beq.w	80096fa <forward_dense+0x432>
 8009378:	f1a8 0210 	sub.w	r2, r8, #16
 800937c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8009380:	689d      	ldr	r5, [r3, #8]
 8009382:	0912      	lsrs	r2, r2, #4
 8009384:	910a      	str	r1, [sp, #40]	; 0x28
 8009386:	2100      	movs	r1, #0
 8009388:	9b06      	ldr	r3, [sp, #24]
 800938a:	3201      	adds	r2, #1
 800938c:	eddf 2acf 	vldr	s5, [pc, #828]	; 80096cc <forward_dense+0x404>
 8009390:	9105      	str	r1, [sp, #20]
 8009392:	f008 010f 	and.w	r1, r8, #15
 8009396:	0192      	lsls	r2, r2, #6
 8009398:	910d      	str	r1, [sp, #52]	; 0x34
 800939a:	920c      	str	r2, [sp, #48]	; 0x30
 800939c:	2b00      	cmp	r3, #0
 800939e:	d042      	beq.n	8009426 <forward_dense+0x15e>
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	689c      	ldr	r4, [r3, #8]
 80093a4:	9b04      	ldr	r3, [sp, #16]
 80093a6:	f1ba 0f00 	cmp.w	sl, #0
 80093aa:	d041      	beq.n	8009430 <forward_dense+0x168>
 80093ac:	42b3      	cmp	r3, r6
 80093ae:	d229      	bcs.n	8009404 <forward_dense+0x13c>
 80093b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093b2:	469b      	mov	fp, r3
 80093b4:	ab0f      	add	r3, sp, #60	; 0x3c
 80093b6:	2a04      	cmp	r2, #4
 80093b8:	9303      	str	r3, [sp, #12]
 80093ba:	4633      	mov	r3, r6
 80093bc:	4646      	mov	r6, r8
 80093be:	4698      	mov	r8, r3
 80093c0:	f000 8154 	beq.w	800966c <forward_dense+0x3a4>
 80093c4:	2c00      	cmp	r4, #0
 80093c6:	f000 8183 	beq.w	80096d0 <forward_dense+0x408>
 80093ca:	f8d4 c000 	ldr.w	ip, [r4]
 80093ce:	463b      	mov	r3, r7
 80093d0:	4629      	mov	r1, r5
 80093d2:	9600      	str	r6, [sp, #0]
 80093d4:	4652      	mov	r2, sl
 80093d6:	9803      	ldr	r0, [sp, #12]
 80093d8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80093dc:	f7fe fc7e 	bl	8007cdc <ai_dict8_dot_array_f32>
 80093e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093e2:	3404      	adds	r4, #4
 80093e4:	444d      	add	r5, r9
 80093e6:	f84b 3b04 	str.w	r3, [fp], #4
 80093ea:	45c3      	cmp	fp, r8
 80093ec:	d3ea      	bcc.n	80093c4 <forward_dense+0xfc>
 80093ee:	4643      	mov	r3, r8
 80093f0:	46b0      	mov	r8, r6
 80093f2:	461e      	mov	r6, r3
 80093f4:	9a04      	ldr	r2, [sp, #16]
 80093f6:	43d3      	mvns	r3, r2
 80093f8:	4433      	add	r3, r6
 80093fa:	f023 0303 	bic.w	r3, r3, #3
 80093fe:	3304      	adds	r3, #4
 8009400:	18d3      	adds	r3, r2, r3
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009406:	9b05      	ldr	r3, [sp, #20]
 8009408:	4417      	add	r7, r2
 800940a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800940c:	3301      	adds	r3, #1
 800940e:	4416      	add	r6, r2
 8009410:	9a07      	ldr	r2, [sp, #28]
 8009412:	9305      	str	r3, [sp, #20]
 8009414:	4293      	cmp	r3, r2
 8009416:	f000 8170 	beq.w	80096fa <forward_dense+0x432>
 800941a:	9b08      	ldr	r3, [sp, #32]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	689d      	ldr	r5, [r3, #8]
 8009420:	9b06      	ldr	r3, [sp, #24]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1bc      	bne.n	80093a0 <forward_dense+0xd8>
 8009426:	461c      	mov	r4, r3
 8009428:	9b04      	ldr	r3, [sp, #16]
 800942a:	f1ba 0f00 	cmp.w	sl, #0
 800942e:	d1bd      	bne.n	80093ac <forward_dense+0xe4>
 8009430:	42b3      	cmp	r3, r6
 8009432:	d2e7      	bcs.n	8009404 <forward_dense+0x13c>
 8009434:	4618      	mov	r0, r3
 8009436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009438:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800943c:	eb07 0c03 	add.w	ip, r7, r3
 8009440:	469e      	mov	lr, r3
 8009442:	2c00      	cmp	r4, #0
 8009444:	f000 80fe 	beq.w	8009644 <forward_dense+0x37c>
 8009448:	f1b8 0f0f 	cmp.w	r8, #15
 800944c:	ed94 6a00 	vldr	s12, [r4]
 8009450:	f104 0404 	add.w	r4, r4, #4
 8009454:	f240 80fc 	bls.w	8009650 <forward_dense+0x388>
 8009458:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800945c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8009460:	4641      	mov	r1, r8
 8009462:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80096cc <forward_dense+0x404>
 8009466:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800946a:	3910      	subs	r1, #16
 800946c:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8009470:	3240      	adds	r2, #64	; 0x40
 8009472:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8009476:	290f      	cmp	r1, #15
 8009478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947c:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 8009480:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 8009484:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009488:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800948c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009490:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 8009494:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 8009498:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800949c:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 80094a0:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 80094a4:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 80094a8:	eee2 7a03 	vfma.f32	s15, s4, s6
 80094ac:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 80094b0:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 80094b4:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 80094b8:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 80094bc:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 80094c0:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 80094c4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80094c8:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 80094cc:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 80094d0:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 80094d4:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 80094d8:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 80094dc:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 80094e0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80094e4:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 80094e8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80094ec:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 80094f0:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 80094f4:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 80094f8:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 80094fc:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009500:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8009504:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 8009508:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800950c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009510:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009514:	eee8 7a88 	vfma.f32	s15, s17, s16
 8009518:	eee0 7a20 	vfma.f32	s15, s0, s1
 800951c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009520:	eee2 7a03 	vfma.f32	s15, s4, s6
 8009524:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009528:	eee4 7a85 	vfma.f32	s15, s9, s10
 800952c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009530:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009534:	d897      	bhi.n	8009466 <forward_dense+0x19e>
 8009536:	eb05 010e 	add.w	r1, r5, lr
 800953a:	465b      	mov	r3, fp
 800953c:	4662      	mov	r2, ip
 800953e:	2b00      	cmp	r3, #0
 8009540:	d075      	beq.n	800962e <forward_dense+0x366>
 8009542:	ed91 7a00 	vldr	s14, [r1]
 8009546:	2b01      	cmp	r3, #1
 8009548:	edd2 7a00 	vldr	s15, [r2]
 800954c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009550:	d06d      	beq.n	800962e <forward_dense+0x366>
 8009552:	ed91 7a01 	vldr	s14, [r1, #4]
 8009556:	2b02      	cmp	r3, #2
 8009558:	edd2 7a01 	vldr	s15, [r2, #4]
 800955c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009560:	d065      	beq.n	800962e <forward_dense+0x366>
 8009562:	ed91 7a02 	vldr	s14, [r1, #8]
 8009566:	2b03      	cmp	r3, #3
 8009568:	edd2 7a02 	vldr	s15, [r2, #8]
 800956c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009570:	d05d      	beq.n	800962e <forward_dense+0x366>
 8009572:	ed91 7a03 	vldr	s14, [r1, #12]
 8009576:	2b04      	cmp	r3, #4
 8009578:	edd2 7a03 	vldr	s15, [r2, #12]
 800957c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009580:	d055      	beq.n	800962e <forward_dense+0x366>
 8009582:	ed91 7a04 	vldr	s14, [r1, #16]
 8009586:	2b05      	cmp	r3, #5
 8009588:	edd2 7a04 	vldr	s15, [r2, #16]
 800958c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009590:	d04d      	beq.n	800962e <forward_dense+0x366>
 8009592:	ed91 7a05 	vldr	s14, [r1, #20]
 8009596:	2b06      	cmp	r3, #6
 8009598:	edd2 7a05 	vldr	s15, [r2, #20]
 800959c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095a0:	d045      	beq.n	800962e <forward_dense+0x366>
 80095a2:	ed91 7a06 	vldr	s14, [r1, #24]
 80095a6:	2b07      	cmp	r3, #7
 80095a8:	edd2 7a06 	vldr	s15, [r2, #24]
 80095ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095b0:	d03d      	beq.n	800962e <forward_dense+0x366>
 80095b2:	ed91 7a07 	vldr	s14, [r1, #28]
 80095b6:	2b08      	cmp	r3, #8
 80095b8:	edd2 7a07 	vldr	s15, [r2, #28]
 80095bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095c0:	d035      	beq.n	800962e <forward_dense+0x366>
 80095c2:	ed91 7a08 	vldr	s14, [r1, #32]
 80095c6:	2b09      	cmp	r3, #9
 80095c8:	edd2 7a08 	vldr	s15, [r2, #32]
 80095cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095d0:	d02d      	beq.n	800962e <forward_dense+0x366>
 80095d2:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80095d6:	2b0a      	cmp	r3, #10
 80095d8:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80095dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095e0:	d025      	beq.n	800962e <forward_dense+0x366>
 80095e2:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80095e6:	2b0b      	cmp	r3, #11
 80095e8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80095ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095f0:	d01d      	beq.n	800962e <forward_dense+0x366>
 80095f2:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80095f6:	2b0c      	cmp	r3, #12
 80095f8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80095fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009600:	d015      	beq.n	800962e <forward_dense+0x366>
 8009602:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8009606:	2b0d      	cmp	r3, #13
 8009608:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800960c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009610:	d00d      	beq.n	800962e <forward_dense+0x366>
 8009612:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8009616:	2b0e      	cmp	r3, #14
 8009618:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800961c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009620:	d005      	beq.n	800962e <forward_dense+0x366>
 8009622:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8009626:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800962a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800962e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009632:	444d      	add	r5, r9
 8009634:	ece0 6a01 	vstmia	r0!, {s13}
 8009638:	42b0      	cmp	r0, r6
 800963a:	f4bf aedb 	bcs.w	80093f4 <forward_dense+0x12c>
 800963e:	2c00      	cmp	r4, #0
 8009640:	f47f af02 	bne.w	8009448 <forward_dense+0x180>
 8009644:	f1b8 0f0f 	cmp.w	r8, #15
 8009648:	eeb0 6a62 	vmov.f32	s12, s5
 800964c:	f63f af04 	bhi.w	8009458 <forward_dense+0x190>
 8009650:	4643      	mov	r3, r8
 8009652:	4629      	mov	r1, r5
 8009654:	463a      	mov	r2, r7
 8009656:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80096cc <forward_dense+0x404>
 800965a:	e770      	b.n	800953e <forward_dense+0x276>
 800965c:	2300      	movs	r3, #0
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	deff      	udf	#255	; 0xff
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	deff      	udf	#255	; 0xff
 8009666:	2300      	movs	r3, #0
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	deff      	udf	#255	; 0xff
 800966c:	b1a4      	cbz	r4, 8009698 <forward_dense+0x3d0>
 800966e:	f8d4 c000 	ldr.w	ip, [r4]
 8009672:	463b      	mov	r3, r7
 8009674:	4629      	mov	r1, r5
 8009676:	9600      	str	r6, [sp, #0]
 8009678:	4652      	mov	r2, sl
 800967a:	9803      	ldr	r0, [sp, #12]
 800967c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8009680:	f7fe fd5c 	bl	800813c <ai_dict4_dot_array_f32>
 8009684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009686:	3404      	adds	r4, #4
 8009688:	444d      	add	r5, r9
 800968a:	f84b 3b04 	str.w	r3, [fp], #4
 800968e:	45c3      	cmp	fp, r8
 8009690:	f4bf aead 	bcs.w	80093ee <forward_dense+0x126>
 8009694:	2c00      	cmp	r4, #0
 8009696:	d1ea      	bne.n	800966e <forward_dense+0x3a6>
 8009698:	4634      	mov	r4, r6
 800969a:	4646      	mov	r6, r8
 800969c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80096a0:	463b      	mov	r3, r7
 80096a2:	4629      	mov	r1, r5
 80096a4:	9400      	str	r4, [sp, #0]
 80096a6:	4652      	mov	r2, sl
 80096a8:	4640      	mov	r0, r8
 80096aa:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 80096ae:	f7fe fd45 	bl	800813c <ai_dict4_dot_array_f32>
 80096b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096b4:	444d      	add	r5, r9
 80096b6:	f84b 3b04 	str.w	r3, [fp], #4
 80096ba:	45b3      	cmp	fp, r6
 80096bc:	d3f0      	bcc.n	80096a0 <forward_dense+0x3d8>
 80096be:	46a0      	mov	r8, r4
 80096c0:	e698      	b.n	80093f4 <forward_dense+0x12c>
 80096c2:	9006      	str	r0, [sp, #24]
 80096c4:	e62a      	b.n	800931c <forward_dense+0x54>
 80096c6:	9306      	str	r3, [sp, #24]
 80096c8:	e628      	b.n	800931c <forward_dense+0x54>
 80096ca:	bf00      	nop
 80096cc:	00000000 	.word	0x00000000
 80096d0:	4634      	mov	r4, r6
 80096d2:	4646      	mov	r6, r8
 80096d4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80096d8:	463b      	mov	r3, r7
 80096da:	4629      	mov	r1, r5
 80096dc:	9400      	str	r4, [sp, #0]
 80096de:	4652      	mov	r2, sl
 80096e0:	4640      	mov	r0, r8
 80096e2:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 80096e6:	f7fe faf9 	bl	8007cdc <ai_dict8_dot_array_f32>
 80096ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ec:	444d      	add	r5, r9
 80096ee:	f84b 3b04 	str.w	r3, [fp], #4
 80096f2:	45b3      	cmp	fp, r6
 80096f4:	d3f0      	bcc.n	80096d8 <forward_dense+0x410>
 80096f6:	46a0      	mov	r8, r4
 80096f8:	e67c      	b.n	80093f4 <forward_dense+0x12c>
 80096fa:	b011      	add	sp, #68	; 0x44
 80096fc:	ecbd 8b08 	vpop	{d8-d11}
 8009700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009704:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8009708:	e626      	b.n	8009358 <forward_dense+0x90>
 800970a:	2300      	movs	r3, #0
 800970c:	9306      	str	r3, [sp, #24]
 800970e:	e605      	b.n	800931c <forward_dense+0x54>
 8009710:	9308      	str	r3, [sp, #32]
 8009712:	e5f6      	b.n	8009302 <forward_dense+0x3a>

08009714 <nl_func_relu_generic_array_f32>:
 8009714:	b470      	push	{r4, r5, r6}
 8009716:	edd3 6a02 	vldr	s13, [r3, #8]
 800971a:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800971e:	6880      	ldr	r0, [r0, #8]
 8009720:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8009724:	4414      	add	r4, r2
 8009726:	688d      	ldr	r5, [r1, #8]
 8009728:	00a4      	lsls	r4, r4, #2
 800972a:	ed93 7a00 	vldr	s14, [r3]
 800972e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009732:	ed93 6a01 	vldr	s12, [r3, #4]
 8009736:	eb00 0204 	add.w	r2, r0, r4
 800973a:	442c      	add	r4, r5
 800973c:	d420      	bmi.n	8009780 <nl_func_relu_generic_array_f32+0x6c>
 800973e:	42ac      	cmp	r4, r5
 8009740:	d33b      	bcc.n	80097ba <nl_func_relu_generic_array_f32+0xa6>
 8009742:	1d23      	adds	r3, r4, #4
 8009744:	3204      	adds	r2, #4
 8009746:	e010      	b.n	800976a <nl_func_relu_generic_array_f32+0x56>
 8009748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800974c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8009750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009754:	dd01      	ble.n	800975a <nl_func_relu_generic_array_f32+0x46>
 8009756:	ee65 7a86 	vmul.f32	s15, s11, s12
 800975a:	f1a3 0408 	sub.w	r4, r3, #8
 800975e:	ed62 7a01 	vstmdb	r2!, {s15}
 8009762:	4603      	mov	r3, r0
 8009764:	6888      	ldr	r0, [r1, #8]
 8009766:	4284      	cmp	r4, r0
 8009768:	d327      	bcc.n	80097ba <nl_func_relu_generic_array_f32+0xa6>
 800976a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800976e:	1f18      	subs	r0, r3, #4
 8009770:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009778:	dce6      	bgt.n	8009748 <nl_func_relu_generic_array_f32+0x34>
 800977a:	eef0 7a66 	vmov.f32	s15, s13
 800977e:	e7ec      	b.n	800975a <nl_func_relu_generic_array_f32+0x46>
 8009780:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8009784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009788:	d019      	beq.n	80097be <nl_func_relu_generic_array_f32+0xaa>
 800978a:	42ac      	cmp	r4, r5
 800978c:	d315      	bcc.n	80097ba <nl_func_relu_generic_array_f32+0xa6>
 800978e:	1d23      	adds	r3, r4, #4
 8009790:	3204      	adds	r2, #4
 8009792:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009796:	1f18      	subs	r0, r3, #4
 8009798:	f1a3 0508 	sub.w	r5, r3, #8
 800979c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097a0:	4603      	mov	r3, r0
 80097a2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80097a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097aa:	ee66 6a86 	vmul.f32	s13, s13, s12
 80097ae:	d51c      	bpl.n	80097ea <nl_func_relu_generic_array_f32+0xd6>
 80097b0:	ed62 6a01 	vstmdb	r2!, {s13}
 80097b4:	6888      	ldr	r0, [r1, #8]
 80097b6:	42a8      	cmp	r0, r5
 80097b8:	d9eb      	bls.n	8009792 <nl_func_relu_generic_array_f32+0x7e>
 80097ba:	bc70      	pop	{r4, r5, r6}
 80097bc:	4770      	bx	lr
 80097be:	42ac      	cmp	r4, r5
 80097c0:	d3fb      	bcc.n	80097ba <nl_func_relu_generic_array_f32+0xa6>
 80097c2:	1d23      	adds	r3, r4, #4
 80097c4:	3204      	adds	r2, #4
 80097c6:	2600      	movs	r6, #0
 80097c8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80097cc:	1f18      	subs	r0, r3, #4
 80097ce:	f1a3 0508 	sub.w	r5, r3, #8
 80097d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097d6:	4603      	mov	r3, r0
 80097d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097dc:	d80b      	bhi.n	80097f6 <nl_func_relu_generic_array_f32+0xe2>
 80097de:	ed62 7a01 	vstmdb	r2!, {s15}
 80097e2:	6888      	ldr	r0, [r1, #8]
 80097e4:	42a8      	cmp	r0, r5
 80097e6:	d9ef      	bls.n	80097c8 <nl_func_relu_generic_array_f32+0xb4>
 80097e8:	e7e7      	b.n	80097ba <nl_func_relu_generic_array_f32+0xa6>
 80097ea:	ed62 7a01 	vstmdb	r2!, {s15}
 80097ee:	6888      	ldr	r0, [r1, #8]
 80097f0:	42a8      	cmp	r0, r5
 80097f2:	d9ce      	bls.n	8009792 <nl_func_relu_generic_array_f32+0x7e>
 80097f4:	e7e1      	b.n	80097ba <nl_func_relu_generic_array_f32+0xa6>
 80097f6:	f842 6d04 	str.w	r6, [r2, #-4]!
 80097fa:	6888      	ldr	r0, [r1, #8]
 80097fc:	42a8      	cmp	r0, r5
 80097fe:	d9e3      	bls.n	80097c8 <nl_func_relu_generic_array_f32+0xb4>
 8009800:	e7db      	b.n	80097ba <nl_func_relu_generic_array_f32+0xa6>
 8009802:	bf00      	nop

08009804 <forward_sm>:
 8009804:	6942      	ldr	r2, [r0, #20]
 8009806:	8813      	ldrh	r3, [r2, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 8085 	beq.w	8009918 <forward_sm+0x114>
 800980e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009812:	ed2d 8b04 	vpush	{d8-d9}
 8009816:	6852      	ldr	r2, [r2, #4]
 8009818:	b085      	sub	sp, #20
 800981a:	6855      	ldr	r5, [r2, #4]
 800981c:	b105      	cbz	r5, 8009820 <forward_sm+0x1c>
 800981e:	682d      	ldr	r5, [r5, #0]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d971      	bls.n	8009908 <forward_sm+0x104>
 8009824:	6913      	ldr	r3, [r2, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d06c      	beq.n	8009904 <forward_sm+0x100>
 800982a:	681f      	ldr	r7, [r3, #0]
 800982c:	68e9      	ldr	r1, [r5, #12]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	68ab      	ldr	r3, [r5, #8]
 8009832:	6850      	ldr	r0, [r2, #4]
 8009834:	0a1b      	lsrs	r3, r3, #8
 8009836:	684a      	ldr	r2, [r1, #4]
 8009838:	9201      	str	r2, [sp, #4]
 800983a:	d06f      	beq.n	800991c <forward_sm+0x118>
 800983c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009840:	2401      	movs	r4, #1
 8009842:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009846:	4299      	cmp	r1, r3
 8009848:	fb02 f404 	mul.w	r4, r2, r4
 800984c:	d1f9      	bne.n	8009842 <forward_sm+0x3e>
 800984e:	9901      	ldr	r1, [sp, #4]
 8009850:	69ae      	ldr	r6, [r5, #24]
 8009852:	1a63      	subs	r3, r4, r1
 8009854:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8009858:	1a24      	subs	r4, r4, r0
 800985a:	68b5      	ldr	r5, [r6, #8]
 800985c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009860:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8009864:	68f3      	ldr	r3, [r6, #12]
 8009866:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800986a:	429d      	cmp	r5, r3
 800986c:	d340      	bcc.n	80098f0 <forward_sm+0xec>
 800986e:	008b      	lsls	r3, r1, #2
 8009870:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8009874:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	425b      	negs	r3, r3
 800987c:	f1c8 0200 	rsb	r2, r8, #0
 8009880:	9302      	str	r3, [sp, #8]
 8009882:	9203      	str	r2, [sp, #12]
 8009884:	9b01      	ldr	r3, [sp, #4]
 8009886:	60b5      	str	r5, [r6, #8]
 8009888:	2b01      	cmp	r3, #1
 800988a:	f8c9 4008 	str.w	r4, [r9, #8]
 800988e:	68b2      	ldr	r2, [r6, #8]
 8009890:	ed92 8a00 	vldr	s16, [r2]
 8009894:	d93b      	bls.n	800990e <forward_sm+0x10a>
 8009896:	9900      	ldr	r1, [sp, #0]
 8009898:	1d13      	adds	r3, r2, #4
 800989a:	1857      	adds	r7, r2, r1
 800989c:	ecf3 7a01 	vldmia	r3!, {s15}
 80098a0:	429f      	cmp	r7, r3
 80098a2:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 80098a6:	d1f9      	bne.n	800989c <forward_sm+0x98>
 80098a8:	4692      	mov	sl, r2
 80098aa:	46a3      	mov	fp, r4
 80098ac:	46a0      	mov	r8, r4
 80098ae:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8009924 <forward_sm+0x120>
 80098b2:	ecba 0a01 	vldmia	sl!, {s0}
 80098b6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80098ba:	f001 fa03 	bl	800acc4 <expf>
 80098be:	4557      	cmp	r7, sl
 80098c0:	eca8 0a01 	vstmia	r8!, {s0}
 80098c4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80098c8:	d1f3      	bne.n	80098b2 <forward_sm+0xae>
 80098ca:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80098ce:	9b00      	ldr	r3, [sp, #0]
 80098d0:	18e2      	adds	r2, r4, r3
 80098d2:	eddb 7a00 	vldr	s15, [fp]
 80098d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098da:	eceb 7a01 	vstmia	fp!, {s15}
 80098de:	455a      	cmp	r2, fp
 80098e0:	d1f7      	bne.n	80098d2 <forward_sm+0xce>
 80098e2:	9b02      	ldr	r3, [sp, #8]
 80098e4:	9a03      	ldr	r2, [sp, #12]
 80098e6:	441d      	add	r5, r3
 80098e8:	68f3      	ldr	r3, [r6, #12]
 80098ea:	4414      	add	r4, r2
 80098ec:	429d      	cmp	r5, r3
 80098ee:	d2c9      	bcs.n	8009884 <forward_sm+0x80>
 80098f0:	60b3      	str	r3, [r6, #8]
 80098f2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80098f6:	f8c9 3008 	str.w	r3, [r9, #8]
 80098fa:	b005      	add	sp, #20
 80098fc:	ecbd 8b04 	vpop	{d8-d9}
 8009900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	deff      	udf	#255	; 0xff
 8009908:	2300      	movs	r3, #0
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	deff      	udf	#255	; 0xff
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0e7      	beq.n	80098e2 <forward_sm+0xde>
 8009912:	9b00      	ldr	r3, [sp, #0]
 8009914:	18d7      	adds	r7, r2, r3
 8009916:	e7c7      	b.n	80098a8 <forward_sm+0xa4>
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	deff      	udf	#255	; 0xff
 800991c:	2401      	movs	r4, #1
 800991e:	4611      	mov	r1, r2
 8009920:	e796      	b.n	8009850 <forward_sm+0x4c>
 8009922:	bf00      	nop
 8009924:	00000000 	.word	0x00000000

08009928 <forward_mp>:
 8009928:	6943      	ldr	r3, [r0, #20]
 800992a:	881a      	ldrh	r2, [r3, #0]
 800992c:	2a00      	cmp	r2, #0
 800992e:	f000 80be 	beq.w	8009aae <forward_mp+0x186>
 8009932:	6859      	ldr	r1, [r3, #4]
 8009934:	684b      	ldr	r3, [r1, #4]
 8009936:	b103      	cbz	r3, 800993a <forward_mp+0x12>
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2a01      	cmp	r2, #1
 800993c:	f240 80b4 	bls.w	8009aa8 <forward_mp+0x180>
 8009940:	690a      	ldr	r2, [r1, #16]
 8009942:	2a00      	cmp	r2, #0
 8009944:	f000 80ae 	beq.w	8009aa4 <forward_mp+0x17c>
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800994e:	b093      	sub	sp, #76	; 0x4c
 8009950:	6812      	ldr	r2, [r2, #0]
 8009952:	68dc      	ldr	r4, [r3, #12]
 8009954:	68d5      	ldr	r5, [r2, #12]
 8009956:	6996      	ldr	r6, [r2, #24]
 8009958:	680a      	ldr	r2, [r1, #0]
 800995a:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800995e:	4253      	negs	r3, r2
 8009960:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009964:	68ef      	ldr	r7, [r5, #12]
 8009966:	9307      	str	r3, [sp, #28]
 8009968:	68b3      	ldr	r3, [r6, #8]
 800996a:	684e      	ldr	r6, [r1, #4]
 800996c:	9308      	str	r3, [sp, #32]
 800996e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8009972:	68ad      	ldr	r5, [r5, #8]
 8009974:	9305      	str	r3, [sp, #20]
 8009976:	970b      	str	r7, [sp, #44]	; 0x2c
 8009978:	9501      	str	r5, [sp, #4]
 800997a:	960f      	str	r6, [sp, #60]	; 0x3c
 800997c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8009980:	6984      	ldr	r4, [r0, #24]
 8009982:	930c      	str	r3, [sp, #48]	; 0x30
 8009984:	9403      	str	r4, [sp, #12]
 8009986:	69c4      	ldr	r4, [r0, #28]
 8009988:	940d      	str	r4, [sp, #52]	; 0x34
 800998a:	6a04      	ldr	r4, [r0, #32]
 800998c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800998e:	9404      	str	r4, [sp, #16]
 8009990:	900e      	str	r0, [sp, #56]	; 0x38
 8009992:	2f00      	cmp	r7, #0
 8009994:	d07f      	beq.n	8009a96 <forward_mp+0x16e>
 8009996:	188a      	adds	r2, r1, r2
 8009998:	fb09 f303 	mul.w	r3, r9, r3
 800999c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80099a0:	9209      	str	r2, [sp, #36]	; 0x24
 80099a2:	4272      	negs	r2, r6
 80099a4:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80099a8:	2300      	movs	r3, #0
 80099aa:	9211      	str	r2, [sp, #68]	; 0x44
 80099ac:	fb05 f20a 	mul.w	r2, r5, sl
 80099b0:	930a      	str	r3, [sp, #40]	; 0x28
 80099b2:	9210      	str	r2, [sp, #64]	; 0x40
 80099b4:	9a07      	ldr	r2, [sp, #28]
 80099b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80099b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80099be:	4281      	cmp	r1, r0
 80099c0:	bf94      	ite	ls
 80099c2:	1852      	addls	r2, r2, r1
 80099c4:	1812      	addhi	r2, r2, r0
 80099c6:	9306      	str	r3, [sp, #24]
 80099c8:	4694      	mov	ip, r2
 80099ca:	9a01      	ldr	r2, [sp, #4]
 80099cc:	2a00      	cmp	r2, #0
 80099ce:	d055      	beq.n	8009a7c <forward_mp+0x154>
 80099d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d2:	f04f 0800 	mov.w	r8, #0
 80099d6:	9d08      	ldr	r5, [sp, #32]
 80099d8:	fb02 f303 	mul.w	r3, r2, r3
 80099dc:	9302      	str	r3, [sp, #8]
 80099de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099e0:	eb02 0e03 	add.w	lr, r2, r3
 80099e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	db57      	blt.n	8009a9c <forward_mp+0x174>
 80099ec:	9a02      	ldr	r2, [sp, #8]
 80099ee:	18d4      	adds	r4, r2, r3
 80099f0:	461a      	mov	r2, r3
 80099f2:	9903      	ldr	r1, [sp, #12]
 80099f4:	4571      	cmp	r1, lr
 80099f6:	bf94      	ite	ls
 80099f8:	1852      	addls	r2, r2, r1
 80099fa:	4472      	addhi	r2, lr
 80099fc:	4617      	mov	r7, r2
 80099fe:	9a05      	ldr	r2, [sp, #20]
 8009a00:	1aff      	subs	r7, r7, r3
 8009a02:	fb04 240a 	mla	r4, r4, sl, r2
 8009a06:	f1b9 0f00 	cmp.w	r9, #0
 8009a0a:	d009      	beq.n	8009a20 <forward_mp+0xf8>
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	462a      	mov	r2, r5
 8009a10:	eb0a 0104 	add.w	r1, sl, r4
 8009a14:	f853 0b04 	ldr.w	r0, [r3], #4
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	f842 0b04 	str.w	r0, [r2], #4
 8009a1e:	d1f9      	bne.n	8009a14 <forward_mp+0xec>
 8009a20:	9e06      	ldr	r6, [sp, #24]
 8009a22:	45b4      	cmp	ip, r6
 8009a24:	dd1b      	ble.n	8009a5e <forward_mp+0x136>
 8009a26:	fb0a f707 	mul.w	r7, sl, r7
 8009a2a:	4648      	mov	r0, r9
 8009a2c:	19e1      	adds	r1, r4, r7
 8009a2e:	428c      	cmp	r4, r1
 8009a30:	d210      	bcs.n	8009a54 <forward_mp+0x12c>
 8009a32:	b178      	cbz	r0, 8009a54 <forward_mp+0x12c>
 8009a34:	4623      	mov	r3, r4
 8009a36:	462a      	mov	r2, r5
 8009a38:	eb03 090a 	add.w	r9, r3, sl
 8009a3c:	ecb3 7a01 	vldmia	r3!, {s14}
 8009a40:	edd2 7a00 	vldr	s15, [r2]
 8009a44:	454b      	cmp	r3, r9
 8009a46:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8009a4a:	ece2 7a01 	vstmia	r2!, {s15}
 8009a4e:	d1f5      	bne.n	8009a3c <forward_mp+0x114>
 8009a50:	428b      	cmp	r3, r1
 8009a52:	d3f0      	bcc.n	8009a36 <forward_mp+0x10e>
 8009a54:	3601      	adds	r6, #1
 8009a56:	445c      	add	r4, fp
 8009a58:	45b4      	cmp	ip, r6
 8009a5a:	d1e7      	bne.n	8009a2c <forward_mp+0x104>
 8009a5c:	4681      	mov	r9, r0
 8009a5e:	9a04      	ldr	r2, [sp, #16]
 8009a60:	f108 0801 	add.w	r8, r8, #1
 8009a64:	9b00      	ldr	r3, [sp, #0]
 8009a66:	4455      	add	r5, sl
 8009a68:	ebae 0e02 	sub.w	lr, lr, r2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	9a01      	ldr	r2, [sp, #4]
 8009a70:	4542      	cmp	r2, r8
 8009a72:	d1b8      	bne.n	80099e6 <forward_mp+0xbe>
 8009a74:	9b08      	ldr	r3, [sp, #32]
 8009a76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a78:	4413      	add	r3, r2
 8009a7a:	9308      	str	r3, [sp, #32]
 8009a7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a82:	1a89      	subs	r1, r1, r2
 8009a84:	3301      	adds	r3, #1
 8009a86:	9109      	str	r1, [sp, #36]	; 0x24
 8009a88:	9907      	ldr	r1, [sp, #28]
 8009a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a8c:	4411      	add	r1, r2
 8009a8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a90:	429a      	cmp	r2, r3
 8009a92:	9107      	str	r1, [sp, #28]
 8009a94:	d18e      	bne.n	80099b4 <forward_mp+0x8c>
 8009a96:	b013      	add	sp, #76	; 0x4c
 8009a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9c:	9c02      	ldr	r4, [sp, #8]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	9a00      	ldr	r2, [sp, #0]
 8009aa2:	e7a6      	b.n	80099f2 <forward_mp+0xca>
 8009aa4:	68d3      	ldr	r3, [r2, #12]
 8009aa6:	deff      	udf	#255	; 0xff
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	deff      	udf	#255	; 0xff
 8009aae:	6853      	ldr	r3, [r2, #4]
 8009ab0:	deff      	udf	#255	; 0xff
 8009ab2:	bf00      	nop

08009ab4 <forward_bn>:
 8009ab4:	6943      	ldr	r3, [r0, #20]
 8009ab6:	8819      	ldrh	r1, [r3, #0]
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	d061      	beq.n	8009b80 <forward_bn+0xcc>
 8009abc:	6858      	ldr	r0, [r3, #4]
 8009abe:	6843      	ldr	r3, [r0, #4]
 8009ac0:	b103      	cbz	r3, 8009ac4 <forward_bn+0x10>
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2901      	cmp	r1, #1
 8009ac6:	d958      	bls.n	8009b7a <forward_bn+0xc6>
 8009ac8:	6902      	ldr	r2, [r0, #16]
 8009aca:	b102      	cbz	r2, 8009ace <forward_bn+0x1a>
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	2902      	cmp	r1, #2
 8009ad0:	d058      	beq.n	8009b84 <forward_bn+0xd0>
 8009ad2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad6:	69c4      	ldr	r4, [r0, #28]
 8009ad8:	2c00      	cmp	r4, #0
 8009ada:	f000 8093 	beq.w	8009c04 <forward_bn+0x150>
 8009ade:	6821      	ldr	r1, [r4, #0]
 8009ae0:	f110 0f18 	cmn.w	r0, #24
 8009ae4:	d051      	beq.n	8009b8a <forward_bn+0xd6>
 8009ae6:	8b00      	ldrh	r0, [r0, #24]
 8009ae8:	2801      	cmp	r0, #1
 8009aea:	d94e      	bls.n	8009b8a <forward_bn+0xd6>
 8009aec:	2c00      	cmp	r4, #0
 8009aee:	d04c      	beq.n	8009b8a <forward_bn+0xd6>
 8009af0:	6996      	ldr	r6, [r2, #24]
 8009af2:	68d8      	ldr	r0, [r3, #12]
 8009af4:	699a      	ldr	r2, [r3, #24]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	698d      	ldr	r5, [r1, #24]
 8009afa:	0a1b      	lsrs	r3, r3, #8
 8009afc:	68b1      	ldr	r1, [r6, #8]
 8009afe:	6864      	ldr	r4, [r4, #4]
 8009b00:	68ae      	ldr	r6, [r5, #8]
 8009b02:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8009b06:	6845      	ldr	r5, [r0, #4]
 8009b08:	d074      	beq.n	8009bf4 <forward_bn+0x140>
 8009b0a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009b0e:	2701      	movs	r7, #1
 8009b10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009b14:	4298      	cmp	r0, r3
 8009b16:	fb02 f707 	mul.w	r7, r2, r7
 8009b1a:	d1f9      	bne.n	8009b10 <forward_bn+0x5c>
 8009b1c:	2c00      	cmp	r4, #0
 8009b1e:	d042      	beq.n	8009ba6 <forward_bn+0xf2>
 8009b20:	69a3      	ldr	r3, [r4, #24]
 8009b22:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8009b26:	b337      	cbz	r7, 8009b76 <forward_bn+0xc2>
 8009b28:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	ebc5 7985 	rsb	r9, r5, r5, lsl #30
 8009b32:	eba1 010e 	sub.w	r1, r1, lr
 8009b36:	eb0a 040e 	add.w	r4, sl, lr
 8009b3a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8009b3e:	eba1 0a0a 	sub.w	sl, r1, sl
 8009b42:	eb05 0c03 	add.w	ip, r5, r3
 8009b46:	459c      	cmp	ip, r3
 8009b48:	d911      	bls.n	8009b6e <forward_bn+0xba>
 8009b4a:	eb09 0304 	add.w	r3, r9, r4
 8009b4e:	4630      	mov	r0, r6
 8009b50:	4641      	mov	r1, r8
 8009b52:	eb0a 0204 	add.w	r2, sl, r4
 8009b56:	ecf3 6a01 	vldmia	r3!, {s13}
 8009b5a:	ecb0 7a01 	vldmia	r0!, {s14}
 8009b5e:	ecf1 7a01 	vldmia	r1!, {s15}
 8009b62:	42a3      	cmp	r3, r4
 8009b64:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009b68:	ece2 7a01 	vstmia	r2!, {s15}
 8009b6c:	d1f3      	bne.n	8009b56 <forward_bn+0xa2>
 8009b6e:	45bc      	cmp	ip, r7
 8009b70:	4663      	mov	r3, ip
 8009b72:	4474      	add	r4, lr
 8009b74:	d3e5      	bcc.n	8009b42 <forward_bn+0x8e>
 8009b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	deff      	udf	#255	; 0xff
 8009b80:	684b      	ldr	r3, [r1, #4]
 8009b82:	deff      	udf	#255	; 0xff
 8009b84:	2300      	movs	r3, #0
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	deff      	udf	#255	; 0xff
 8009b8a:	6995      	ldr	r5, [r2, #24]
 8009b8c:	68d8      	ldr	r0, [r3, #12]
 8009b8e:	699a      	ldr	r2, [r3, #24]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	698c      	ldr	r4, [r1, #24]
 8009b94:	0a1b      	lsrs	r3, r3, #8
 8009b96:	68a9      	ldr	r1, [r5, #8]
 8009b98:	68a6      	ldr	r6, [r4, #8]
 8009b9a:	6845      	ldr	r5, [r0, #4]
 8009b9c:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8009ba0:	d02e      	beq.n	8009c00 <forward_bn+0x14c>
 8009ba2:	2400      	movs	r4, #0
 8009ba4:	e7b1      	b.n	8009b0a <forward_bn+0x56>
 8009ba6:	2f00      	cmp	r7, #0
 8009ba8:	d0e5      	beq.n	8009b76 <forward_bn+0xc2>
 8009baa:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8009bae:	2300      	movs	r3, #0
 8009bb0:	ebc5 7e85 	rsb	lr, r5, r5, lsl #30
 8009bb4:	eba1 0108 	sub.w	r1, r1, r8
 8009bb8:	eb0a 0008 	add.w	r0, sl, r8
 8009bbc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8009bc0:	eba1 0c0a 	sub.w	ip, r1, sl
 8009bc4:	18ec      	adds	r4, r5, r3
 8009bc6:	429c      	cmp	r4, r3
 8009bc8:	d90e      	bls.n	8009be8 <forward_bn+0x134>
 8009bca:	eb0e 0300 	add.w	r3, lr, r0
 8009bce:	4631      	mov	r1, r6
 8009bd0:	eb00 020c 	add.w	r2, r0, ip
 8009bd4:	ecf3 7a01 	vldmia	r3!, {s15}
 8009bd8:	ecb1 7a01 	vldmia	r1!, {s14}
 8009bdc:	4298      	cmp	r0, r3
 8009bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009be2:	ece2 7a01 	vstmia	r2!, {s15}
 8009be6:	d1f5      	bne.n	8009bd4 <forward_bn+0x120>
 8009be8:	42bc      	cmp	r4, r7
 8009bea:	4623      	mov	r3, r4
 8009bec:	4440      	add	r0, r8
 8009bee:	d3e9      	bcc.n	8009bc4 <forward_bn+0x110>
 8009bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf4:	b124      	cbz	r4, 8009c00 <forward_bn+0x14c>
 8009bf6:	69a3      	ldr	r3, [r4, #24]
 8009bf8:	2701      	movs	r7, #1
 8009bfa:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8009bfe:	e793      	b.n	8009b28 <forward_bn+0x74>
 8009c00:	2701      	movs	r7, #1
 8009c02:	e7d2      	b.n	8009baa <forward_bn+0xf6>
 8009c04:	4621      	mov	r1, r4
 8009c06:	e76b      	b.n	8009ae0 <forward_bn+0x2c>

08009c08 <ai_check_custom_types>:
 8009c08:	4b13      	ldr	r3, [pc, #76]	; (8009c58 <ai_check_custom_types+0x50>)
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	b118      	cbz	r0, 8009c1a <ai_check_custom_types+0x12>
 8009c12:	7803      	ldrb	r3, [r0, #0]
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d002      	beq.n	8009c1e <ai_check_custom_types+0x16>
 8009c18:	2000      	movs	r0, #0
 8009c1a:	b002      	add	sp, #8
 8009c1c:	4770      	bx	lr
 8009c1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d004      	beq.n	8009c30 <ai_check_custom_types+0x28>
 8009c26:	2001      	movs	r0, #1
 8009c28:	f080 0001 	eor.w	r0, r0, #1
 8009c2c:	b002      	add	sp, #8
 8009c2e:	4770      	bx	lr
 8009c30:	7842      	ldrb	r2, [r0, #1]
 8009c32:	3001      	adds	r0, #1
 8009c34:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d1f4      	bne.n	8009c26 <ai_check_custom_types+0x1e>
 8009c3c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009c40:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d1ee      	bne.n	8009c26 <ai_check_custom_types+0x1e>
 8009c48:	7842      	ldrb	r2, [r0, #1]
 8009c4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d1e9      	bne.n	8009c26 <ai_check_custom_types+0x1e>
 8009c52:	2000      	movs	r0, #0
 8009c54:	e7e8      	b.n	8009c28 <ai_check_custom_types+0x20>
 8009c56:	bf00      	nop
 8009c58:	0800b594 	.word	0x0800b594

08009c5c <ai_layers_forward_all>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8009c60:	4604      	mov	r4, r0
 8009c62:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8009c64:	b316      	cbz	r6, 8009cac <ai_layers_forward_all+0x50>
 8009c66:	b1c5      	cbz	r5, 8009c9a <ai_layers_forward_all+0x3e>
 8009c68:	6545      	str	r5, [r0, #84]	; 0x54
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009c6e:	2001      	movs	r0, #1
 8009c70:	47b0      	blx	r6
 8009c72:	2700      	movs	r7, #0
 8009c74:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009c76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009c78:	2002      	movs	r0, #2
 8009c7a:	47b0      	blx	r6
 8009c7c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8009c7e:	692b      	ldr	r3, [r5, #16]
 8009c80:	4628      	mov	r0, r5
 8009c82:	4798      	blx	r3
 8009c84:	68eb      	ldr	r3, [r5, #12]
 8009c86:	2003      	movs	r0, #3
 8009c88:	429d      	cmp	r5, r3
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	d006      	beq.n	8009c9c <ai_layers_forward_all+0x40>
 8009c8e:	6563      	str	r3, [r4, #84]	; 0x54
 8009c90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009c92:	47b0      	blx	r6
 8009c94:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009c96:	2900      	cmp	r1, #0
 8009c98:	d1ed      	bne.n	8009c76 <ai_layers_forward_all+0x1a>
 8009c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	6567      	str	r7, [r4, #84]	; 0x54
 8009ca0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009ca2:	47b0      	blx	r6
 8009ca4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009ca6:	2900      	cmp	r1, #0
 8009ca8:	d1e5      	bne.n	8009c76 <ai_layers_forward_all+0x1a>
 8009caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cac:	2d00      	cmp	r5, #0
 8009cae:	d0f4      	beq.n	8009c9a <ai_layers_forward_all+0x3e>
 8009cb0:	6545      	str	r5, [r0, #84]	; 0x54
 8009cb2:	692b      	ldr	r3, [r5, #16]
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	4798      	blx	r3
 8009cb8:	68eb      	ldr	r3, [r5, #12]
 8009cba:	42ab      	cmp	r3, r5
 8009cbc:	461d      	mov	r5, r3
 8009cbe:	d003      	beq.n	8009cc8 <ai_layers_forward_all+0x6c>
 8009cc0:	6563      	str	r3, [r4, #84]	; 0x54
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1f5      	bne.n	8009cb2 <ai_layers_forward_all+0x56>
 8009cc6:	e7e8      	b.n	8009c9a <ai_layers_forward_all+0x3e>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	6563      	str	r3, [r4, #84]	; 0x54
 8009ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cce:	bf00      	nop

08009cd0 <ai_array_to_buffer_fmt>:
 8009cd0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d01f      	beq.n	8009d18 <ai_array_to_buffer_fmt+0x48>
 8009cd8:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8009cdc:	4a1b      	ldr	r2, [pc, #108]	; (8009d4c <ai_array_to_buffer_fmt+0x7c>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d00a      	beq.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009ce2:	dc0d      	bgt.n	8009d00 <ai_array_to_buffer_fmt+0x30>
 8009ce4:	4a1a      	ldr	r2, [pc, #104]	; (8009d50 <ai_array_to_buffer_fmt+0x80>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d006      	beq.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009cea:	dd1d      	ble.n	8009d28 <ai_array_to_buffer_fmt+0x58>
 8009cec:	4a19      	ldr	r2, [pc, #100]	; (8009d54 <ai_array_to_buffer_fmt+0x84>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d002      	beq.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009cf2:	320f      	adds	r2, #15
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d10d      	bne.n	8009d14 <ai_array_to_buffer_fmt+0x44>
 8009cf8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009cfc:	4318      	orrs	r0, r3
 8009cfe:	4770      	bx	lr
 8009d00:	4a15      	ldr	r2, [pc, #84]	; (8009d58 <ai_array_to_buffer_fmt+0x88>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d0f8      	beq.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009d06:	dd18      	ble.n	8009d3a <ai_array_to_buffer_fmt+0x6a>
 8009d08:	4a14      	ldr	r2, [pc, #80]	; (8009d5c <ai_array_to_buffer_fmt+0x8c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d0f4      	beq.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009d0e:	4a14      	ldr	r2, [pc, #80]	; (8009d60 <ai_array_to_buffer_fmt+0x90>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d0f1      	beq.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009d14:	2340      	movs	r3, #64	; 0x40
 8009d16:	e7ef      	b.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009d18:	4b12      	ldr	r3, [pc, #72]	; (8009d64 <ai_array_to_buffer_fmt+0x94>)
 8009d1a:	4003      	ands	r3, r0
 8009d1c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d24:	4318      	orrs	r0, r3
 8009d26:	4770      	bx	lr
 8009d28:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d0e3      	beq.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009d30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d0df      	beq.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009d38:	e7ec      	b.n	8009d14 <ai_array_to_buffer_fmt+0x44>
 8009d3a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d0da      	beq.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009d42:	3207      	adds	r2, #7
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d0d7      	beq.n	8009cf8 <ai_array_to_buffer_fmt+0x28>
 8009d48:	e7e4      	b.n	8009d14 <ai_array_to_buffer_fmt+0x44>
 8009d4a:	bf00      	nop
 8009d4c:	00840040 	.word	0x00840040
 8009d50:	00040447 	.word	0x00040447
 8009d54:	00040840 	.word	0x00040840
 8009d58:	00840840 	.word	0x00840840
 8009d5c:	0084084f 	.word	0x0084084f
 8009d60:	01821040 	.word	0x01821040
 8009d64:	00803fff 	.word	0x00803fff

08009d68 <ai_array_get_byte_size>:
 8009d68:	b1e1      	cbz	r1, 8009da4 <ai_array_get_byte_size+0x3c>
 8009d6a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009d6e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009d72:	b410      	push	{r4}
 8009d74:	f3c0 3482 	ubfx	r4, r0, #14, #3
 8009d78:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8009d7c:	4423      	add	r3, r4
 8009d7e:	2804      	cmp	r0, #4
 8009d80:	fb01 f103 	mul.w	r1, r1, r3
 8009d84:	f101 0107 	add.w	r1, r1, #7
 8009d88:	f021 0107 	bic.w	r1, r1, #7
 8009d8c:	fa21 f102 	lsr.w	r1, r1, r2
 8009d90:	d00a      	beq.n	8009da8 <ai_array_get_byte_size+0x40>
 8009d92:	2808      	cmp	r0, #8
 8009d94:	d101      	bne.n	8009d9a <ai_array_get_byte_size+0x32>
 8009d96:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009d9a:	3107      	adds	r1, #7
 8009d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da0:	08c8      	lsrs	r0, r1, #3
 8009da2:	4770      	bx	lr
 8009da4:	4608      	mov	r0, r1
 8009da6:	4770      	bx	lr
 8009da8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009db0:	3107      	adds	r1, #7
 8009db2:	08c8      	lsrs	r0, r1, #3
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop

08009db8 <__errno>:
 8009db8:	4b01      	ldr	r3, [pc, #4]	; (8009dc0 <__errno+0x8>)
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20000ecc 	.word	0x20000ecc

08009dc4 <__libc_init_array>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4e0d      	ldr	r6, [pc, #52]	; (8009dfc <__libc_init_array+0x38>)
 8009dc8:	4c0d      	ldr	r4, [pc, #52]	; (8009e00 <__libc_init_array+0x3c>)
 8009dca:	1ba4      	subs	r4, r4, r6
 8009dcc:	10a4      	asrs	r4, r4, #2
 8009dce:	2500      	movs	r5, #0
 8009dd0:	42a5      	cmp	r5, r4
 8009dd2:	d109      	bne.n	8009de8 <__libc_init_array+0x24>
 8009dd4:	4e0b      	ldr	r6, [pc, #44]	; (8009e04 <__libc_init_array+0x40>)
 8009dd6:	4c0c      	ldr	r4, [pc, #48]	; (8009e08 <__libc_init_array+0x44>)
 8009dd8:	f001 fae4 	bl	800b3a4 <_init>
 8009ddc:	1ba4      	subs	r4, r4, r6
 8009dde:	10a4      	asrs	r4, r4, #2
 8009de0:	2500      	movs	r5, #0
 8009de2:	42a5      	cmp	r5, r4
 8009de4:	d105      	bne.n	8009df2 <__libc_init_array+0x2e>
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009dec:	4798      	blx	r3
 8009dee:	3501      	adds	r5, #1
 8009df0:	e7ee      	b.n	8009dd0 <__libc_init_array+0xc>
 8009df2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009df6:	4798      	blx	r3
 8009df8:	3501      	adds	r5, #1
 8009dfa:	e7f2      	b.n	8009de2 <__libc_init_array+0x1e>
 8009dfc:	0803121c 	.word	0x0803121c
 8009e00:	0803121c 	.word	0x0803121c
 8009e04:	0803121c 	.word	0x0803121c
 8009e08:	08031220 	.word	0x08031220

08009e0c <memcpy>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	1e43      	subs	r3, r0, #1
 8009e10:	440a      	add	r2, r1
 8009e12:	4291      	cmp	r1, r2
 8009e14:	d100      	bne.n	8009e18 <memcpy+0xc>
 8009e16:	bd10      	pop	{r4, pc}
 8009e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e20:	e7f7      	b.n	8009e12 <memcpy+0x6>

08009e22 <memset>:
 8009e22:	4402      	add	r2, r0
 8009e24:	4603      	mov	r3, r0
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d100      	bne.n	8009e2c <memset+0xa>
 8009e2a:	4770      	bx	lr
 8009e2c:	f803 1b01 	strb.w	r1, [r3], #1
 8009e30:	e7f9      	b.n	8009e26 <memset+0x4>
	...

08009e34 <_free_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4605      	mov	r5, r0
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	d045      	beq.n	8009ec8 <_free_r+0x94>
 8009e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e40:	1f0c      	subs	r4, r1, #4
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	bfb8      	it	lt
 8009e46:	18e4      	addlt	r4, r4, r3
 8009e48:	f000 fbc6 	bl	800a5d8 <__malloc_lock>
 8009e4c:	4a1f      	ldr	r2, [pc, #124]	; (8009ecc <_free_r+0x98>)
 8009e4e:	6813      	ldr	r3, [r2, #0]
 8009e50:	4610      	mov	r0, r2
 8009e52:	b933      	cbnz	r3, 8009e62 <_free_r+0x2e>
 8009e54:	6063      	str	r3, [r4, #4]
 8009e56:	6014      	str	r4, [r2, #0]
 8009e58:	4628      	mov	r0, r5
 8009e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e5e:	f000 bbbc 	b.w	800a5da <__malloc_unlock>
 8009e62:	42a3      	cmp	r3, r4
 8009e64:	d90c      	bls.n	8009e80 <_free_r+0x4c>
 8009e66:	6821      	ldr	r1, [r4, #0]
 8009e68:	1862      	adds	r2, r4, r1
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	bf04      	itt	eq
 8009e6e:	681a      	ldreq	r2, [r3, #0]
 8009e70:	685b      	ldreq	r3, [r3, #4]
 8009e72:	6063      	str	r3, [r4, #4]
 8009e74:	bf04      	itt	eq
 8009e76:	1852      	addeq	r2, r2, r1
 8009e78:	6022      	streq	r2, [r4, #0]
 8009e7a:	6004      	str	r4, [r0, #0]
 8009e7c:	e7ec      	b.n	8009e58 <_free_r+0x24>
 8009e7e:	4613      	mov	r3, r2
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	b10a      	cbz	r2, 8009e88 <_free_r+0x54>
 8009e84:	42a2      	cmp	r2, r4
 8009e86:	d9fa      	bls.n	8009e7e <_free_r+0x4a>
 8009e88:	6819      	ldr	r1, [r3, #0]
 8009e8a:	1858      	adds	r0, r3, r1
 8009e8c:	42a0      	cmp	r0, r4
 8009e8e:	d10b      	bne.n	8009ea8 <_free_r+0x74>
 8009e90:	6820      	ldr	r0, [r4, #0]
 8009e92:	4401      	add	r1, r0
 8009e94:	1858      	adds	r0, r3, r1
 8009e96:	4282      	cmp	r2, r0
 8009e98:	6019      	str	r1, [r3, #0]
 8009e9a:	d1dd      	bne.n	8009e58 <_free_r+0x24>
 8009e9c:	6810      	ldr	r0, [r2, #0]
 8009e9e:	6852      	ldr	r2, [r2, #4]
 8009ea0:	605a      	str	r2, [r3, #4]
 8009ea2:	4401      	add	r1, r0
 8009ea4:	6019      	str	r1, [r3, #0]
 8009ea6:	e7d7      	b.n	8009e58 <_free_r+0x24>
 8009ea8:	d902      	bls.n	8009eb0 <_free_r+0x7c>
 8009eaa:	230c      	movs	r3, #12
 8009eac:	602b      	str	r3, [r5, #0]
 8009eae:	e7d3      	b.n	8009e58 <_free_r+0x24>
 8009eb0:	6820      	ldr	r0, [r4, #0]
 8009eb2:	1821      	adds	r1, r4, r0
 8009eb4:	428a      	cmp	r2, r1
 8009eb6:	bf04      	itt	eq
 8009eb8:	6811      	ldreq	r1, [r2, #0]
 8009eba:	6852      	ldreq	r2, [r2, #4]
 8009ebc:	6062      	str	r2, [r4, #4]
 8009ebe:	bf04      	itt	eq
 8009ec0:	1809      	addeq	r1, r1, r0
 8009ec2:	6021      	streq	r1, [r4, #0]
 8009ec4:	605c      	str	r4, [r3, #4]
 8009ec6:	e7c7      	b.n	8009e58 <_free_r+0x24>
 8009ec8:	bd38      	pop	{r3, r4, r5, pc}
 8009eca:	bf00      	nop
 8009ecc:	2000fa04 	.word	0x2000fa04

08009ed0 <_malloc_r>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	1ccd      	adds	r5, r1, #3
 8009ed4:	f025 0503 	bic.w	r5, r5, #3
 8009ed8:	3508      	adds	r5, #8
 8009eda:	2d0c      	cmp	r5, #12
 8009edc:	bf38      	it	cc
 8009ede:	250c      	movcc	r5, #12
 8009ee0:	2d00      	cmp	r5, #0
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	db01      	blt.n	8009eea <_malloc_r+0x1a>
 8009ee6:	42a9      	cmp	r1, r5
 8009ee8:	d903      	bls.n	8009ef2 <_malloc_r+0x22>
 8009eea:	230c      	movs	r3, #12
 8009eec:	6033      	str	r3, [r6, #0]
 8009eee:	2000      	movs	r0, #0
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
 8009ef2:	f000 fb71 	bl	800a5d8 <__malloc_lock>
 8009ef6:	4a21      	ldr	r2, [pc, #132]	; (8009f7c <_malloc_r+0xac>)
 8009ef8:	6814      	ldr	r4, [r2, #0]
 8009efa:	4621      	mov	r1, r4
 8009efc:	b991      	cbnz	r1, 8009f24 <_malloc_r+0x54>
 8009efe:	4c20      	ldr	r4, [pc, #128]	; (8009f80 <_malloc_r+0xb0>)
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	b91b      	cbnz	r3, 8009f0c <_malloc_r+0x3c>
 8009f04:	4630      	mov	r0, r6
 8009f06:	f000 f8b9 	bl	800a07c <_sbrk_r>
 8009f0a:	6020      	str	r0, [r4, #0]
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f000 f8b4 	bl	800a07c <_sbrk_r>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d124      	bne.n	8009f62 <_malloc_r+0x92>
 8009f18:	230c      	movs	r3, #12
 8009f1a:	6033      	str	r3, [r6, #0]
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f000 fb5c 	bl	800a5da <__malloc_unlock>
 8009f22:	e7e4      	b.n	8009eee <_malloc_r+0x1e>
 8009f24:	680b      	ldr	r3, [r1, #0]
 8009f26:	1b5b      	subs	r3, r3, r5
 8009f28:	d418      	bmi.n	8009f5c <_malloc_r+0x8c>
 8009f2a:	2b0b      	cmp	r3, #11
 8009f2c:	d90f      	bls.n	8009f4e <_malloc_r+0x7e>
 8009f2e:	600b      	str	r3, [r1, #0]
 8009f30:	50cd      	str	r5, [r1, r3]
 8009f32:	18cc      	adds	r4, r1, r3
 8009f34:	4630      	mov	r0, r6
 8009f36:	f000 fb50 	bl	800a5da <__malloc_unlock>
 8009f3a:	f104 000b 	add.w	r0, r4, #11
 8009f3e:	1d23      	adds	r3, r4, #4
 8009f40:	f020 0007 	bic.w	r0, r0, #7
 8009f44:	1ac3      	subs	r3, r0, r3
 8009f46:	d0d3      	beq.n	8009ef0 <_malloc_r+0x20>
 8009f48:	425a      	negs	r2, r3
 8009f4a:	50e2      	str	r2, [r4, r3]
 8009f4c:	e7d0      	b.n	8009ef0 <_malloc_r+0x20>
 8009f4e:	428c      	cmp	r4, r1
 8009f50:	684b      	ldr	r3, [r1, #4]
 8009f52:	bf16      	itet	ne
 8009f54:	6063      	strne	r3, [r4, #4]
 8009f56:	6013      	streq	r3, [r2, #0]
 8009f58:	460c      	movne	r4, r1
 8009f5a:	e7eb      	b.n	8009f34 <_malloc_r+0x64>
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	6849      	ldr	r1, [r1, #4]
 8009f60:	e7cc      	b.n	8009efc <_malloc_r+0x2c>
 8009f62:	1cc4      	adds	r4, r0, #3
 8009f64:	f024 0403 	bic.w	r4, r4, #3
 8009f68:	42a0      	cmp	r0, r4
 8009f6a:	d005      	beq.n	8009f78 <_malloc_r+0xa8>
 8009f6c:	1a21      	subs	r1, r4, r0
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f000 f884 	bl	800a07c <_sbrk_r>
 8009f74:	3001      	adds	r0, #1
 8009f76:	d0cf      	beq.n	8009f18 <_malloc_r+0x48>
 8009f78:	6025      	str	r5, [r4, #0]
 8009f7a:	e7db      	b.n	8009f34 <_malloc_r+0x64>
 8009f7c:	2000fa04 	.word	0x2000fa04
 8009f80:	2000fa08 	.word	0x2000fa08

08009f84 <iprintf>:
 8009f84:	b40f      	push	{r0, r1, r2, r3}
 8009f86:	4b0a      	ldr	r3, [pc, #40]	; (8009fb0 <iprintf+0x2c>)
 8009f88:	b513      	push	{r0, r1, r4, lr}
 8009f8a:	681c      	ldr	r4, [r3, #0]
 8009f8c:	b124      	cbz	r4, 8009f98 <iprintf+0x14>
 8009f8e:	69a3      	ldr	r3, [r4, #24]
 8009f90:	b913      	cbnz	r3, 8009f98 <iprintf+0x14>
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 fa32 	bl	800a3fc <__sinit>
 8009f98:	ab05      	add	r3, sp, #20
 8009f9a:	9a04      	ldr	r2, [sp, #16]
 8009f9c:	68a1      	ldr	r1, [r4, #8]
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 fb45 	bl	800a630 <_vfiprintf_r>
 8009fa6:	b002      	add	sp, #8
 8009fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fac:	b004      	add	sp, #16
 8009fae:	4770      	bx	lr
 8009fb0:	20000ecc 	.word	0x20000ecc

08009fb4 <_puts_r>:
 8009fb4:	b570      	push	{r4, r5, r6, lr}
 8009fb6:	460e      	mov	r6, r1
 8009fb8:	4605      	mov	r5, r0
 8009fba:	b118      	cbz	r0, 8009fc4 <_puts_r+0x10>
 8009fbc:	6983      	ldr	r3, [r0, #24]
 8009fbe:	b90b      	cbnz	r3, 8009fc4 <_puts_r+0x10>
 8009fc0:	f000 fa1c 	bl	800a3fc <__sinit>
 8009fc4:	69ab      	ldr	r3, [r5, #24]
 8009fc6:	68ac      	ldr	r4, [r5, #8]
 8009fc8:	b913      	cbnz	r3, 8009fd0 <_puts_r+0x1c>
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 fa16 	bl	800a3fc <__sinit>
 8009fd0:	4b23      	ldr	r3, [pc, #140]	; (800a060 <_puts_r+0xac>)
 8009fd2:	429c      	cmp	r4, r3
 8009fd4:	d117      	bne.n	800a006 <_puts_r+0x52>
 8009fd6:	686c      	ldr	r4, [r5, #4]
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	071b      	lsls	r3, r3, #28
 8009fdc:	d51d      	bpl.n	800a01a <_puts_r+0x66>
 8009fde:	6923      	ldr	r3, [r4, #16]
 8009fe0:	b1db      	cbz	r3, 800a01a <_puts_r+0x66>
 8009fe2:	3e01      	subs	r6, #1
 8009fe4:	68a3      	ldr	r3, [r4, #8]
 8009fe6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009fea:	3b01      	subs	r3, #1
 8009fec:	60a3      	str	r3, [r4, #8]
 8009fee:	b9e9      	cbnz	r1, 800a02c <_puts_r+0x78>
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	da2e      	bge.n	800a052 <_puts_r+0x9e>
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	210a      	movs	r1, #10
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 f84f 	bl	800a09c <__swbuf_r>
 8009ffe:	3001      	adds	r0, #1
 800a000:	d011      	beq.n	800a026 <_puts_r+0x72>
 800a002:	200a      	movs	r0, #10
 800a004:	e011      	b.n	800a02a <_puts_r+0x76>
 800a006:	4b17      	ldr	r3, [pc, #92]	; (800a064 <_puts_r+0xb0>)
 800a008:	429c      	cmp	r4, r3
 800a00a:	d101      	bne.n	800a010 <_puts_r+0x5c>
 800a00c:	68ac      	ldr	r4, [r5, #8]
 800a00e:	e7e3      	b.n	8009fd8 <_puts_r+0x24>
 800a010:	4b15      	ldr	r3, [pc, #84]	; (800a068 <_puts_r+0xb4>)
 800a012:	429c      	cmp	r4, r3
 800a014:	bf08      	it	eq
 800a016:	68ec      	ldreq	r4, [r5, #12]
 800a018:	e7de      	b.n	8009fd8 <_puts_r+0x24>
 800a01a:	4621      	mov	r1, r4
 800a01c:	4628      	mov	r0, r5
 800a01e:	f000 f88f 	bl	800a140 <__swsetup_r>
 800a022:	2800      	cmp	r0, #0
 800a024:	d0dd      	beq.n	8009fe2 <_puts_r+0x2e>
 800a026:	f04f 30ff 	mov.w	r0, #4294967295
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	da04      	bge.n	800a03a <_puts_r+0x86>
 800a030:	69a2      	ldr	r2, [r4, #24]
 800a032:	429a      	cmp	r2, r3
 800a034:	dc06      	bgt.n	800a044 <_puts_r+0x90>
 800a036:	290a      	cmp	r1, #10
 800a038:	d004      	beq.n	800a044 <_puts_r+0x90>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	6022      	str	r2, [r4, #0]
 800a040:	7019      	strb	r1, [r3, #0]
 800a042:	e7cf      	b.n	8009fe4 <_puts_r+0x30>
 800a044:	4622      	mov	r2, r4
 800a046:	4628      	mov	r0, r5
 800a048:	f000 f828 	bl	800a09c <__swbuf_r>
 800a04c:	3001      	adds	r0, #1
 800a04e:	d1c9      	bne.n	8009fe4 <_puts_r+0x30>
 800a050:	e7e9      	b.n	800a026 <_puts_r+0x72>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	200a      	movs	r0, #10
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	6022      	str	r2, [r4, #0]
 800a05a:	7018      	strb	r0, [r3, #0]
 800a05c:	e7e5      	b.n	800a02a <_puts_r+0x76>
 800a05e:	bf00      	nop
 800a060:	08031174 	.word	0x08031174
 800a064:	08031194 	.word	0x08031194
 800a068:	08031154 	.word	0x08031154

0800a06c <puts>:
 800a06c:	4b02      	ldr	r3, [pc, #8]	; (800a078 <puts+0xc>)
 800a06e:	4601      	mov	r1, r0
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	f7ff bf9f 	b.w	8009fb4 <_puts_r>
 800a076:	bf00      	nop
 800a078:	20000ecc 	.word	0x20000ecc

0800a07c <_sbrk_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4c06      	ldr	r4, [pc, #24]	; (800a098 <_sbrk_r+0x1c>)
 800a080:	2300      	movs	r3, #0
 800a082:	4605      	mov	r5, r0
 800a084:	4608      	mov	r0, r1
 800a086:	6023      	str	r3, [r4, #0]
 800a088:	f7f8 f8c0 	bl	800220c <_sbrk>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_sbrk_r+0x1a>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	b103      	cbz	r3, 800a096 <_sbrk_r+0x1a>
 800a094:	602b      	str	r3, [r5, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	20022364 	.word	0x20022364

0800a09c <__swbuf_r>:
 800a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09e:	460e      	mov	r6, r1
 800a0a0:	4614      	mov	r4, r2
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	b118      	cbz	r0, 800a0ae <__swbuf_r+0x12>
 800a0a6:	6983      	ldr	r3, [r0, #24]
 800a0a8:	b90b      	cbnz	r3, 800a0ae <__swbuf_r+0x12>
 800a0aa:	f000 f9a7 	bl	800a3fc <__sinit>
 800a0ae:	4b21      	ldr	r3, [pc, #132]	; (800a134 <__swbuf_r+0x98>)
 800a0b0:	429c      	cmp	r4, r3
 800a0b2:	d12a      	bne.n	800a10a <__swbuf_r+0x6e>
 800a0b4:	686c      	ldr	r4, [r5, #4]
 800a0b6:	69a3      	ldr	r3, [r4, #24]
 800a0b8:	60a3      	str	r3, [r4, #8]
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	071a      	lsls	r2, r3, #28
 800a0be:	d52e      	bpl.n	800a11e <__swbuf_r+0x82>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	b363      	cbz	r3, 800a11e <__swbuf_r+0x82>
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	6820      	ldr	r0, [r4, #0]
 800a0c8:	1ac0      	subs	r0, r0, r3
 800a0ca:	6963      	ldr	r3, [r4, #20]
 800a0cc:	b2f6      	uxtb	r6, r6
 800a0ce:	4283      	cmp	r3, r0
 800a0d0:	4637      	mov	r7, r6
 800a0d2:	dc04      	bgt.n	800a0de <__swbuf_r+0x42>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 f926 	bl	800a328 <_fflush_r>
 800a0dc:	bb28      	cbnz	r0, 800a12a <__swbuf_r+0x8e>
 800a0de:	68a3      	ldr	r3, [r4, #8]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	60a3      	str	r3, [r4, #8]
 800a0e4:	6823      	ldr	r3, [r4, #0]
 800a0e6:	1c5a      	adds	r2, r3, #1
 800a0e8:	6022      	str	r2, [r4, #0]
 800a0ea:	701e      	strb	r6, [r3, #0]
 800a0ec:	6963      	ldr	r3, [r4, #20]
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	4283      	cmp	r3, r0
 800a0f2:	d004      	beq.n	800a0fe <__swbuf_r+0x62>
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	07db      	lsls	r3, r3, #31
 800a0f8:	d519      	bpl.n	800a12e <__swbuf_r+0x92>
 800a0fa:	2e0a      	cmp	r6, #10
 800a0fc:	d117      	bne.n	800a12e <__swbuf_r+0x92>
 800a0fe:	4621      	mov	r1, r4
 800a100:	4628      	mov	r0, r5
 800a102:	f000 f911 	bl	800a328 <_fflush_r>
 800a106:	b190      	cbz	r0, 800a12e <__swbuf_r+0x92>
 800a108:	e00f      	b.n	800a12a <__swbuf_r+0x8e>
 800a10a:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <__swbuf_r+0x9c>)
 800a10c:	429c      	cmp	r4, r3
 800a10e:	d101      	bne.n	800a114 <__swbuf_r+0x78>
 800a110:	68ac      	ldr	r4, [r5, #8]
 800a112:	e7d0      	b.n	800a0b6 <__swbuf_r+0x1a>
 800a114:	4b09      	ldr	r3, [pc, #36]	; (800a13c <__swbuf_r+0xa0>)
 800a116:	429c      	cmp	r4, r3
 800a118:	bf08      	it	eq
 800a11a:	68ec      	ldreq	r4, [r5, #12]
 800a11c:	e7cb      	b.n	800a0b6 <__swbuf_r+0x1a>
 800a11e:	4621      	mov	r1, r4
 800a120:	4628      	mov	r0, r5
 800a122:	f000 f80d 	bl	800a140 <__swsetup_r>
 800a126:	2800      	cmp	r0, #0
 800a128:	d0cc      	beq.n	800a0c4 <__swbuf_r+0x28>
 800a12a:	f04f 37ff 	mov.w	r7, #4294967295
 800a12e:	4638      	mov	r0, r7
 800a130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a132:	bf00      	nop
 800a134:	08031174 	.word	0x08031174
 800a138:	08031194 	.word	0x08031194
 800a13c:	08031154 	.word	0x08031154

0800a140 <__swsetup_r>:
 800a140:	4b32      	ldr	r3, [pc, #200]	; (800a20c <__swsetup_r+0xcc>)
 800a142:	b570      	push	{r4, r5, r6, lr}
 800a144:	681d      	ldr	r5, [r3, #0]
 800a146:	4606      	mov	r6, r0
 800a148:	460c      	mov	r4, r1
 800a14a:	b125      	cbz	r5, 800a156 <__swsetup_r+0x16>
 800a14c:	69ab      	ldr	r3, [r5, #24]
 800a14e:	b913      	cbnz	r3, 800a156 <__swsetup_r+0x16>
 800a150:	4628      	mov	r0, r5
 800a152:	f000 f953 	bl	800a3fc <__sinit>
 800a156:	4b2e      	ldr	r3, [pc, #184]	; (800a210 <__swsetup_r+0xd0>)
 800a158:	429c      	cmp	r4, r3
 800a15a:	d10f      	bne.n	800a17c <__swsetup_r+0x3c>
 800a15c:	686c      	ldr	r4, [r5, #4]
 800a15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a162:	b29a      	uxth	r2, r3
 800a164:	0715      	lsls	r5, r2, #28
 800a166:	d42c      	bmi.n	800a1c2 <__swsetup_r+0x82>
 800a168:	06d0      	lsls	r0, r2, #27
 800a16a:	d411      	bmi.n	800a190 <__swsetup_r+0x50>
 800a16c:	2209      	movs	r2, #9
 800a16e:	6032      	str	r2, [r6, #0]
 800a170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a174:	81a3      	strh	r3, [r4, #12]
 800a176:	f04f 30ff 	mov.w	r0, #4294967295
 800a17a:	e03e      	b.n	800a1fa <__swsetup_r+0xba>
 800a17c:	4b25      	ldr	r3, [pc, #148]	; (800a214 <__swsetup_r+0xd4>)
 800a17e:	429c      	cmp	r4, r3
 800a180:	d101      	bne.n	800a186 <__swsetup_r+0x46>
 800a182:	68ac      	ldr	r4, [r5, #8]
 800a184:	e7eb      	b.n	800a15e <__swsetup_r+0x1e>
 800a186:	4b24      	ldr	r3, [pc, #144]	; (800a218 <__swsetup_r+0xd8>)
 800a188:	429c      	cmp	r4, r3
 800a18a:	bf08      	it	eq
 800a18c:	68ec      	ldreq	r4, [r5, #12]
 800a18e:	e7e6      	b.n	800a15e <__swsetup_r+0x1e>
 800a190:	0751      	lsls	r1, r2, #29
 800a192:	d512      	bpl.n	800a1ba <__swsetup_r+0x7a>
 800a194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a196:	b141      	cbz	r1, 800a1aa <__swsetup_r+0x6a>
 800a198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a19c:	4299      	cmp	r1, r3
 800a19e:	d002      	beq.n	800a1a6 <__swsetup_r+0x66>
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f7ff fe47 	bl	8009e34 <_free_r>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6363      	str	r3, [r4, #52]	; 0x34
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6063      	str	r3, [r4, #4]
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	f043 0308 	orr.w	r3, r3, #8
 800a1c0:	81a3      	strh	r3, [r4, #12]
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	b94b      	cbnz	r3, 800a1da <__swsetup_r+0x9a>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d0:	d003      	beq.n	800a1da <__swsetup_r+0x9a>
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f000 f9bf 	bl	800a558 <__smakebuf_r>
 800a1da:	89a2      	ldrh	r2, [r4, #12]
 800a1dc:	f012 0301 	ands.w	r3, r2, #1
 800a1e0:	d00c      	beq.n	800a1fc <__swsetup_r+0xbc>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	60a3      	str	r3, [r4, #8]
 800a1e6:	6963      	ldr	r3, [r4, #20]
 800a1e8:	425b      	negs	r3, r3
 800a1ea:	61a3      	str	r3, [r4, #24]
 800a1ec:	6923      	ldr	r3, [r4, #16]
 800a1ee:	b953      	cbnz	r3, 800a206 <__swsetup_r+0xc6>
 800a1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a1f8:	d1ba      	bne.n	800a170 <__swsetup_r+0x30>
 800a1fa:	bd70      	pop	{r4, r5, r6, pc}
 800a1fc:	0792      	lsls	r2, r2, #30
 800a1fe:	bf58      	it	pl
 800a200:	6963      	ldrpl	r3, [r4, #20]
 800a202:	60a3      	str	r3, [r4, #8]
 800a204:	e7f2      	b.n	800a1ec <__swsetup_r+0xac>
 800a206:	2000      	movs	r0, #0
 800a208:	e7f7      	b.n	800a1fa <__swsetup_r+0xba>
 800a20a:	bf00      	nop
 800a20c:	20000ecc 	.word	0x20000ecc
 800a210:	08031174 	.word	0x08031174
 800a214:	08031194 	.word	0x08031194
 800a218:	08031154 	.word	0x08031154

0800a21c <__sflush_r>:
 800a21c:	898a      	ldrh	r2, [r1, #12]
 800a21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a222:	4605      	mov	r5, r0
 800a224:	0710      	lsls	r0, r2, #28
 800a226:	460c      	mov	r4, r1
 800a228:	d458      	bmi.n	800a2dc <__sflush_r+0xc0>
 800a22a:	684b      	ldr	r3, [r1, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	dc05      	bgt.n	800a23c <__sflush_r+0x20>
 800a230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a232:	2b00      	cmp	r3, #0
 800a234:	dc02      	bgt.n	800a23c <__sflush_r+0x20>
 800a236:	2000      	movs	r0, #0
 800a238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a23c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a23e:	2e00      	cmp	r6, #0
 800a240:	d0f9      	beq.n	800a236 <__sflush_r+0x1a>
 800a242:	2300      	movs	r3, #0
 800a244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a248:	682f      	ldr	r7, [r5, #0]
 800a24a:	6a21      	ldr	r1, [r4, #32]
 800a24c:	602b      	str	r3, [r5, #0]
 800a24e:	d032      	beq.n	800a2b6 <__sflush_r+0x9a>
 800a250:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	075a      	lsls	r2, r3, #29
 800a256:	d505      	bpl.n	800a264 <__sflush_r+0x48>
 800a258:	6863      	ldr	r3, [r4, #4]
 800a25a:	1ac0      	subs	r0, r0, r3
 800a25c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a25e:	b10b      	cbz	r3, 800a264 <__sflush_r+0x48>
 800a260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a262:	1ac0      	subs	r0, r0, r3
 800a264:	2300      	movs	r3, #0
 800a266:	4602      	mov	r2, r0
 800a268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a26a:	6a21      	ldr	r1, [r4, #32]
 800a26c:	4628      	mov	r0, r5
 800a26e:	47b0      	blx	r6
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	d106      	bne.n	800a284 <__sflush_r+0x68>
 800a276:	6829      	ldr	r1, [r5, #0]
 800a278:	291d      	cmp	r1, #29
 800a27a:	d848      	bhi.n	800a30e <__sflush_r+0xf2>
 800a27c:	4a29      	ldr	r2, [pc, #164]	; (800a324 <__sflush_r+0x108>)
 800a27e:	40ca      	lsrs	r2, r1
 800a280:	07d6      	lsls	r6, r2, #31
 800a282:	d544      	bpl.n	800a30e <__sflush_r+0xf2>
 800a284:	2200      	movs	r2, #0
 800a286:	6062      	str	r2, [r4, #4]
 800a288:	04d9      	lsls	r1, r3, #19
 800a28a:	6922      	ldr	r2, [r4, #16]
 800a28c:	6022      	str	r2, [r4, #0]
 800a28e:	d504      	bpl.n	800a29a <__sflush_r+0x7e>
 800a290:	1c42      	adds	r2, r0, #1
 800a292:	d101      	bne.n	800a298 <__sflush_r+0x7c>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b903      	cbnz	r3, 800a29a <__sflush_r+0x7e>
 800a298:	6560      	str	r0, [r4, #84]	; 0x54
 800a29a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a29c:	602f      	str	r7, [r5, #0]
 800a29e:	2900      	cmp	r1, #0
 800a2a0:	d0c9      	beq.n	800a236 <__sflush_r+0x1a>
 800a2a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2a6:	4299      	cmp	r1, r3
 800a2a8:	d002      	beq.n	800a2b0 <__sflush_r+0x94>
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f7ff fdc2 	bl	8009e34 <_free_r>
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	6360      	str	r0, [r4, #52]	; 0x34
 800a2b4:	e7c0      	b.n	800a238 <__sflush_r+0x1c>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	47b0      	blx	r6
 800a2bc:	1c41      	adds	r1, r0, #1
 800a2be:	d1c8      	bne.n	800a252 <__sflush_r+0x36>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d0c5      	beq.n	800a252 <__sflush_r+0x36>
 800a2c6:	2b1d      	cmp	r3, #29
 800a2c8:	d001      	beq.n	800a2ce <__sflush_r+0xb2>
 800a2ca:	2b16      	cmp	r3, #22
 800a2cc:	d101      	bne.n	800a2d2 <__sflush_r+0xb6>
 800a2ce:	602f      	str	r7, [r5, #0]
 800a2d0:	e7b1      	b.n	800a236 <__sflush_r+0x1a>
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d8:	81a3      	strh	r3, [r4, #12]
 800a2da:	e7ad      	b.n	800a238 <__sflush_r+0x1c>
 800a2dc:	690f      	ldr	r7, [r1, #16]
 800a2de:	2f00      	cmp	r7, #0
 800a2e0:	d0a9      	beq.n	800a236 <__sflush_r+0x1a>
 800a2e2:	0793      	lsls	r3, r2, #30
 800a2e4:	680e      	ldr	r6, [r1, #0]
 800a2e6:	bf08      	it	eq
 800a2e8:	694b      	ldreq	r3, [r1, #20]
 800a2ea:	600f      	str	r7, [r1, #0]
 800a2ec:	bf18      	it	ne
 800a2ee:	2300      	movne	r3, #0
 800a2f0:	eba6 0807 	sub.w	r8, r6, r7
 800a2f4:	608b      	str	r3, [r1, #8]
 800a2f6:	f1b8 0f00 	cmp.w	r8, #0
 800a2fa:	dd9c      	ble.n	800a236 <__sflush_r+0x1a>
 800a2fc:	4643      	mov	r3, r8
 800a2fe:	463a      	mov	r2, r7
 800a300:	6a21      	ldr	r1, [r4, #32]
 800a302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a304:	4628      	mov	r0, r5
 800a306:	47b0      	blx	r6
 800a308:	2800      	cmp	r0, #0
 800a30a:	dc06      	bgt.n	800a31a <__sflush_r+0xfe>
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a312:	81a3      	strh	r3, [r4, #12]
 800a314:	f04f 30ff 	mov.w	r0, #4294967295
 800a318:	e78e      	b.n	800a238 <__sflush_r+0x1c>
 800a31a:	4407      	add	r7, r0
 800a31c:	eba8 0800 	sub.w	r8, r8, r0
 800a320:	e7e9      	b.n	800a2f6 <__sflush_r+0xda>
 800a322:	bf00      	nop
 800a324:	20400001 	.word	0x20400001

0800a328 <_fflush_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	690b      	ldr	r3, [r1, #16]
 800a32c:	4605      	mov	r5, r0
 800a32e:	460c      	mov	r4, r1
 800a330:	b1db      	cbz	r3, 800a36a <_fflush_r+0x42>
 800a332:	b118      	cbz	r0, 800a33c <_fflush_r+0x14>
 800a334:	6983      	ldr	r3, [r0, #24]
 800a336:	b90b      	cbnz	r3, 800a33c <_fflush_r+0x14>
 800a338:	f000 f860 	bl	800a3fc <__sinit>
 800a33c:	4b0c      	ldr	r3, [pc, #48]	; (800a370 <_fflush_r+0x48>)
 800a33e:	429c      	cmp	r4, r3
 800a340:	d109      	bne.n	800a356 <_fflush_r+0x2e>
 800a342:	686c      	ldr	r4, [r5, #4]
 800a344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a348:	b17b      	cbz	r3, 800a36a <_fflush_r+0x42>
 800a34a:	4621      	mov	r1, r4
 800a34c:	4628      	mov	r0, r5
 800a34e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a352:	f7ff bf63 	b.w	800a21c <__sflush_r>
 800a356:	4b07      	ldr	r3, [pc, #28]	; (800a374 <_fflush_r+0x4c>)
 800a358:	429c      	cmp	r4, r3
 800a35a:	d101      	bne.n	800a360 <_fflush_r+0x38>
 800a35c:	68ac      	ldr	r4, [r5, #8]
 800a35e:	e7f1      	b.n	800a344 <_fflush_r+0x1c>
 800a360:	4b05      	ldr	r3, [pc, #20]	; (800a378 <_fflush_r+0x50>)
 800a362:	429c      	cmp	r4, r3
 800a364:	bf08      	it	eq
 800a366:	68ec      	ldreq	r4, [r5, #12]
 800a368:	e7ec      	b.n	800a344 <_fflush_r+0x1c>
 800a36a:	2000      	movs	r0, #0
 800a36c:	bd38      	pop	{r3, r4, r5, pc}
 800a36e:	bf00      	nop
 800a370:	08031174 	.word	0x08031174
 800a374:	08031194 	.word	0x08031194
 800a378:	08031154 	.word	0x08031154

0800a37c <std>:
 800a37c:	2300      	movs	r3, #0
 800a37e:	b510      	push	{r4, lr}
 800a380:	4604      	mov	r4, r0
 800a382:	e9c0 3300 	strd	r3, r3, [r0]
 800a386:	6083      	str	r3, [r0, #8]
 800a388:	8181      	strh	r1, [r0, #12]
 800a38a:	6643      	str	r3, [r0, #100]	; 0x64
 800a38c:	81c2      	strh	r2, [r0, #14]
 800a38e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a392:	6183      	str	r3, [r0, #24]
 800a394:	4619      	mov	r1, r3
 800a396:	2208      	movs	r2, #8
 800a398:	305c      	adds	r0, #92	; 0x5c
 800a39a:	f7ff fd42 	bl	8009e22 <memset>
 800a39e:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <std+0x38>)
 800a3a0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3a2:	4b05      	ldr	r3, [pc, #20]	; (800a3b8 <std+0x3c>)
 800a3a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3a6:	4b05      	ldr	r3, [pc, #20]	; (800a3bc <std+0x40>)
 800a3a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3aa:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <std+0x44>)
 800a3ac:	6224      	str	r4, [r4, #32]
 800a3ae:	6323      	str	r3, [r4, #48]	; 0x30
 800a3b0:	bd10      	pop	{r4, pc}
 800a3b2:	bf00      	nop
 800a3b4:	0800ab6d 	.word	0x0800ab6d
 800a3b8:	0800ab8f 	.word	0x0800ab8f
 800a3bc:	0800abc7 	.word	0x0800abc7
 800a3c0:	0800abeb 	.word	0x0800abeb

0800a3c4 <_cleanup_r>:
 800a3c4:	4901      	ldr	r1, [pc, #4]	; (800a3cc <_cleanup_r+0x8>)
 800a3c6:	f000 b885 	b.w	800a4d4 <_fwalk_reent>
 800a3ca:	bf00      	nop
 800a3cc:	0800a329 	.word	0x0800a329

0800a3d0 <__sfmoreglue>:
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	1e4a      	subs	r2, r1, #1
 800a3d4:	2568      	movs	r5, #104	; 0x68
 800a3d6:	4355      	muls	r5, r2
 800a3d8:	460e      	mov	r6, r1
 800a3da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3de:	f7ff fd77 	bl	8009ed0 <_malloc_r>
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	b140      	cbz	r0, 800a3f8 <__sfmoreglue+0x28>
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	e9c0 1600 	strd	r1, r6, [r0]
 800a3ec:	300c      	adds	r0, #12
 800a3ee:	60a0      	str	r0, [r4, #8]
 800a3f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3f4:	f7ff fd15 	bl	8009e22 <memset>
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}

0800a3fc <__sinit>:
 800a3fc:	6983      	ldr	r3, [r0, #24]
 800a3fe:	b510      	push	{r4, lr}
 800a400:	4604      	mov	r4, r0
 800a402:	bb33      	cbnz	r3, 800a452 <__sinit+0x56>
 800a404:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a408:	6503      	str	r3, [r0, #80]	; 0x50
 800a40a:	4b12      	ldr	r3, [pc, #72]	; (800a454 <__sinit+0x58>)
 800a40c:	4a12      	ldr	r2, [pc, #72]	; (800a458 <__sinit+0x5c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6282      	str	r2, [r0, #40]	; 0x28
 800a412:	4298      	cmp	r0, r3
 800a414:	bf04      	itt	eq
 800a416:	2301      	moveq	r3, #1
 800a418:	6183      	streq	r3, [r0, #24]
 800a41a:	f000 f81f 	bl	800a45c <__sfp>
 800a41e:	6060      	str	r0, [r4, #4]
 800a420:	4620      	mov	r0, r4
 800a422:	f000 f81b 	bl	800a45c <__sfp>
 800a426:	60a0      	str	r0, [r4, #8]
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 f817 	bl	800a45c <__sfp>
 800a42e:	2200      	movs	r2, #0
 800a430:	60e0      	str	r0, [r4, #12]
 800a432:	2104      	movs	r1, #4
 800a434:	6860      	ldr	r0, [r4, #4]
 800a436:	f7ff ffa1 	bl	800a37c <std>
 800a43a:	2201      	movs	r2, #1
 800a43c:	2109      	movs	r1, #9
 800a43e:	68a0      	ldr	r0, [r4, #8]
 800a440:	f7ff ff9c 	bl	800a37c <std>
 800a444:	2202      	movs	r2, #2
 800a446:	2112      	movs	r1, #18
 800a448:	68e0      	ldr	r0, [r4, #12]
 800a44a:	f7ff ff97 	bl	800a37c <std>
 800a44e:	2301      	movs	r3, #1
 800a450:	61a3      	str	r3, [r4, #24]
 800a452:	bd10      	pop	{r4, pc}
 800a454:	08031150 	.word	0x08031150
 800a458:	0800a3c5 	.word	0x0800a3c5

0800a45c <__sfp>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	4b1b      	ldr	r3, [pc, #108]	; (800a4cc <__sfp+0x70>)
 800a460:	681e      	ldr	r6, [r3, #0]
 800a462:	69b3      	ldr	r3, [r6, #24]
 800a464:	4607      	mov	r7, r0
 800a466:	b913      	cbnz	r3, 800a46e <__sfp+0x12>
 800a468:	4630      	mov	r0, r6
 800a46a:	f7ff ffc7 	bl	800a3fc <__sinit>
 800a46e:	3648      	adds	r6, #72	; 0x48
 800a470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a474:	3b01      	subs	r3, #1
 800a476:	d503      	bpl.n	800a480 <__sfp+0x24>
 800a478:	6833      	ldr	r3, [r6, #0]
 800a47a:	b133      	cbz	r3, 800a48a <__sfp+0x2e>
 800a47c:	6836      	ldr	r6, [r6, #0]
 800a47e:	e7f7      	b.n	800a470 <__sfp+0x14>
 800a480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a484:	b16d      	cbz	r5, 800a4a2 <__sfp+0x46>
 800a486:	3468      	adds	r4, #104	; 0x68
 800a488:	e7f4      	b.n	800a474 <__sfp+0x18>
 800a48a:	2104      	movs	r1, #4
 800a48c:	4638      	mov	r0, r7
 800a48e:	f7ff ff9f 	bl	800a3d0 <__sfmoreglue>
 800a492:	6030      	str	r0, [r6, #0]
 800a494:	2800      	cmp	r0, #0
 800a496:	d1f1      	bne.n	800a47c <__sfp+0x20>
 800a498:	230c      	movs	r3, #12
 800a49a:	603b      	str	r3, [r7, #0]
 800a49c:	4604      	mov	r4, r0
 800a49e:	4620      	mov	r0, r4
 800a4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a2:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <__sfp+0x74>)
 800a4a4:	6665      	str	r5, [r4, #100]	; 0x64
 800a4a6:	e9c4 5500 	strd	r5, r5, [r4]
 800a4aa:	60a5      	str	r5, [r4, #8]
 800a4ac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a4b0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a4b4:	2208      	movs	r2, #8
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4bc:	f7ff fcb1 	bl	8009e22 <memset>
 800a4c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4c8:	e7e9      	b.n	800a49e <__sfp+0x42>
 800a4ca:	bf00      	nop
 800a4cc:	08031150 	.word	0x08031150
 800a4d0:	ffff0001 	.word	0xffff0001

0800a4d4 <_fwalk_reent>:
 800a4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d8:	4680      	mov	r8, r0
 800a4da:	4689      	mov	r9, r1
 800a4dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4e0:	2600      	movs	r6, #0
 800a4e2:	b914      	cbnz	r4, 800a4ea <_fwalk_reent+0x16>
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a4ee:	3f01      	subs	r7, #1
 800a4f0:	d501      	bpl.n	800a4f6 <_fwalk_reent+0x22>
 800a4f2:	6824      	ldr	r4, [r4, #0]
 800a4f4:	e7f5      	b.n	800a4e2 <_fwalk_reent+0xe>
 800a4f6:	89ab      	ldrh	r3, [r5, #12]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d907      	bls.n	800a50c <_fwalk_reent+0x38>
 800a4fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a500:	3301      	adds	r3, #1
 800a502:	d003      	beq.n	800a50c <_fwalk_reent+0x38>
 800a504:	4629      	mov	r1, r5
 800a506:	4640      	mov	r0, r8
 800a508:	47c8      	blx	r9
 800a50a:	4306      	orrs	r6, r0
 800a50c:	3568      	adds	r5, #104	; 0x68
 800a50e:	e7ee      	b.n	800a4ee <_fwalk_reent+0x1a>

0800a510 <__swhatbuf_r>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	460e      	mov	r6, r1
 800a514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a518:	2900      	cmp	r1, #0
 800a51a:	b096      	sub	sp, #88	; 0x58
 800a51c:	4614      	mov	r4, r2
 800a51e:	461d      	mov	r5, r3
 800a520:	da07      	bge.n	800a532 <__swhatbuf_r+0x22>
 800a522:	2300      	movs	r3, #0
 800a524:	602b      	str	r3, [r5, #0]
 800a526:	89b3      	ldrh	r3, [r6, #12]
 800a528:	061a      	lsls	r2, r3, #24
 800a52a:	d410      	bmi.n	800a54e <__swhatbuf_r+0x3e>
 800a52c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a530:	e00e      	b.n	800a550 <__swhatbuf_r+0x40>
 800a532:	466a      	mov	r2, sp
 800a534:	f000 fb80 	bl	800ac38 <_fstat_r>
 800a538:	2800      	cmp	r0, #0
 800a53a:	dbf2      	blt.n	800a522 <__swhatbuf_r+0x12>
 800a53c:	9a01      	ldr	r2, [sp, #4]
 800a53e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a542:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a546:	425a      	negs	r2, r3
 800a548:	415a      	adcs	r2, r3
 800a54a:	602a      	str	r2, [r5, #0]
 800a54c:	e7ee      	b.n	800a52c <__swhatbuf_r+0x1c>
 800a54e:	2340      	movs	r3, #64	; 0x40
 800a550:	2000      	movs	r0, #0
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	b016      	add	sp, #88	; 0x58
 800a556:	bd70      	pop	{r4, r5, r6, pc}

0800a558 <__smakebuf_r>:
 800a558:	898b      	ldrh	r3, [r1, #12]
 800a55a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a55c:	079d      	lsls	r5, r3, #30
 800a55e:	4606      	mov	r6, r0
 800a560:	460c      	mov	r4, r1
 800a562:	d507      	bpl.n	800a574 <__smakebuf_r+0x1c>
 800a564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	6123      	str	r3, [r4, #16]
 800a56c:	2301      	movs	r3, #1
 800a56e:	6163      	str	r3, [r4, #20]
 800a570:	b002      	add	sp, #8
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	ab01      	add	r3, sp, #4
 800a576:	466a      	mov	r2, sp
 800a578:	f7ff ffca 	bl	800a510 <__swhatbuf_r>
 800a57c:	9900      	ldr	r1, [sp, #0]
 800a57e:	4605      	mov	r5, r0
 800a580:	4630      	mov	r0, r6
 800a582:	f7ff fca5 	bl	8009ed0 <_malloc_r>
 800a586:	b948      	cbnz	r0, 800a59c <__smakebuf_r+0x44>
 800a588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a58c:	059a      	lsls	r2, r3, #22
 800a58e:	d4ef      	bmi.n	800a570 <__smakebuf_r+0x18>
 800a590:	f023 0303 	bic.w	r3, r3, #3
 800a594:	f043 0302 	orr.w	r3, r3, #2
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	e7e3      	b.n	800a564 <__smakebuf_r+0xc>
 800a59c:	4b0d      	ldr	r3, [pc, #52]	; (800a5d4 <__smakebuf_r+0x7c>)
 800a59e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	6020      	str	r0, [r4, #0]
 800a5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	9b00      	ldr	r3, [sp, #0]
 800a5ac:	6163      	str	r3, [r4, #20]
 800a5ae:	9b01      	ldr	r3, [sp, #4]
 800a5b0:	6120      	str	r0, [r4, #16]
 800a5b2:	b15b      	cbz	r3, 800a5cc <__smakebuf_r+0x74>
 800a5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f000 fb4f 	bl	800ac5c <_isatty_r>
 800a5be:	b128      	cbz	r0, 800a5cc <__smakebuf_r+0x74>
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	f023 0303 	bic.w	r3, r3, #3
 800a5c6:	f043 0301 	orr.w	r3, r3, #1
 800a5ca:	81a3      	strh	r3, [r4, #12]
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	431d      	orrs	r5, r3
 800a5d0:	81a5      	strh	r5, [r4, #12]
 800a5d2:	e7cd      	b.n	800a570 <__smakebuf_r+0x18>
 800a5d4:	0800a3c5 	.word	0x0800a3c5

0800a5d8 <__malloc_lock>:
 800a5d8:	4770      	bx	lr

0800a5da <__malloc_unlock>:
 800a5da:	4770      	bx	lr

0800a5dc <__sfputc_r>:
 800a5dc:	6893      	ldr	r3, [r2, #8]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	b410      	push	{r4}
 800a5e4:	6093      	str	r3, [r2, #8]
 800a5e6:	da08      	bge.n	800a5fa <__sfputc_r+0x1e>
 800a5e8:	6994      	ldr	r4, [r2, #24]
 800a5ea:	42a3      	cmp	r3, r4
 800a5ec:	db01      	blt.n	800a5f2 <__sfputc_r+0x16>
 800a5ee:	290a      	cmp	r1, #10
 800a5f0:	d103      	bne.n	800a5fa <__sfputc_r+0x1e>
 800a5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5f6:	f7ff bd51 	b.w	800a09c <__swbuf_r>
 800a5fa:	6813      	ldr	r3, [r2, #0]
 800a5fc:	1c58      	adds	r0, r3, #1
 800a5fe:	6010      	str	r0, [r2, #0]
 800a600:	7019      	strb	r1, [r3, #0]
 800a602:	4608      	mov	r0, r1
 800a604:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <__sfputs_r>:
 800a60a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60c:	4606      	mov	r6, r0
 800a60e:	460f      	mov	r7, r1
 800a610:	4614      	mov	r4, r2
 800a612:	18d5      	adds	r5, r2, r3
 800a614:	42ac      	cmp	r4, r5
 800a616:	d101      	bne.n	800a61c <__sfputs_r+0x12>
 800a618:	2000      	movs	r0, #0
 800a61a:	e007      	b.n	800a62c <__sfputs_r+0x22>
 800a61c:	463a      	mov	r2, r7
 800a61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a622:	4630      	mov	r0, r6
 800a624:	f7ff ffda 	bl	800a5dc <__sfputc_r>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d1f3      	bne.n	800a614 <__sfputs_r+0xa>
 800a62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a630 <_vfiprintf_r>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	460c      	mov	r4, r1
 800a636:	b09d      	sub	sp, #116	; 0x74
 800a638:	4617      	mov	r7, r2
 800a63a:	461d      	mov	r5, r3
 800a63c:	4606      	mov	r6, r0
 800a63e:	b118      	cbz	r0, 800a648 <_vfiprintf_r+0x18>
 800a640:	6983      	ldr	r3, [r0, #24]
 800a642:	b90b      	cbnz	r3, 800a648 <_vfiprintf_r+0x18>
 800a644:	f7ff feda 	bl	800a3fc <__sinit>
 800a648:	4b7c      	ldr	r3, [pc, #496]	; (800a83c <_vfiprintf_r+0x20c>)
 800a64a:	429c      	cmp	r4, r3
 800a64c:	d158      	bne.n	800a700 <_vfiprintf_r+0xd0>
 800a64e:	6874      	ldr	r4, [r6, #4]
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	0718      	lsls	r0, r3, #28
 800a654:	d55e      	bpl.n	800a714 <_vfiprintf_r+0xe4>
 800a656:	6923      	ldr	r3, [r4, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d05b      	beq.n	800a714 <_vfiprintf_r+0xe4>
 800a65c:	2300      	movs	r3, #0
 800a65e:	9309      	str	r3, [sp, #36]	; 0x24
 800a660:	2320      	movs	r3, #32
 800a662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a666:	2330      	movs	r3, #48	; 0x30
 800a668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a66c:	9503      	str	r5, [sp, #12]
 800a66e:	f04f 0b01 	mov.w	fp, #1
 800a672:	46b8      	mov	r8, r7
 800a674:	4645      	mov	r5, r8
 800a676:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a67a:	b10b      	cbz	r3, 800a680 <_vfiprintf_r+0x50>
 800a67c:	2b25      	cmp	r3, #37	; 0x25
 800a67e:	d154      	bne.n	800a72a <_vfiprintf_r+0xfa>
 800a680:	ebb8 0a07 	subs.w	sl, r8, r7
 800a684:	d00b      	beq.n	800a69e <_vfiprintf_r+0x6e>
 800a686:	4653      	mov	r3, sl
 800a688:	463a      	mov	r2, r7
 800a68a:	4621      	mov	r1, r4
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7ff ffbc 	bl	800a60a <__sfputs_r>
 800a692:	3001      	adds	r0, #1
 800a694:	f000 80c2 	beq.w	800a81c <_vfiprintf_r+0x1ec>
 800a698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a69a:	4453      	add	r3, sl
 800a69c:	9309      	str	r3, [sp, #36]	; 0x24
 800a69e:	f898 3000 	ldrb.w	r3, [r8]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 80ba 	beq.w	800a81c <_vfiprintf_r+0x1ec>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6b2:	9304      	str	r3, [sp, #16]
 800a6b4:	9307      	str	r3, [sp, #28]
 800a6b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a6bc:	46a8      	mov	r8, r5
 800a6be:	2205      	movs	r2, #5
 800a6c0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a6c4:	485e      	ldr	r0, [pc, #376]	; (800a840 <_vfiprintf_r+0x210>)
 800a6c6:	f7f5 fe03 	bl	80002d0 <memchr>
 800a6ca:	9b04      	ldr	r3, [sp, #16]
 800a6cc:	bb78      	cbnz	r0, 800a72e <_vfiprintf_r+0xfe>
 800a6ce:	06d9      	lsls	r1, r3, #27
 800a6d0:	bf44      	itt	mi
 800a6d2:	2220      	movmi	r2, #32
 800a6d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6d8:	071a      	lsls	r2, r3, #28
 800a6da:	bf44      	itt	mi
 800a6dc:	222b      	movmi	r2, #43	; 0x2b
 800a6de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6e2:	782a      	ldrb	r2, [r5, #0]
 800a6e4:	2a2a      	cmp	r2, #42	; 0x2a
 800a6e6:	d02a      	beq.n	800a73e <_vfiprintf_r+0x10e>
 800a6e8:	9a07      	ldr	r2, [sp, #28]
 800a6ea:	46a8      	mov	r8, r5
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	250a      	movs	r5, #10
 800a6f0:	4641      	mov	r1, r8
 800a6f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6f6:	3b30      	subs	r3, #48	; 0x30
 800a6f8:	2b09      	cmp	r3, #9
 800a6fa:	d969      	bls.n	800a7d0 <_vfiprintf_r+0x1a0>
 800a6fc:	b360      	cbz	r0, 800a758 <_vfiprintf_r+0x128>
 800a6fe:	e024      	b.n	800a74a <_vfiprintf_r+0x11a>
 800a700:	4b50      	ldr	r3, [pc, #320]	; (800a844 <_vfiprintf_r+0x214>)
 800a702:	429c      	cmp	r4, r3
 800a704:	d101      	bne.n	800a70a <_vfiprintf_r+0xda>
 800a706:	68b4      	ldr	r4, [r6, #8]
 800a708:	e7a2      	b.n	800a650 <_vfiprintf_r+0x20>
 800a70a:	4b4f      	ldr	r3, [pc, #316]	; (800a848 <_vfiprintf_r+0x218>)
 800a70c:	429c      	cmp	r4, r3
 800a70e:	bf08      	it	eq
 800a710:	68f4      	ldreq	r4, [r6, #12]
 800a712:	e79d      	b.n	800a650 <_vfiprintf_r+0x20>
 800a714:	4621      	mov	r1, r4
 800a716:	4630      	mov	r0, r6
 800a718:	f7ff fd12 	bl	800a140 <__swsetup_r>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d09d      	beq.n	800a65c <_vfiprintf_r+0x2c>
 800a720:	f04f 30ff 	mov.w	r0, #4294967295
 800a724:	b01d      	add	sp, #116	; 0x74
 800a726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72a:	46a8      	mov	r8, r5
 800a72c:	e7a2      	b.n	800a674 <_vfiprintf_r+0x44>
 800a72e:	4a44      	ldr	r2, [pc, #272]	; (800a840 <_vfiprintf_r+0x210>)
 800a730:	1a80      	subs	r0, r0, r2
 800a732:	fa0b f000 	lsl.w	r0, fp, r0
 800a736:	4318      	orrs	r0, r3
 800a738:	9004      	str	r0, [sp, #16]
 800a73a:	4645      	mov	r5, r8
 800a73c:	e7be      	b.n	800a6bc <_vfiprintf_r+0x8c>
 800a73e:	9a03      	ldr	r2, [sp, #12]
 800a740:	1d11      	adds	r1, r2, #4
 800a742:	6812      	ldr	r2, [r2, #0]
 800a744:	9103      	str	r1, [sp, #12]
 800a746:	2a00      	cmp	r2, #0
 800a748:	db01      	blt.n	800a74e <_vfiprintf_r+0x11e>
 800a74a:	9207      	str	r2, [sp, #28]
 800a74c:	e004      	b.n	800a758 <_vfiprintf_r+0x128>
 800a74e:	4252      	negs	r2, r2
 800a750:	f043 0302 	orr.w	r3, r3, #2
 800a754:	9207      	str	r2, [sp, #28]
 800a756:	9304      	str	r3, [sp, #16]
 800a758:	f898 3000 	ldrb.w	r3, [r8]
 800a75c:	2b2e      	cmp	r3, #46	; 0x2e
 800a75e:	d10e      	bne.n	800a77e <_vfiprintf_r+0x14e>
 800a760:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a764:	2b2a      	cmp	r3, #42	; 0x2a
 800a766:	d138      	bne.n	800a7da <_vfiprintf_r+0x1aa>
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	9203      	str	r2, [sp, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	bfb8      	it	lt
 800a774:	f04f 33ff 	movlt.w	r3, #4294967295
 800a778:	f108 0802 	add.w	r8, r8, #2
 800a77c:	9305      	str	r3, [sp, #20]
 800a77e:	4d33      	ldr	r5, [pc, #204]	; (800a84c <_vfiprintf_r+0x21c>)
 800a780:	f898 1000 	ldrb.w	r1, [r8]
 800a784:	2203      	movs	r2, #3
 800a786:	4628      	mov	r0, r5
 800a788:	f7f5 fda2 	bl	80002d0 <memchr>
 800a78c:	b140      	cbz	r0, 800a7a0 <_vfiprintf_r+0x170>
 800a78e:	2340      	movs	r3, #64	; 0x40
 800a790:	1b40      	subs	r0, r0, r5
 800a792:	fa03 f000 	lsl.w	r0, r3, r0
 800a796:	9b04      	ldr	r3, [sp, #16]
 800a798:	4303      	orrs	r3, r0
 800a79a:	f108 0801 	add.w	r8, r8, #1
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	f898 1000 	ldrb.w	r1, [r8]
 800a7a4:	482a      	ldr	r0, [pc, #168]	; (800a850 <_vfiprintf_r+0x220>)
 800a7a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7aa:	2206      	movs	r2, #6
 800a7ac:	f108 0701 	add.w	r7, r8, #1
 800a7b0:	f7f5 fd8e 	bl	80002d0 <memchr>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d037      	beq.n	800a828 <_vfiprintf_r+0x1f8>
 800a7b8:	4b26      	ldr	r3, [pc, #152]	; (800a854 <_vfiprintf_r+0x224>)
 800a7ba:	bb1b      	cbnz	r3, 800a804 <_vfiprintf_r+0x1d4>
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	3307      	adds	r3, #7
 800a7c0:	f023 0307 	bic.w	r3, r3, #7
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	9303      	str	r3, [sp, #12]
 800a7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ca:	444b      	add	r3, r9
 800a7cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ce:	e750      	b.n	800a672 <_vfiprintf_r+0x42>
 800a7d0:	fb05 3202 	mla	r2, r5, r2, r3
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	4688      	mov	r8, r1
 800a7d8:	e78a      	b.n	800a6f0 <_vfiprintf_r+0xc0>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f108 0801 	add.w	r8, r8, #1
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	250a      	movs	r5, #10
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ec:	3a30      	subs	r2, #48	; 0x30
 800a7ee:	2a09      	cmp	r2, #9
 800a7f0:	d903      	bls.n	800a7fa <_vfiprintf_r+0x1ca>
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0c3      	beq.n	800a77e <_vfiprintf_r+0x14e>
 800a7f6:	9105      	str	r1, [sp, #20]
 800a7f8:	e7c1      	b.n	800a77e <_vfiprintf_r+0x14e>
 800a7fa:	fb05 2101 	mla	r1, r5, r1, r2
 800a7fe:	2301      	movs	r3, #1
 800a800:	4680      	mov	r8, r0
 800a802:	e7f0      	b.n	800a7e6 <_vfiprintf_r+0x1b6>
 800a804:	ab03      	add	r3, sp, #12
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	4622      	mov	r2, r4
 800a80a:	4b13      	ldr	r3, [pc, #76]	; (800a858 <_vfiprintf_r+0x228>)
 800a80c:	a904      	add	r1, sp, #16
 800a80e:	4630      	mov	r0, r6
 800a810:	f3af 8000 	nop.w
 800a814:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a818:	4681      	mov	r9, r0
 800a81a:	d1d5      	bne.n	800a7c8 <_vfiprintf_r+0x198>
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	065b      	lsls	r3, r3, #25
 800a820:	f53f af7e 	bmi.w	800a720 <_vfiprintf_r+0xf0>
 800a824:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a826:	e77d      	b.n	800a724 <_vfiprintf_r+0xf4>
 800a828:	ab03      	add	r3, sp, #12
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	4622      	mov	r2, r4
 800a82e:	4b0a      	ldr	r3, [pc, #40]	; (800a858 <_vfiprintf_r+0x228>)
 800a830:	a904      	add	r1, sp, #16
 800a832:	4630      	mov	r0, r6
 800a834:	f000 f888 	bl	800a948 <_printf_i>
 800a838:	e7ec      	b.n	800a814 <_vfiprintf_r+0x1e4>
 800a83a:	bf00      	nop
 800a83c:	08031174 	.word	0x08031174
 800a840:	080311b4 	.word	0x080311b4
 800a844:	08031194 	.word	0x08031194
 800a848:	08031154 	.word	0x08031154
 800a84c:	080311ba 	.word	0x080311ba
 800a850:	080311be 	.word	0x080311be
 800a854:	00000000 	.word	0x00000000
 800a858:	0800a60b 	.word	0x0800a60b

0800a85c <_printf_common>:
 800a85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a860:	4691      	mov	r9, r2
 800a862:	461f      	mov	r7, r3
 800a864:	688a      	ldr	r2, [r1, #8]
 800a866:	690b      	ldr	r3, [r1, #16]
 800a868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a86c:	4293      	cmp	r3, r2
 800a86e:	bfb8      	it	lt
 800a870:	4613      	movlt	r3, r2
 800a872:	f8c9 3000 	str.w	r3, [r9]
 800a876:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a87a:	4606      	mov	r6, r0
 800a87c:	460c      	mov	r4, r1
 800a87e:	b112      	cbz	r2, 800a886 <_printf_common+0x2a>
 800a880:	3301      	adds	r3, #1
 800a882:	f8c9 3000 	str.w	r3, [r9]
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	0699      	lsls	r1, r3, #26
 800a88a:	bf42      	ittt	mi
 800a88c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a890:	3302      	addmi	r3, #2
 800a892:	f8c9 3000 	strmi.w	r3, [r9]
 800a896:	6825      	ldr	r5, [r4, #0]
 800a898:	f015 0506 	ands.w	r5, r5, #6
 800a89c:	d107      	bne.n	800a8ae <_printf_common+0x52>
 800a89e:	f104 0a19 	add.w	sl, r4, #25
 800a8a2:	68e3      	ldr	r3, [r4, #12]
 800a8a4:	f8d9 2000 	ldr.w	r2, [r9]
 800a8a8:	1a9b      	subs	r3, r3, r2
 800a8aa:	42ab      	cmp	r3, r5
 800a8ac:	dc28      	bgt.n	800a900 <_printf_common+0xa4>
 800a8ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a8b2:	6822      	ldr	r2, [r4, #0]
 800a8b4:	3300      	adds	r3, #0
 800a8b6:	bf18      	it	ne
 800a8b8:	2301      	movne	r3, #1
 800a8ba:	0692      	lsls	r2, r2, #26
 800a8bc:	d42d      	bmi.n	800a91a <_printf_common+0xbe>
 800a8be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8c2:	4639      	mov	r1, r7
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	47c0      	blx	r8
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d020      	beq.n	800a90e <_printf_common+0xb2>
 800a8cc:	6823      	ldr	r3, [r4, #0]
 800a8ce:	68e5      	ldr	r5, [r4, #12]
 800a8d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a8d4:	f003 0306 	and.w	r3, r3, #6
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	bf08      	it	eq
 800a8dc:	1aad      	subeq	r5, r5, r2
 800a8de:	68a3      	ldr	r3, [r4, #8]
 800a8e0:	6922      	ldr	r2, [r4, #16]
 800a8e2:	bf0c      	ite	eq
 800a8e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8e8:	2500      	movne	r5, #0
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	bfc4      	itt	gt
 800a8ee:	1a9b      	subgt	r3, r3, r2
 800a8f0:	18ed      	addgt	r5, r5, r3
 800a8f2:	f04f 0900 	mov.w	r9, #0
 800a8f6:	341a      	adds	r4, #26
 800a8f8:	454d      	cmp	r5, r9
 800a8fa:	d11a      	bne.n	800a932 <_printf_common+0xd6>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e008      	b.n	800a912 <_printf_common+0xb6>
 800a900:	2301      	movs	r3, #1
 800a902:	4652      	mov	r2, sl
 800a904:	4639      	mov	r1, r7
 800a906:	4630      	mov	r0, r6
 800a908:	47c0      	blx	r8
 800a90a:	3001      	adds	r0, #1
 800a90c:	d103      	bne.n	800a916 <_printf_common+0xba>
 800a90e:	f04f 30ff 	mov.w	r0, #4294967295
 800a912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a916:	3501      	adds	r5, #1
 800a918:	e7c3      	b.n	800a8a2 <_printf_common+0x46>
 800a91a:	18e1      	adds	r1, r4, r3
 800a91c:	1c5a      	adds	r2, r3, #1
 800a91e:	2030      	movs	r0, #48	; 0x30
 800a920:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a924:	4422      	add	r2, r4
 800a926:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a92a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a92e:	3302      	adds	r3, #2
 800a930:	e7c5      	b.n	800a8be <_printf_common+0x62>
 800a932:	2301      	movs	r3, #1
 800a934:	4622      	mov	r2, r4
 800a936:	4639      	mov	r1, r7
 800a938:	4630      	mov	r0, r6
 800a93a:	47c0      	blx	r8
 800a93c:	3001      	adds	r0, #1
 800a93e:	d0e6      	beq.n	800a90e <_printf_common+0xb2>
 800a940:	f109 0901 	add.w	r9, r9, #1
 800a944:	e7d8      	b.n	800a8f8 <_printf_common+0x9c>
	...

0800a948 <_printf_i>:
 800a948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a94c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a950:	460c      	mov	r4, r1
 800a952:	7e09      	ldrb	r1, [r1, #24]
 800a954:	b085      	sub	sp, #20
 800a956:	296e      	cmp	r1, #110	; 0x6e
 800a958:	4617      	mov	r7, r2
 800a95a:	4606      	mov	r6, r0
 800a95c:	4698      	mov	r8, r3
 800a95e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a960:	f000 80b3 	beq.w	800aaca <_printf_i+0x182>
 800a964:	d822      	bhi.n	800a9ac <_printf_i+0x64>
 800a966:	2963      	cmp	r1, #99	; 0x63
 800a968:	d036      	beq.n	800a9d8 <_printf_i+0x90>
 800a96a:	d80a      	bhi.n	800a982 <_printf_i+0x3a>
 800a96c:	2900      	cmp	r1, #0
 800a96e:	f000 80b9 	beq.w	800aae4 <_printf_i+0x19c>
 800a972:	2958      	cmp	r1, #88	; 0x58
 800a974:	f000 8083 	beq.w	800aa7e <_printf_i+0x136>
 800a978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a97c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a980:	e032      	b.n	800a9e8 <_printf_i+0xa0>
 800a982:	2964      	cmp	r1, #100	; 0x64
 800a984:	d001      	beq.n	800a98a <_printf_i+0x42>
 800a986:	2969      	cmp	r1, #105	; 0x69
 800a988:	d1f6      	bne.n	800a978 <_printf_i+0x30>
 800a98a:	6820      	ldr	r0, [r4, #0]
 800a98c:	6813      	ldr	r3, [r2, #0]
 800a98e:	0605      	lsls	r5, r0, #24
 800a990:	f103 0104 	add.w	r1, r3, #4
 800a994:	d52a      	bpl.n	800a9ec <_printf_i+0xa4>
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6011      	str	r1, [r2, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	da03      	bge.n	800a9a6 <_printf_i+0x5e>
 800a99e:	222d      	movs	r2, #45	; 0x2d
 800a9a0:	425b      	negs	r3, r3
 800a9a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a9a6:	486f      	ldr	r0, [pc, #444]	; (800ab64 <_printf_i+0x21c>)
 800a9a8:	220a      	movs	r2, #10
 800a9aa:	e039      	b.n	800aa20 <_printf_i+0xd8>
 800a9ac:	2973      	cmp	r1, #115	; 0x73
 800a9ae:	f000 809d 	beq.w	800aaec <_printf_i+0x1a4>
 800a9b2:	d808      	bhi.n	800a9c6 <_printf_i+0x7e>
 800a9b4:	296f      	cmp	r1, #111	; 0x6f
 800a9b6:	d020      	beq.n	800a9fa <_printf_i+0xb2>
 800a9b8:	2970      	cmp	r1, #112	; 0x70
 800a9ba:	d1dd      	bne.n	800a978 <_printf_i+0x30>
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	f043 0320 	orr.w	r3, r3, #32
 800a9c2:	6023      	str	r3, [r4, #0]
 800a9c4:	e003      	b.n	800a9ce <_printf_i+0x86>
 800a9c6:	2975      	cmp	r1, #117	; 0x75
 800a9c8:	d017      	beq.n	800a9fa <_printf_i+0xb2>
 800a9ca:	2978      	cmp	r1, #120	; 0x78
 800a9cc:	d1d4      	bne.n	800a978 <_printf_i+0x30>
 800a9ce:	2378      	movs	r3, #120	; 0x78
 800a9d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9d4:	4864      	ldr	r0, [pc, #400]	; (800ab68 <_printf_i+0x220>)
 800a9d6:	e055      	b.n	800aa84 <_printf_i+0x13c>
 800a9d8:	6813      	ldr	r3, [r2, #0]
 800a9da:	1d19      	adds	r1, r3, #4
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6011      	str	r1, [r2, #0]
 800a9e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e08c      	b.n	800ab06 <_printf_i+0x1be>
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6011      	str	r1, [r2, #0]
 800a9f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9f4:	bf18      	it	ne
 800a9f6:	b21b      	sxthne	r3, r3
 800a9f8:	e7cf      	b.n	800a99a <_printf_i+0x52>
 800a9fa:	6813      	ldr	r3, [r2, #0]
 800a9fc:	6825      	ldr	r5, [r4, #0]
 800a9fe:	1d18      	adds	r0, r3, #4
 800aa00:	6010      	str	r0, [r2, #0]
 800aa02:	0628      	lsls	r0, r5, #24
 800aa04:	d501      	bpl.n	800aa0a <_printf_i+0xc2>
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	e002      	b.n	800aa10 <_printf_i+0xc8>
 800aa0a:	0668      	lsls	r0, r5, #25
 800aa0c:	d5fb      	bpl.n	800aa06 <_printf_i+0xbe>
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	4854      	ldr	r0, [pc, #336]	; (800ab64 <_printf_i+0x21c>)
 800aa12:	296f      	cmp	r1, #111	; 0x6f
 800aa14:	bf14      	ite	ne
 800aa16:	220a      	movne	r2, #10
 800aa18:	2208      	moveq	r2, #8
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa20:	6865      	ldr	r5, [r4, #4]
 800aa22:	60a5      	str	r5, [r4, #8]
 800aa24:	2d00      	cmp	r5, #0
 800aa26:	f2c0 8095 	blt.w	800ab54 <_printf_i+0x20c>
 800aa2a:	6821      	ldr	r1, [r4, #0]
 800aa2c:	f021 0104 	bic.w	r1, r1, #4
 800aa30:	6021      	str	r1, [r4, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d13d      	bne.n	800aab2 <_printf_i+0x16a>
 800aa36:	2d00      	cmp	r5, #0
 800aa38:	f040 808e 	bne.w	800ab58 <_printf_i+0x210>
 800aa3c:	4665      	mov	r5, ip
 800aa3e:	2a08      	cmp	r2, #8
 800aa40:	d10b      	bne.n	800aa5a <_printf_i+0x112>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	07db      	lsls	r3, r3, #31
 800aa46:	d508      	bpl.n	800aa5a <_printf_i+0x112>
 800aa48:	6923      	ldr	r3, [r4, #16]
 800aa4a:	6862      	ldr	r2, [r4, #4]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	bfde      	ittt	le
 800aa50:	2330      	movle	r3, #48	; 0x30
 800aa52:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa56:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa5a:	ebac 0305 	sub.w	r3, ip, r5
 800aa5e:	6123      	str	r3, [r4, #16]
 800aa60:	f8cd 8000 	str.w	r8, [sp]
 800aa64:	463b      	mov	r3, r7
 800aa66:	aa03      	add	r2, sp, #12
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7ff fef6 	bl	800a85c <_printf_common>
 800aa70:	3001      	adds	r0, #1
 800aa72:	d14d      	bne.n	800ab10 <_printf_i+0x1c8>
 800aa74:	f04f 30ff 	mov.w	r0, #4294967295
 800aa78:	b005      	add	sp, #20
 800aa7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa7e:	4839      	ldr	r0, [pc, #228]	; (800ab64 <_printf_i+0x21c>)
 800aa80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aa84:	6813      	ldr	r3, [r2, #0]
 800aa86:	6821      	ldr	r1, [r4, #0]
 800aa88:	1d1d      	adds	r5, r3, #4
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6015      	str	r5, [r2, #0]
 800aa8e:	060a      	lsls	r2, r1, #24
 800aa90:	d50b      	bpl.n	800aaaa <_printf_i+0x162>
 800aa92:	07ca      	lsls	r2, r1, #31
 800aa94:	bf44      	itt	mi
 800aa96:	f041 0120 	orrmi.w	r1, r1, #32
 800aa9a:	6021      	strmi	r1, [r4, #0]
 800aa9c:	b91b      	cbnz	r3, 800aaa6 <_printf_i+0x15e>
 800aa9e:	6822      	ldr	r2, [r4, #0]
 800aaa0:	f022 0220 	bic.w	r2, r2, #32
 800aaa4:	6022      	str	r2, [r4, #0]
 800aaa6:	2210      	movs	r2, #16
 800aaa8:	e7b7      	b.n	800aa1a <_printf_i+0xd2>
 800aaaa:	064d      	lsls	r5, r1, #25
 800aaac:	bf48      	it	mi
 800aaae:	b29b      	uxthmi	r3, r3
 800aab0:	e7ef      	b.n	800aa92 <_printf_i+0x14a>
 800aab2:	4665      	mov	r5, ip
 800aab4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aab8:	fb02 3311 	mls	r3, r2, r1, r3
 800aabc:	5cc3      	ldrb	r3, [r0, r3]
 800aabe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aac2:	460b      	mov	r3, r1
 800aac4:	2900      	cmp	r1, #0
 800aac6:	d1f5      	bne.n	800aab4 <_printf_i+0x16c>
 800aac8:	e7b9      	b.n	800aa3e <_printf_i+0xf6>
 800aaca:	6813      	ldr	r3, [r2, #0]
 800aacc:	6825      	ldr	r5, [r4, #0]
 800aace:	6961      	ldr	r1, [r4, #20]
 800aad0:	1d18      	adds	r0, r3, #4
 800aad2:	6010      	str	r0, [r2, #0]
 800aad4:	0628      	lsls	r0, r5, #24
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	d501      	bpl.n	800aade <_printf_i+0x196>
 800aada:	6019      	str	r1, [r3, #0]
 800aadc:	e002      	b.n	800aae4 <_printf_i+0x19c>
 800aade:	066a      	lsls	r2, r5, #25
 800aae0:	d5fb      	bpl.n	800aada <_printf_i+0x192>
 800aae2:	8019      	strh	r1, [r3, #0]
 800aae4:	2300      	movs	r3, #0
 800aae6:	6123      	str	r3, [r4, #16]
 800aae8:	4665      	mov	r5, ip
 800aaea:	e7b9      	b.n	800aa60 <_printf_i+0x118>
 800aaec:	6813      	ldr	r3, [r2, #0]
 800aaee:	1d19      	adds	r1, r3, #4
 800aaf0:	6011      	str	r1, [r2, #0]
 800aaf2:	681d      	ldr	r5, [r3, #0]
 800aaf4:	6862      	ldr	r2, [r4, #4]
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f7f5 fbe9 	bl	80002d0 <memchr>
 800aafe:	b108      	cbz	r0, 800ab04 <_printf_i+0x1bc>
 800ab00:	1b40      	subs	r0, r0, r5
 800ab02:	6060      	str	r0, [r4, #4]
 800ab04:	6863      	ldr	r3, [r4, #4]
 800ab06:	6123      	str	r3, [r4, #16]
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab0e:	e7a7      	b.n	800aa60 <_printf_i+0x118>
 800ab10:	6923      	ldr	r3, [r4, #16]
 800ab12:	462a      	mov	r2, r5
 800ab14:	4639      	mov	r1, r7
 800ab16:	4630      	mov	r0, r6
 800ab18:	47c0      	blx	r8
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	d0aa      	beq.n	800aa74 <_printf_i+0x12c>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	079b      	lsls	r3, r3, #30
 800ab22:	d413      	bmi.n	800ab4c <_printf_i+0x204>
 800ab24:	68e0      	ldr	r0, [r4, #12]
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	4298      	cmp	r0, r3
 800ab2a:	bfb8      	it	lt
 800ab2c:	4618      	movlt	r0, r3
 800ab2e:	e7a3      	b.n	800aa78 <_printf_i+0x130>
 800ab30:	2301      	movs	r3, #1
 800ab32:	464a      	mov	r2, r9
 800ab34:	4639      	mov	r1, r7
 800ab36:	4630      	mov	r0, r6
 800ab38:	47c0      	blx	r8
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	d09a      	beq.n	800aa74 <_printf_i+0x12c>
 800ab3e:	3501      	adds	r5, #1
 800ab40:	68e3      	ldr	r3, [r4, #12]
 800ab42:	9a03      	ldr	r2, [sp, #12]
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	42ab      	cmp	r3, r5
 800ab48:	dcf2      	bgt.n	800ab30 <_printf_i+0x1e8>
 800ab4a:	e7eb      	b.n	800ab24 <_printf_i+0x1dc>
 800ab4c:	2500      	movs	r5, #0
 800ab4e:	f104 0919 	add.w	r9, r4, #25
 800ab52:	e7f5      	b.n	800ab40 <_printf_i+0x1f8>
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1ac      	bne.n	800aab2 <_printf_i+0x16a>
 800ab58:	7803      	ldrb	r3, [r0, #0]
 800ab5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab62:	e76c      	b.n	800aa3e <_printf_i+0xf6>
 800ab64:	080311c5 	.word	0x080311c5
 800ab68:	080311d6 	.word	0x080311d6

0800ab6c <__sread>:
 800ab6c:	b510      	push	{r4, lr}
 800ab6e:	460c      	mov	r4, r1
 800ab70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab74:	f000 f894 	bl	800aca0 <_read_r>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	bfab      	itete	ge
 800ab7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab80:	181b      	addge	r3, r3, r0
 800ab82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab86:	bfac      	ite	ge
 800ab88:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab8a:	81a3      	strhlt	r3, [r4, #12]
 800ab8c:	bd10      	pop	{r4, pc}

0800ab8e <__swrite>:
 800ab8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	461f      	mov	r7, r3
 800ab94:	898b      	ldrh	r3, [r1, #12]
 800ab96:	05db      	lsls	r3, r3, #23
 800ab98:	4605      	mov	r5, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	d505      	bpl.n	800abac <__swrite+0x1e>
 800aba0:	2302      	movs	r3, #2
 800aba2:	2200      	movs	r2, #0
 800aba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba8:	f000 f868 	bl	800ac7c <_lseek_r>
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abb6:	81a3      	strh	r3, [r4, #12]
 800abb8:	4632      	mov	r2, r6
 800abba:	463b      	mov	r3, r7
 800abbc:	4628      	mov	r0, r5
 800abbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abc2:	f000 b817 	b.w	800abf4 <_write_r>

0800abc6 <__sseek>:
 800abc6:	b510      	push	{r4, lr}
 800abc8:	460c      	mov	r4, r1
 800abca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abce:	f000 f855 	bl	800ac7c <_lseek_r>
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	bf15      	itete	ne
 800abd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800abda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abe2:	81a3      	strheq	r3, [r4, #12]
 800abe4:	bf18      	it	ne
 800abe6:	81a3      	strhne	r3, [r4, #12]
 800abe8:	bd10      	pop	{r4, pc}

0800abea <__sclose>:
 800abea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abee:	f000 b813 	b.w	800ac18 <_close_r>
	...

0800abf4 <_write_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4c07      	ldr	r4, [pc, #28]	; (800ac14 <_write_r+0x20>)
 800abf8:	4605      	mov	r5, r0
 800abfa:	4608      	mov	r0, r1
 800abfc:	4611      	mov	r1, r2
 800abfe:	2200      	movs	r2, #0
 800ac00:	6022      	str	r2, [r4, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f7f7 fab1 	bl	800216a <_write>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_write_r+0x1e>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_write_r+0x1e>
 800ac10:	602b      	str	r3, [r5, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	20022364 	.word	0x20022364

0800ac18 <_close_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4c06      	ldr	r4, [pc, #24]	; (800ac34 <_close_r+0x1c>)
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	4605      	mov	r5, r0
 800ac20:	4608      	mov	r0, r1
 800ac22:	6023      	str	r3, [r4, #0]
 800ac24:	f7f7 fabd 	bl	80021a2 <_close>
 800ac28:	1c43      	adds	r3, r0, #1
 800ac2a:	d102      	bne.n	800ac32 <_close_r+0x1a>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	b103      	cbz	r3, 800ac32 <_close_r+0x1a>
 800ac30:	602b      	str	r3, [r5, #0]
 800ac32:	bd38      	pop	{r3, r4, r5, pc}
 800ac34:	20022364 	.word	0x20022364

0800ac38 <_fstat_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	4c07      	ldr	r4, [pc, #28]	; (800ac58 <_fstat_r+0x20>)
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4605      	mov	r5, r0
 800ac40:	4608      	mov	r0, r1
 800ac42:	4611      	mov	r1, r2
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	f7f7 fab8 	bl	80021ba <_fstat>
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	d102      	bne.n	800ac54 <_fstat_r+0x1c>
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	b103      	cbz	r3, 800ac54 <_fstat_r+0x1c>
 800ac52:	602b      	str	r3, [r5, #0]
 800ac54:	bd38      	pop	{r3, r4, r5, pc}
 800ac56:	bf00      	nop
 800ac58:	20022364 	.word	0x20022364

0800ac5c <_isatty_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4c06      	ldr	r4, [pc, #24]	; (800ac78 <_isatty_r+0x1c>)
 800ac60:	2300      	movs	r3, #0
 800ac62:	4605      	mov	r5, r0
 800ac64:	4608      	mov	r0, r1
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	f7f7 fab7 	bl	80021da <_isatty>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d102      	bne.n	800ac76 <_isatty_r+0x1a>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	b103      	cbz	r3, 800ac76 <_isatty_r+0x1a>
 800ac74:	602b      	str	r3, [r5, #0]
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	20022364 	.word	0x20022364

0800ac7c <_lseek_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	4c07      	ldr	r4, [pc, #28]	; (800ac9c <_lseek_r+0x20>)
 800ac80:	4605      	mov	r5, r0
 800ac82:	4608      	mov	r0, r1
 800ac84:	4611      	mov	r1, r2
 800ac86:	2200      	movs	r2, #0
 800ac88:	6022      	str	r2, [r4, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f7f7 fab0 	bl	80021f0 <_lseek>
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d102      	bne.n	800ac9a <_lseek_r+0x1e>
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	b103      	cbz	r3, 800ac9a <_lseek_r+0x1e>
 800ac98:	602b      	str	r3, [r5, #0]
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	20022364 	.word	0x20022364

0800aca0 <_read_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4c07      	ldr	r4, [pc, #28]	; (800acc0 <_read_r+0x20>)
 800aca4:	4605      	mov	r5, r0
 800aca6:	4608      	mov	r0, r1
 800aca8:	4611      	mov	r1, r2
 800acaa:	2200      	movs	r2, #0
 800acac:	6022      	str	r2, [r4, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	f7f7 fa3e 	bl	8002130 <_read>
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	d102      	bne.n	800acbe <_read_r+0x1e>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	b103      	cbz	r3, 800acbe <_read_r+0x1e>
 800acbc:	602b      	str	r3, [r5, #0]
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	20022364 	.word	0x20022364

0800acc4 <expf>:
 800acc4:	b530      	push	{r4, r5, lr}
 800acc6:	ed2d 8b02 	vpush	{d8}
 800acca:	4d35      	ldr	r5, [pc, #212]	; (800ada0 <expf+0xdc>)
 800accc:	b08b      	sub	sp, #44	; 0x2c
 800acce:	eeb0 8a40 	vmov.f32	s16, s0
 800acd2:	f000 f937 	bl	800af44 <__ieee754_expf>
 800acd6:	f995 3000 	ldrsb.w	r3, [r5]
 800acda:	3301      	adds	r3, #1
 800acdc:	ee10 4a10 	vmov	r4, s0
 800ace0:	d030      	beq.n	800ad44 <expf+0x80>
 800ace2:	eeb0 0a48 	vmov.f32	s0, s16
 800ace6:	f000 fb53 	bl	800b390 <finitef>
 800acea:	b358      	cbz	r0, 800ad44 <expf+0x80>
 800acec:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800ada4 <expf+0xe0>
 800acf0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800acf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf8:	dd35      	ble.n	800ad66 <expf+0xa2>
 800acfa:	2303      	movs	r3, #3
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	4b2a      	ldr	r3, [pc, #168]	; (800ada8 <expf+0xe4>)
 800ad00:	9301      	str	r3, [sp, #4]
 800ad02:	ee18 0a10 	vmov	r0, s16
 800ad06:	2300      	movs	r3, #0
 800ad08:	9308      	str	r3, [sp, #32]
 800ad0a:	f7f5 fc95 	bl	8000638 <__aeabi_f2d>
 800ad0e:	f995 3000 	ldrsb.w	r3, [r5]
 800ad12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad1a:	b9cb      	cbnz	r3, 800ad50 <expf+0x8c>
 800ad1c:	4b23      	ldr	r3, [pc, #140]	; (800adac <expf+0xe8>)
 800ad1e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ad22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad26:	4668      	mov	r0, sp
 800ad28:	f000 fb27 	bl	800b37a <matherr>
 800ad2c:	b1b0      	cbz	r0, 800ad5c <expf+0x98>
 800ad2e:	9b08      	ldr	r3, [sp, #32]
 800ad30:	b11b      	cbz	r3, 800ad3a <expf+0x76>
 800ad32:	f7ff f841 	bl	8009db8 <__errno>
 800ad36:	9b08      	ldr	r3, [sp, #32]
 800ad38:	6003      	str	r3, [r0, #0]
 800ad3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad3e:	f7f5 ff6d 	bl	8000c1c <__aeabi_d2f>
 800ad42:	4604      	mov	r4, r0
 800ad44:	ee00 4a10 	vmov	s0, r4
 800ad48:	b00b      	add	sp, #44	; 0x2c
 800ad4a:	ecbd 8b02 	vpop	{d8}
 800ad4e:	bd30      	pop	{r4, r5, pc}
 800ad50:	4917      	ldr	r1, [pc, #92]	; (800adb0 <expf+0xec>)
 800ad52:	2000      	movs	r0, #0
 800ad54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d1e4      	bne.n	800ad26 <expf+0x62>
 800ad5c:	f7ff f82c 	bl	8009db8 <__errno>
 800ad60:	2322      	movs	r3, #34	; 0x22
 800ad62:	6003      	str	r3, [r0, #0]
 800ad64:	e7e3      	b.n	800ad2e <expf+0x6a>
 800ad66:	eddf 7a13 	vldr	s15, [pc, #76]	; 800adb4 <expf+0xf0>
 800ad6a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ad6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad72:	d5e7      	bpl.n	800ad44 <expf+0x80>
 800ad74:	2304      	movs	r3, #4
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	4b0b      	ldr	r3, [pc, #44]	; (800ada8 <expf+0xe4>)
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	ee18 0a10 	vmov	r0, s16
 800ad80:	2300      	movs	r3, #0
 800ad82:	9308      	str	r3, [sp, #32]
 800ad84:	f7f5 fc58 	bl	8000638 <__aeabi_f2d>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad98:	f995 3000 	ldrsb.w	r3, [r5]
 800ad9c:	e7dc      	b.n	800ad58 <expf+0x94>
 800ad9e:	bf00      	nop
 800ada0:	20000f30 	.word	0x20000f30
 800ada4:	42b17180 	.word	0x42b17180
 800ada8:	080311e7 	.word	0x080311e7
 800adac:	47efffff 	.word	0x47efffff
 800adb0:	7ff00000 	.word	0x7ff00000
 800adb4:	c2cff1b5 	.word	0xc2cff1b5

0800adb8 <log10f>:
 800adb8:	b510      	push	{r4, lr}
 800adba:	ed2d 8b02 	vpush	{d8}
 800adbe:	b08a      	sub	sp, #40	; 0x28
 800adc0:	eeb0 8a40 	vmov.f32	s16, s0
 800adc4:	f000 fa80 	bl	800b2c8 <__ieee754_log10f>
 800adc8:	4b31      	ldr	r3, [pc, #196]	; (800ae90 <log10f+0xd8>)
 800adca:	f993 4000 	ldrsb.w	r4, [r3]
 800adce:	1c63      	adds	r3, r4, #1
 800add0:	d059      	beq.n	800ae86 <log10f+0xce>
 800add2:	eeb4 8a48 	vcmp.f32	s16, s16
 800add6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adda:	d654      	bvs.n	800ae86 <log10f+0xce>
 800addc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ade0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade4:	d84f      	bhi.n	800ae86 <log10f+0xce>
 800ade6:	4b2b      	ldr	r3, [pc, #172]	; (800ae94 <log10f+0xdc>)
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	ee18 0a10 	vmov	r0, s16
 800adee:	2300      	movs	r3, #0
 800adf0:	9308      	str	r3, [sp, #32]
 800adf2:	f7f5 fc21 	bl	8000638 <__aeabi_f2d>
 800adf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adfe:	b994      	cbnz	r4, 800ae26 <log10f+0x6e>
 800ae00:	4b25      	ldr	r3, [pc, #148]	; (800ae98 <log10f+0xe0>)
 800ae02:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ae06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ae0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae12:	d025      	beq.n	800ae60 <log10f+0xa8>
 800ae14:	2301      	movs	r3, #1
 800ae16:	2c02      	cmp	r4, #2
 800ae18:	9300      	str	r3, [sp, #0]
 800ae1a:	d116      	bne.n	800ae4a <log10f+0x92>
 800ae1c:	f7fe ffcc 	bl	8009db8 <__errno>
 800ae20:	2321      	movs	r3, #33	; 0x21
 800ae22:	6003      	str	r3, [r0, #0]
 800ae24:	e016      	b.n	800ae54 <log10f+0x9c>
 800ae26:	4b1d      	ldr	r3, [pc, #116]	; (800ae9c <log10f+0xe4>)
 800ae28:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae36:	d1ed      	bne.n	800ae14 <log10f+0x5c>
 800ae38:	2302      	movs	r3, #2
 800ae3a:	429c      	cmp	r4, r3
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	d111      	bne.n	800ae64 <log10f+0xac>
 800ae40:	f7fe ffba 	bl	8009db8 <__errno>
 800ae44:	2322      	movs	r3, #34	; 0x22
 800ae46:	6003      	str	r3, [r0, #0]
 800ae48:	e011      	b.n	800ae6e <log10f+0xb6>
 800ae4a:	4668      	mov	r0, sp
 800ae4c:	f000 fa95 	bl	800b37a <matherr>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d0e3      	beq.n	800ae1c <log10f+0x64>
 800ae54:	4812      	ldr	r0, [pc, #72]	; (800aea0 <log10f+0xe8>)
 800ae56:	f000 fa93 	bl	800b380 <nan>
 800ae5a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ae5e:	e006      	b.n	800ae6e <log10f+0xb6>
 800ae60:	2302      	movs	r3, #2
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	4668      	mov	r0, sp
 800ae66:	f000 fa88 	bl	800b37a <matherr>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d0e8      	beq.n	800ae40 <log10f+0x88>
 800ae6e:	9b08      	ldr	r3, [sp, #32]
 800ae70:	b11b      	cbz	r3, 800ae7a <log10f+0xc2>
 800ae72:	f7fe ffa1 	bl	8009db8 <__errno>
 800ae76:	9b08      	ldr	r3, [sp, #32]
 800ae78:	6003      	str	r3, [r0, #0]
 800ae7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae7e:	f7f5 fecd 	bl	8000c1c <__aeabi_d2f>
 800ae82:	ee00 0a10 	vmov	s0, r0
 800ae86:	b00a      	add	sp, #40	; 0x28
 800ae88:	ecbd 8b02 	vpop	{d8}
 800ae8c:	bd10      	pop	{r4, pc}
 800ae8e:	bf00      	nop
 800ae90:	20000f30 	.word	0x20000f30
 800ae94:	080311ec 	.word	0x080311ec
 800ae98:	c7efffff 	.word	0xc7efffff
 800ae9c:	fff00000 	.word	0xfff00000
 800aea0:	080311b9 	.word	0x080311b9

0800aea4 <sqrtf>:
 800aea4:	b510      	push	{r4, lr}
 800aea6:	ed2d 8b02 	vpush	{d8}
 800aeaa:	b08a      	sub	sp, #40	; 0x28
 800aeac:	eeb0 8a40 	vmov.f32	s16, s0
 800aeb0:	f000 fa60 	bl	800b374 <__ieee754_sqrtf>
 800aeb4:	4b21      	ldr	r3, [pc, #132]	; (800af3c <sqrtf+0x98>)
 800aeb6:	f993 4000 	ldrsb.w	r4, [r3]
 800aeba:	1c63      	adds	r3, r4, #1
 800aebc:	d02c      	beq.n	800af18 <sqrtf+0x74>
 800aebe:	eeb4 8a48 	vcmp.f32	s16, s16
 800aec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec6:	d627      	bvs.n	800af18 <sqrtf+0x74>
 800aec8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed0:	d522      	bpl.n	800af18 <sqrtf+0x74>
 800aed2:	2301      	movs	r3, #1
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	4b1a      	ldr	r3, [pc, #104]	; (800af40 <sqrtf+0x9c>)
 800aed8:	9301      	str	r3, [sp, #4]
 800aeda:	ee18 0a10 	vmov	r0, s16
 800aede:	2300      	movs	r3, #0
 800aee0:	9308      	str	r3, [sp, #32]
 800aee2:	f7f5 fba9 	bl	8000638 <__aeabi_f2d>
 800aee6:	2200      	movs	r2, #0
 800aee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aef0:	2300      	movs	r3, #0
 800aef2:	b9ac      	cbnz	r4, 800af20 <sqrtf+0x7c>
 800aef4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aef8:	4668      	mov	r0, sp
 800aefa:	f000 fa3e 	bl	800b37a <matherr>
 800aefe:	b1b8      	cbz	r0, 800af30 <sqrtf+0x8c>
 800af00:	9b08      	ldr	r3, [sp, #32]
 800af02:	b11b      	cbz	r3, 800af0c <sqrtf+0x68>
 800af04:	f7fe ff58 	bl	8009db8 <__errno>
 800af08:	9b08      	ldr	r3, [sp, #32]
 800af0a:	6003      	str	r3, [r0, #0]
 800af0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af10:	f7f5 fe84 	bl	8000c1c <__aeabi_d2f>
 800af14:	ee00 0a10 	vmov	s0, r0
 800af18:	b00a      	add	sp, #40	; 0x28
 800af1a:	ecbd 8b02 	vpop	{d8}
 800af1e:	bd10      	pop	{r4, pc}
 800af20:	4610      	mov	r0, r2
 800af22:	4619      	mov	r1, r3
 800af24:	f7f5 fd0a 	bl	800093c <__aeabi_ddiv>
 800af28:	2c02      	cmp	r4, #2
 800af2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af2e:	d1e3      	bne.n	800aef8 <sqrtf+0x54>
 800af30:	f7fe ff42 	bl	8009db8 <__errno>
 800af34:	2321      	movs	r3, #33	; 0x21
 800af36:	6003      	str	r3, [r0, #0]
 800af38:	e7e2      	b.n	800af00 <sqrtf+0x5c>
 800af3a:	bf00      	nop
 800af3c:	20000f30 	.word	0x20000f30
 800af40:	080311f3 	.word	0x080311f3

0800af44 <__ieee754_expf>:
 800af44:	ee10 2a10 	vmov	r2, s0
 800af48:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800af4c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800af50:	d902      	bls.n	800af58 <__ieee754_expf+0x14>
 800af52:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af56:	4770      	bx	lr
 800af58:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800af5c:	d106      	bne.n	800af6c <__ieee754_expf+0x28>
 800af5e:	eddf 7a51 	vldr	s15, [pc, #324]	; 800b0a4 <__ieee754_expf+0x160>
 800af62:	2b00      	cmp	r3, #0
 800af64:	bf18      	it	ne
 800af66:	eeb0 0a67 	vmovne.f32	s0, s15
 800af6a:	4770      	bx	lr
 800af6c:	484e      	ldr	r0, [pc, #312]	; (800b0a8 <__ieee754_expf+0x164>)
 800af6e:	4282      	cmp	r2, r0
 800af70:	dd04      	ble.n	800af7c <__ieee754_expf+0x38>
 800af72:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800b0ac <__ieee754_expf+0x168>
 800af76:	ee20 0a00 	vmul.f32	s0, s0, s0
 800af7a:	4770      	bx	lr
 800af7c:	2a00      	cmp	r2, #0
 800af7e:	da03      	bge.n	800af88 <__ieee754_expf+0x44>
 800af80:	4a4b      	ldr	r2, [pc, #300]	; (800b0b0 <__ieee754_expf+0x16c>)
 800af82:	4291      	cmp	r1, r2
 800af84:	f200 808a 	bhi.w	800b09c <__ieee754_expf+0x158>
 800af88:	4a4a      	ldr	r2, [pc, #296]	; (800b0b4 <__ieee754_expf+0x170>)
 800af8a:	4291      	cmp	r1, r2
 800af8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800af90:	d954      	bls.n	800b03c <__ieee754_expf+0xf8>
 800af92:	4a49      	ldr	r2, [pc, #292]	; (800b0b8 <__ieee754_expf+0x174>)
 800af94:	4291      	cmp	r1, r2
 800af96:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800af9a:	d836      	bhi.n	800b00a <__ieee754_expf+0xc6>
 800af9c:	4947      	ldr	r1, [pc, #284]	; (800b0bc <__ieee754_expf+0x178>)
 800af9e:	4411      	add	r1, r2
 800afa0:	ed91 7a00 	vldr	s14, [r1]
 800afa4:	4946      	ldr	r1, [pc, #280]	; (800b0c0 <__ieee754_expf+0x17c>)
 800afa6:	440a      	add	r2, r1
 800afa8:	edd2 7a00 	vldr	s15, [r2]
 800afac:	ee30 7a47 	vsub.f32	s14, s0, s14
 800afb0:	f1c3 0201 	rsb	r2, r3, #1
 800afb4:	1ad2      	subs	r2, r2, r3
 800afb6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800afba:	ee60 6a00 	vmul.f32	s13, s0, s0
 800afbe:	eddf 5a41 	vldr	s11, [pc, #260]	; 800b0c4 <__ieee754_expf+0x180>
 800afc2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800b0c8 <__ieee754_expf+0x184>
 800afc6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800afca:	eddf 5a40 	vldr	s11, [pc, #256]	; 800b0cc <__ieee754_expf+0x188>
 800afce:	eee5 5a26 	vfma.f32	s11, s10, s13
 800afd2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800b0d0 <__ieee754_expf+0x18c>
 800afd6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800afda:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b0d4 <__ieee754_expf+0x190>
 800afde:	eee5 5a26 	vfma.f32	s11, s10, s13
 800afe2:	eeb0 5a40 	vmov.f32	s10, s0
 800afe6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800afea:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800afee:	eef0 6a45 	vmov.f32	s13, s10
 800aff2:	ee20 5a05 	vmul.f32	s10, s0, s10
 800aff6:	bb92      	cbnz	r2, 800b05e <__ieee754_expf+0x11a>
 800aff8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800affc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b000:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b004:	ee36 0a40 	vsub.f32	s0, s12, s0
 800b008:	4770      	bx	lr
 800b00a:	4b33      	ldr	r3, [pc, #204]	; (800b0d8 <__ieee754_expf+0x194>)
 800b00c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800b0dc <__ieee754_expf+0x198>
 800b010:	4413      	add	r3, r2
 800b012:	edd3 7a00 	vldr	s15, [r3]
 800b016:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b01a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b0e0 <__ieee754_expf+0x19c>
 800b01e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b022:	ee17 2a90 	vmov	r2, s15
 800b026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b02a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b02e:	eeb0 7a40 	vmov.f32	s14, s0
 800b032:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b0e4 <__ieee754_expf+0x1a0>
 800b036:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b03a:	e7bc      	b.n	800afb6 <__ieee754_expf+0x72>
 800b03c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800b040:	d20b      	bcs.n	800b05a <__ieee754_expf+0x116>
 800b042:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800b0ac <__ieee754_expf+0x168>
 800b046:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b04a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800b04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b052:	dd02      	ble.n	800b05a <__ieee754_expf+0x116>
 800b054:	ee30 0a06 	vadd.f32	s0, s0, s12
 800b058:	4770      	bx	lr
 800b05a:	2200      	movs	r2, #0
 800b05c:	e7ad      	b.n	800afba <__ieee754_expf+0x76>
 800b05e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800b062:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800b066:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800b06a:	bfb8      	it	lt
 800b06c:	3264      	addlt	r2, #100	; 0x64
 800b06e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b072:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b076:	ee76 7a40 	vsub.f32	s15, s12, s0
 800b07a:	ee17 3a90 	vmov	r3, s15
 800b07e:	bfab      	itete	ge
 800b080:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b084:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b088:	ee00 3a10 	vmovge	s0, r3
 800b08c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800b0e8 <__ieee754_expf+0x1a4>
 800b090:	bfbc      	itt	lt
 800b092:	ee00 3a10 	vmovlt	s0, r3
 800b096:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b09a:	4770      	bx	lr
 800b09c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b0a4 <__ieee754_expf+0x160>
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	00000000 	.word	0x00000000
 800b0a8:	42b17217 	.word	0x42b17217
 800b0ac:	7149f2ca 	.word	0x7149f2ca
 800b0b0:	42cff1b5 	.word	0x42cff1b5
 800b0b4:	3eb17218 	.word	0x3eb17218
 800b0b8:	3f851591 	.word	0x3f851591
 800b0bc:	08031204 	.word	0x08031204
 800b0c0:	0803120c 	.word	0x0803120c
 800b0c4:	3331bb4c 	.word	0x3331bb4c
 800b0c8:	b5ddea0e 	.word	0xb5ddea0e
 800b0cc:	388ab355 	.word	0x388ab355
 800b0d0:	bb360b61 	.word	0xbb360b61
 800b0d4:	3e2aaaab 	.word	0x3e2aaaab
 800b0d8:	080311fc 	.word	0x080311fc
 800b0dc:	3fb8aa3b 	.word	0x3fb8aa3b
 800b0e0:	3f317180 	.word	0x3f317180
 800b0e4:	3717f7d1 	.word	0x3717f7d1
 800b0e8:	0d800000 	.word	0x0d800000

0800b0ec <__ieee754_logf>:
 800b0ec:	ee10 3a10 	vmov	r3, s0
 800b0f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b0f4:	d106      	bne.n	800b104 <__ieee754_logf+0x18>
 800b0f6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800b28c <__ieee754_logf+0x1a0>
 800b0fa:	eddf 7a65 	vldr	s15, [pc, #404]	; 800b290 <__ieee754_logf+0x1a4>
 800b0fe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b102:	4770      	bx	lr
 800b104:	2b00      	cmp	r3, #0
 800b106:	da02      	bge.n	800b10e <__ieee754_logf+0x22>
 800b108:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b10c:	e7f5      	b.n	800b0fa <__ieee754_logf+0xe>
 800b10e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b112:	db02      	blt.n	800b11a <__ieee754_logf+0x2e>
 800b114:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b118:	4770      	bx	lr
 800b11a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b11e:	bfbf      	itttt	lt
 800b120:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800b294 <__ieee754_logf+0x1a8>
 800b124:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b128:	f06f 0118 	mvnlt.w	r1, #24
 800b12c:	ee17 3a90 	vmovlt	r3, s15
 800b130:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800b134:	bfa8      	it	ge
 800b136:	2100      	movge	r1, #0
 800b138:	3a7f      	subs	r2, #127	; 0x7f
 800b13a:	440a      	add	r2, r1
 800b13c:	4956      	ldr	r1, [pc, #344]	; (800b298 <__ieee754_logf+0x1ac>)
 800b13e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b142:	4419      	add	r1, r3
 800b144:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800b148:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800b14c:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800b150:	4319      	orrs	r1, r3
 800b152:	ee07 1a90 	vmov	s15, r1
 800b156:	f103 010f 	add.w	r1, r3, #15
 800b15a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800b15e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b162:	290f      	cmp	r1, #15
 800b164:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b168:	dc31      	bgt.n	800b1ce <__ieee754_logf+0xe2>
 800b16a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b172:	d10f      	bne.n	800b194 <__ieee754_logf+0xa8>
 800b174:	2a00      	cmp	r2, #0
 800b176:	f000 8085 	beq.w	800b284 <__ieee754_logf+0x198>
 800b17a:	ee07 2a90 	vmov	s15, r2
 800b17e:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800b29c <__ieee754_logf+0x1b0>
 800b182:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800b2a0 <__ieee754_logf+0x1b4>
 800b186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b18a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b18e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b192:	4770      	bx	lr
 800b194:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b2a4 <__ieee754_logf+0x1b8>
 800b198:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b19c:	eea0 7a67 	vfms.f32	s14, s0, s15
 800b1a0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b1a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1a8:	b912      	cbnz	r2, 800b1b0 <__ieee754_logf+0xc4>
 800b1aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b1ae:	4770      	bx	lr
 800b1b0:	ee07 2a90 	vmov	s15, r2
 800b1b4:	eddf 6a39 	vldr	s13, [pc, #228]	; 800b29c <__ieee754_logf+0x1b0>
 800b1b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1bc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b1c0:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b1c4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b2a0 <__ieee754_logf+0x1b4>
 800b1c8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800b1cc:	4770      	bx	lr
 800b1ce:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b1d2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b1d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b2a8 <__ieee754_logf+0x1bc>
 800b1da:	eddf 4a34 	vldr	s9, [pc, #208]	; 800b2ac <__ieee754_logf+0x1c0>
 800b1de:	4934      	ldr	r1, [pc, #208]	; (800b2b0 <__ieee754_logf+0x1c4>)
 800b1e0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800b1e4:	4419      	add	r1, r3
 800b1e6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800b1ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b1ee:	430b      	orrs	r3, r1
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	ee07 2a90 	vmov	s15, r2
 800b1f6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800b1fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b1fe:	ee25 7a05 	vmul.f32	s14, s10, s10
 800b202:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800b2b4 <__ieee754_logf+0x1c8>
 800b206:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b20a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800b2b8 <__ieee754_logf+0x1cc>
 800b20e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b212:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800b2bc <__ieee754_logf+0x1d0>
 800b216:	eee7 7a24 	vfma.f32	s15, s14, s9
 800b21a:	eddf 4a29 	vldr	s9, [pc, #164]	; 800b2c0 <__ieee754_logf+0x1d4>
 800b21e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800b222:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b2c4 <__ieee754_logf+0x1d8>
 800b226:	eee4 7a87 	vfma.f32	s15, s9, s14
 800b22a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b22e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b232:	dd1c      	ble.n	800b26e <__ieee754_logf+0x182>
 800b234:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b238:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b23c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b240:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b244:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b248:	b922      	cbnz	r2, 800b254 <__ieee754_logf+0x168>
 800b24a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b24e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b252:	4770      	bx	lr
 800b254:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800b29c <__ieee754_logf+0x1b0>
 800b258:	eee6 7a86 	vfma.f32	s15, s13, s12
 800b25c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b260:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b264:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b2a0 <__ieee754_logf+0x1b4>
 800b268:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800b26c:	4770      	bx	lr
 800b26e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b272:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b276:	2a00      	cmp	r2, #0
 800b278:	d0e9      	beq.n	800b24e <__ieee754_logf+0x162>
 800b27a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800b29c <__ieee754_logf+0x1b0>
 800b27e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b282:	e7ed      	b.n	800b260 <__ieee754_logf+0x174>
 800b284:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800b290 <__ieee754_logf+0x1a4>
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	cc000000 	.word	0xcc000000
 800b290:	00000000 	.word	0x00000000
 800b294:	4c000000 	.word	0x4c000000
 800b298:	004afb20 	.word	0x004afb20
 800b29c:	3717f7d1 	.word	0x3717f7d1
 800b2a0:	3f317180 	.word	0x3f317180
 800b2a4:	3eaaaaab 	.word	0x3eaaaaab
 800b2a8:	3e1cd04f 	.word	0x3e1cd04f
 800b2ac:	3e178897 	.word	0x3e178897
 800b2b0:	ffcf5c30 	.word	0xffcf5c30
 800b2b4:	3e638e29 	.word	0x3e638e29
 800b2b8:	3ecccccd 	.word	0x3ecccccd
 800b2bc:	3e3a3325 	.word	0x3e3a3325
 800b2c0:	3e924925 	.word	0x3e924925
 800b2c4:	3f2aaaab 	.word	0x3f2aaaab

0800b2c8 <__ieee754_log10f>:
 800b2c8:	b508      	push	{r3, lr}
 800b2ca:	ee10 2a10 	vmov	r2, s0
 800b2ce:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800b2d2:	ed2d 8b02 	vpush	{d8}
 800b2d6:	d108      	bne.n	800b2ea <__ieee754_log10f+0x22>
 800b2d8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b35c <__ieee754_log10f+0x94>
 800b2dc:	eddf 7a20 	vldr	s15, [pc, #128]	; 800b360 <__ieee754_log10f+0x98>
 800b2e0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b2e4:	ecbd 8b02 	vpop	{d8}
 800b2e8:	bd08      	pop	{r3, pc}
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	da02      	bge.n	800b2f4 <__ieee754_log10f+0x2c>
 800b2ee:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b2f2:	e7f3      	b.n	800b2dc <__ieee754_log10f+0x14>
 800b2f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b2f8:	db02      	blt.n	800b300 <__ieee754_log10f+0x38>
 800b2fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b2fe:	e7f1      	b.n	800b2e4 <__ieee754_log10f+0x1c>
 800b300:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b304:	bfbf      	itttt	lt
 800b306:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 800b364 <__ieee754_log10f+0x9c>
 800b30a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b30e:	f06f 0118 	mvnlt.w	r1, #24
 800b312:	ee17 2a90 	vmovlt	r2, s15
 800b316:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800b31a:	bfa8      	it	ge
 800b31c:	2100      	movge	r1, #0
 800b31e:	3b7f      	subs	r3, #127	; 0x7f
 800b320:	440b      	add	r3, r1
 800b322:	0fd9      	lsrs	r1, r3, #31
 800b324:	440b      	add	r3, r1
 800b326:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b32a:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800b32e:	ee07 3a90 	vmov	s15, r3
 800b332:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800b336:	ee00 3a10 	vmov	s0, r3
 800b33a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800b33e:	f7ff fed5 	bl	800b0ec <__ieee754_logf>
 800b342:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b368 <__ieee754_log10f+0xa0>
 800b346:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b34a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b36c <__ieee754_log10f+0xa4>
 800b34e:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b352:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b370 <__ieee754_log10f+0xa8>
 800b356:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b35a:	e7c3      	b.n	800b2e4 <__ieee754_log10f+0x1c>
 800b35c:	cc000000 	.word	0xcc000000
 800b360:	00000000 	.word	0x00000000
 800b364:	4c000000 	.word	0x4c000000
 800b368:	3ede5bd9 	.word	0x3ede5bd9
 800b36c:	355427db 	.word	0x355427db
 800b370:	3e9a2080 	.word	0x3e9a2080

0800b374 <__ieee754_sqrtf>:
 800b374:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b378:	4770      	bx	lr

0800b37a <matherr>:
 800b37a:	2000      	movs	r0, #0
 800b37c:	4770      	bx	lr
	...

0800b380 <nan>:
 800b380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b388 <nan+0x8>
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	00000000 	.word	0x00000000
 800b38c:	7ff80000 	.word	0x7ff80000

0800b390 <finitef>:
 800b390:	ee10 3a10 	vmov	r3, s0
 800b394:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800b398:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b39c:	bfac      	ite	ge
 800b39e:	2000      	movge	r0, #0
 800b3a0:	2001      	movlt	r0, #1
 800b3a2:	4770      	bx	lr

0800b3a4 <_init>:
 800b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a6:	bf00      	nop
 800b3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3aa:	bc08      	pop	{r3}
 800b3ac:	469e      	mov	lr, r3
 800b3ae:	4770      	bx	lr

0800b3b0 <_fini>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	bf00      	nop
 800b3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b6:	bc08      	pop	{r3}
 800b3b8:	469e      	mov	lr, r3
 800b3ba:	4770      	bx	lr
